
test_i2c_usb_f407vet6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008508  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a4  08008698  08008698  00009698  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800873c  0800873c  0000a14c  2**0
                  CONTENTS
  4 .ARM          00000008  0800873c  0800873c  0000973c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008744  08008744  0000a14c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008744  08008744  00009744  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008748  08008748  00009748  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000014c  20000000  0800874c  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000a14c  2**0
                  CONTENTS
 10 .bss          00001d64  2000014c  2000014c  0000a14c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20001eb0  20001eb0  0000a14c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000a14c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001183f  00000000  00000000  0000a17c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003a00  00000000  00000000  0001b9bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000010b8  00000000  00000000  0001f3c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000c49  00000000  00000000  00020478  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000260bc  00000000  00000000  000210c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00016788  00000000  00000000  0004717d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d128f  00000000  00000000  0005d905  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0012eb94  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000047f0  00000000  00000000  0012ebd8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000061  00000000  00000000  001333c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000014c 	.word	0x2000014c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008680 	.word	0x08008680

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000150 	.word	0x20000150
 80001cc:	08008680 	.word	0x08008680

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96a 	b.w	800056c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	460c      	mov	r4, r1
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d14e      	bne.n	800035a <__udivmoddi4+0xaa>
 80002bc:	4694      	mov	ip, r2
 80002be:	458c      	cmp	ip, r1
 80002c0:	4686      	mov	lr, r0
 80002c2:	fab2 f282 	clz	r2, r2
 80002c6:	d962      	bls.n	800038e <__udivmoddi4+0xde>
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0320 	rsb	r3, r2, #32
 80002ce:	4091      	lsls	r1, r2
 80002d0:	fa20 f303 	lsr.w	r3, r0, r3
 80002d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002d8:	4319      	orrs	r1, r3
 80002da:	fa00 fe02 	lsl.w	lr, r0, r2
 80002de:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002e2:	fa1f f68c 	uxth.w	r6, ip
 80002e6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002ea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002ee:	fb07 1114 	mls	r1, r7, r4, r1
 80002f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f6:	fb04 f106 	mul.w	r1, r4, r6
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f104 30ff 	add.w	r0, r4, #4294967295
 8000306:	f080 8112 	bcs.w	800052e <__udivmoddi4+0x27e>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 810f 	bls.w	800052e <__udivmoddi4+0x27e>
 8000310:	3c02      	subs	r4, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a59      	subs	r1, r3, r1
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb1 f0f7 	udiv	r0, r1, r7
 800031e:	fb07 1110 	mls	r1, r7, r0, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb00 f606 	mul.w	r6, r0, r6
 800032a:	429e      	cmp	r6, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x94>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 31ff 	add.w	r1, r0, #4294967295
 8000336:	f080 80fc 	bcs.w	8000532 <__udivmoddi4+0x282>
 800033a:	429e      	cmp	r6, r3
 800033c:	f240 80f9 	bls.w	8000532 <__udivmoddi4+0x282>
 8000340:	4463      	add	r3, ip
 8000342:	3802      	subs	r0, #2
 8000344:	1b9b      	subs	r3, r3, r6
 8000346:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800034a:	2100      	movs	r1, #0
 800034c:	b11d      	cbz	r5, 8000356 <__udivmoddi4+0xa6>
 800034e:	40d3      	lsrs	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	e9c5 3200 	strd	r3, r2, [r5]
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d905      	bls.n	800036a <__udivmoddi4+0xba>
 800035e:	b10d      	cbz	r5, 8000364 <__udivmoddi4+0xb4>
 8000360:	e9c5 0100 	strd	r0, r1, [r5]
 8000364:	2100      	movs	r1, #0
 8000366:	4608      	mov	r0, r1
 8000368:	e7f5      	b.n	8000356 <__udivmoddi4+0xa6>
 800036a:	fab3 f183 	clz	r1, r3
 800036e:	2900      	cmp	r1, #0
 8000370:	d146      	bne.n	8000400 <__udivmoddi4+0x150>
 8000372:	42a3      	cmp	r3, r4
 8000374:	d302      	bcc.n	800037c <__udivmoddi4+0xcc>
 8000376:	4290      	cmp	r0, r2
 8000378:	f0c0 80f0 	bcc.w	800055c <__udivmoddi4+0x2ac>
 800037c:	1a86      	subs	r6, r0, r2
 800037e:	eb64 0303 	sbc.w	r3, r4, r3
 8000382:	2001      	movs	r0, #1
 8000384:	2d00      	cmp	r5, #0
 8000386:	d0e6      	beq.n	8000356 <__udivmoddi4+0xa6>
 8000388:	e9c5 6300 	strd	r6, r3, [r5]
 800038c:	e7e3      	b.n	8000356 <__udivmoddi4+0xa6>
 800038e:	2a00      	cmp	r2, #0
 8000390:	f040 8090 	bne.w	80004b4 <__udivmoddi4+0x204>
 8000394:	eba1 040c 	sub.w	r4, r1, ip
 8000398:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800039c:	fa1f f78c 	uxth.w	r7, ip
 80003a0:	2101      	movs	r1, #1
 80003a2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003a6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003aa:	fb08 4416 	mls	r4, r8, r6, r4
 80003ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003b2:	fb07 f006 	mul.w	r0, r7, r6
 80003b6:	4298      	cmp	r0, r3
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x11c>
 80003ba:	eb1c 0303 	adds.w	r3, ip, r3
 80003be:	f106 34ff 	add.w	r4, r6, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x11a>
 80003c4:	4298      	cmp	r0, r3
 80003c6:	f200 80cd 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 80003ca:	4626      	mov	r6, r4
 80003cc:	1a1c      	subs	r4, r3, r0
 80003ce:	fa1f f38e 	uxth.w	r3, lr
 80003d2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003d6:	fb08 4410 	mls	r4, r8, r0, r4
 80003da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003de:	fb00 f707 	mul.w	r7, r0, r7
 80003e2:	429f      	cmp	r7, r3
 80003e4:	d908      	bls.n	80003f8 <__udivmoddi4+0x148>
 80003e6:	eb1c 0303 	adds.w	r3, ip, r3
 80003ea:	f100 34ff 	add.w	r4, r0, #4294967295
 80003ee:	d202      	bcs.n	80003f6 <__udivmoddi4+0x146>
 80003f0:	429f      	cmp	r7, r3
 80003f2:	f200 80b0 	bhi.w	8000556 <__udivmoddi4+0x2a6>
 80003f6:	4620      	mov	r0, r4
 80003f8:	1bdb      	subs	r3, r3, r7
 80003fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003fe:	e7a5      	b.n	800034c <__udivmoddi4+0x9c>
 8000400:	f1c1 0620 	rsb	r6, r1, #32
 8000404:	408b      	lsls	r3, r1
 8000406:	fa22 f706 	lsr.w	r7, r2, r6
 800040a:	431f      	orrs	r7, r3
 800040c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000410:	fa04 f301 	lsl.w	r3, r4, r1
 8000414:	ea43 030c 	orr.w	r3, r3, ip
 8000418:	40f4      	lsrs	r4, r6
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	0c38      	lsrs	r0, r7, #16
 8000420:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000424:	fbb4 fef0 	udiv	lr, r4, r0
 8000428:	fa1f fc87 	uxth.w	ip, r7
 800042c:	fb00 441e 	mls	r4, r0, lr, r4
 8000430:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000434:	fb0e f90c 	mul.w	r9, lr, ip
 8000438:	45a1      	cmp	r9, r4
 800043a:	fa02 f201 	lsl.w	r2, r2, r1
 800043e:	d90a      	bls.n	8000456 <__udivmoddi4+0x1a6>
 8000440:	193c      	adds	r4, r7, r4
 8000442:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000446:	f080 8084 	bcs.w	8000552 <__udivmoddi4+0x2a2>
 800044a:	45a1      	cmp	r9, r4
 800044c:	f240 8081 	bls.w	8000552 <__udivmoddi4+0x2a2>
 8000450:	f1ae 0e02 	sub.w	lr, lr, #2
 8000454:	443c      	add	r4, r7
 8000456:	eba4 0409 	sub.w	r4, r4, r9
 800045a:	fa1f f983 	uxth.w	r9, r3
 800045e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000462:	fb00 4413 	mls	r4, r0, r3, r4
 8000466:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800046a:	fb03 fc0c 	mul.w	ip, r3, ip
 800046e:	45a4      	cmp	ip, r4
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x1d2>
 8000472:	193c      	adds	r4, r7, r4
 8000474:	f103 30ff 	add.w	r0, r3, #4294967295
 8000478:	d267      	bcs.n	800054a <__udivmoddi4+0x29a>
 800047a:	45a4      	cmp	ip, r4
 800047c:	d965      	bls.n	800054a <__udivmoddi4+0x29a>
 800047e:	3b02      	subs	r3, #2
 8000480:	443c      	add	r4, r7
 8000482:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000486:	fba0 9302 	umull	r9, r3, r0, r2
 800048a:	eba4 040c 	sub.w	r4, r4, ip
 800048e:	429c      	cmp	r4, r3
 8000490:	46ce      	mov	lr, r9
 8000492:	469c      	mov	ip, r3
 8000494:	d351      	bcc.n	800053a <__udivmoddi4+0x28a>
 8000496:	d04e      	beq.n	8000536 <__udivmoddi4+0x286>
 8000498:	b155      	cbz	r5, 80004b0 <__udivmoddi4+0x200>
 800049a:	ebb8 030e 	subs.w	r3, r8, lr
 800049e:	eb64 040c 	sbc.w	r4, r4, ip
 80004a2:	fa04 f606 	lsl.w	r6, r4, r6
 80004a6:	40cb      	lsrs	r3, r1
 80004a8:	431e      	orrs	r6, r3
 80004aa:	40cc      	lsrs	r4, r1
 80004ac:	e9c5 6400 	strd	r6, r4, [r5]
 80004b0:	2100      	movs	r1, #0
 80004b2:	e750      	b.n	8000356 <__udivmoddi4+0xa6>
 80004b4:	f1c2 0320 	rsb	r3, r2, #32
 80004b8:	fa20 f103 	lsr.w	r1, r0, r3
 80004bc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c0:	fa24 f303 	lsr.w	r3, r4, r3
 80004c4:	4094      	lsls	r4, r2
 80004c6:	430c      	orrs	r4, r1
 80004c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004cc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004d0:	fa1f f78c 	uxth.w	r7, ip
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3110 	mls	r1, r8, r0, r3
 80004dc:	0c23      	lsrs	r3, r4, #16
 80004de:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004e2:	fb00 f107 	mul.w	r1, r0, r7
 80004e6:	4299      	cmp	r1, r3
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x24c>
 80004ea:	eb1c 0303 	adds.w	r3, ip, r3
 80004ee:	f100 36ff 	add.w	r6, r0, #4294967295
 80004f2:	d22c      	bcs.n	800054e <__udivmoddi4+0x29e>
 80004f4:	4299      	cmp	r1, r3
 80004f6:	d92a      	bls.n	800054e <__udivmoddi4+0x29e>
 80004f8:	3802      	subs	r0, #2
 80004fa:	4463      	add	r3, ip
 80004fc:	1a5b      	subs	r3, r3, r1
 80004fe:	b2a4      	uxth	r4, r4
 8000500:	fbb3 f1f8 	udiv	r1, r3, r8
 8000504:	fb08 3311 	mls	r3, r8, r1, r3
 8000508:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800050c:	fb01 f307 	mul.w	r3, r1, r7
 8000510:	42a3      	cmp	r3, r4
 8000512:	d908      	bls.n	8000526 <__udivmoddi4+0x276>
 8000514:	eb1c 0404 	adds.w	r4, ip, r4
 8000518:	f101 36ff 	add.w	r6, r1, #4294967295
 800051c:	d213      	bcs.n	8000546 <__udivmoddi4+0x296>
 800051e:	42a3      	cmp	r3, r4
 8000520:	d911      	bls.n	8000546 <__udivmoddi4+0x296>
 8000522:	3902      	subs	r1, #2
 8000524:	4464      	add	r4, ip
 8000526:	1ae4      	subs	r4, r4, r3
 8000528:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800052c:	e739      	b.n	80003a2 <__udivmoddi4+0xf2>
 800052e:	4604      	mov	r4, r0
 8000530:	e6f0      	b.n	8000314 <__udivmoddi4+0x64>
 8000532:	4608      	mov	r0, r1
 8000534:	e706      	b.n	8000344 <__udivmoddi4+0x94>
 8000536:	45c8      	cmp	r8, r9
 8000538:	d2ae      	bcs.n	8000498 <__udivmoddi4+0x1e8>
 800053a:	ebb9 0e02 	subs.w	lr, r9, r2
 800053e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000542:	3801      	subs	r0, #1
 8000544:	e7a8      	b.n	8000498 <__udivmoddi4+0x1e8>
 8000546:	4631      	mov	r1, r6
 8000548:	e7ed      	b.n	8000526 <__udivmoddi4+0x276>
 800054a:	4603      	mov	r3, r0
 800054c:	e799      	b.n	8000482 <__udivmoddi4+0x1d2>
 800054e:	4630      	mov	r0, r6
 8000550:	e7d4      	b.n	80004fc <__udivmoddi4+0x24c>
 8000552:	46d6      	mov	lr, sl
 8000554:	e77f      	b.n	8000456 <__udivmoddi4+0x1a6>
 8000556:	4463      	add	r3, ip
 8000558:	3802      	subs	r0, #2
 800055a:	e74d      	b.n	80003f8 <__udivmoddi4+0x148>
 800055c:	4606      	mov	r6, r0
 800055e:	4623      	mov	r3, r4
 8000560:	4608      	mov	r0, r1
 8000562:	e70f      	b.n	8000384 <__udivmoddi4+0xd4>
 8000564:	3e02      	subs	r6, #2
 8000566:	4463      	add	r3, ip
 8000568:	e730      	b.n	80003cc <__udivmoddi4+0x11c>
 800056a:	bf00      	nop

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000570:	b480      	push	{r7}
 8000572:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000574:	4b04      	ldr	r3, [pc, #16]	@ (8000588 <__NVIC_GetPriorityGrouping+0x18>)
 8000576:	68db      	ldr	r3, [r3, #12]
 8000578:	0a1b      	lsrs	r3, r3, #8
 800057a:	f003 0307 	and.w	r3, r3, #7
}
 800057e:	4618      	mov	r0, r3
 8000580:	46bd      	mov	sp, r7
 8000582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000586:	4770      	bx	lr
 8000588:	e000ed00 	.word	0xe000ed00

0800058c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800058c:	b480      	push	{r7}
 800058e:	b083      	sub	sp, #12
 8000590:	af00      	add	r7, sp, #0
 8000592:	4603      	mov	r3, r0
 8000594:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000596:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800059a:	2b00      	cmp	r3, #0
 800059c:	db0b      	blt.n	80005b6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800059e:	79fb      	ldrb	r3, [r7, #7]
 80005a0:	f003 021f 	and.w	r2, r3, #31
 80005a4:	4907      	ldr	r1, [pc, #28]	@ (80005c4 <__NVIC_EnableIRQ+0x38>)
 80005a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005aa:	095b      	lsrs	r3, r3, #5
 80005ac:	2001      	movs	r0, #1
 80005ae:	fa00 f202 	lsl.w	r2, r0, r2
 80005b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80005b6:	bf00      	nop
 80005b8:	370c      	adds	r7, #12
 80005ba:	46bd      	mov	sp, r7
 80005bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c0:	4770      	bx	lr
 80005c2:	bf00      	nop
 80005c4:	e000e100 	.word	0xe000e100

080005c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80005c8:	b480      	push	{r7}
 80005ca:	b083      	sub	sp, #12
 80005cc:	af00      	add	r7, sp, #0
 80005ce:	4603      	mov	r3, r0
 80005d0:	6039      	str	r1, [r7, #0]
 80005d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80005d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005d8:	2b00      	cmp	r3, #0
 80005da:	db0a      	blt.n	80005f2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005dc:	683b      	ldr	r3, [r7, #0]
 80005de:	b2da      	uxtb	r2, r3
 80005e0:	490c      	ldr	r1, [pc, #48]	@ (8000614 <__NVIC_SetPriority+0x4c>)
 80005e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005e6:	0112      	lsls	r2, r2, #4
 80005e8:	b2d2      	uxtb	r2, r2
 80005ea:	440b      	add	r3, r1
 80005ec:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80005f0:	e00a      	b.n	8000608 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005f2:	683b      	ldr	r3, [r7, #0]
 80005f4:	b2da      	uxtb	r2, r3
 80005f6:	4908      	ldr	r1, [pc, #32]	@ (8000618 <__NVIC_SetPriority+0x50>)
 80005f8:	79fb      	ldrb	r3, [r7, #7]
 80005fa:	f003 030f 	and.w	r3, r3, #15
 80005fe:	3b04      	subs	r3, #4
 8000600:	0112      	lsls	r2, r2, #4
 8000602:	b2d2      	uxtb	r2, r2
 8000604:	440b      	add	r3, r1
 8000606:	761a      	strb	r2, [r3, #24]
}
 8000608:	bf00      	nop
 800060a:	370c      	adds	r7, #12
 800060c:	46bd      	mov	sp, r7
 800060e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000612:	4770      	bx	lr
 8000614:	e000e100 	.word	0xe000e100
 8000618:	e000ed00 	.word	0xe000ed00

0800061c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800061c:	b480      	push	{r7}
 800061e:	b089      	sub	sp, #36	@ 0x24
 8000620:	af00      	add	r7, sp, #0
 8000622:	60f8      	str	r0, [r7, #12]
 8000624:	60b9      	str	r1, [r7, #8]
 8000626:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000628:	68fb      	ldr	r3, [r7, #12]
 800062a:	f003 0307 	and.w	r3, r3, #7
 800062e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000630:	69fb      	ldr	r3, [r7, #28]
 8000632:	f1c3 0307 	rsb	r3, r3, #7
 8000636:	2b04      	cmp	r3, #4
 8000638:	bf28      	it	cs
 800063a:	2304      	movcs	r3, #4
 800063c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800063e:	69fb      	ldr	r3, [r7, #28]
 8000640:	3304      	adds	r3, #4
 8000642:	2b06      	cmp	r3, #6
 8000644:	d902      	bls.n	800064c <NVIC_EncodePriority+0x30>
 8000646:	69fb      	ldr	r3, [r7, #28]
 8000648:	3b03      	subs	r3, #3
 800064a:	e000      	b.n	800064e <NVIC_EncodePriority+0x32>
 800064c:	2300      	movs	r3, #0
 800064e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000650:	f04f 32ff 	mov.w	r2, #4294967295
 8000654:	69bb      	ldr	r3, [r7, #24]
 8000656:	fa02 f303 	lsl.w	r3, r2, r3
 800065a:	43da      	mvns	r2, r3
 800065c:	68bb      	ldr	r3, [r7, #8]
 800065e:	401a      	ands	r2, r3
 8000660:	697b      	ldr	r3, [r7, #20]
 8000662:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000664:	f04f 31ff 	mov.w	r1, #4294967295
 8000668:	697b      	ldr	r3, [r7, #20]
 800066a:	fa01 f303 	lsl.w	r3, r1, r3
 800066e:	43d9      	mvns	r1, r3
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000674:	4313      	orrs	r3, r2
         );
}
 8000676:	4618      	mov	r0, r3
 8000678:	3724      	adds	r7, #36	@ 0x24
 800067a:	46bd      	mov	sp, r7
 800067c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000680:	4770      	bx	lr
	...

08000684 <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 8000684:	b480      	push	{r7}
 8000686:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8000688:	4b05      	ldr	r3, [pc, #20]	@ (80006a0 <LL_RCC_HSE_Enable+0x1c>)
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	4a04      	ldr	r2, [pc, #16]	@ (80006a0 <LL_RCC_HSE_Enable+0x1c>)
 800068e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000692:	6013      	str	r3, [r2, #0]
}
 8000694:	bf00      	nop
 8000696:	46bd      	mov	sp, r7
 8000698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800069c:	4770      	bx	lr
 800069e:	bf00      	nop
 80006a0:	40023800 	.word	0x40023800

080006a4 <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 80006a4:	b480      	push	{r7}
 80006a6:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY));
 80006a8:	4b07      	ldr	r3, [pc, #28]	@ (80006c8 <LL_RCC_HSE_IsReady+0x24>)
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80006b0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80006b4:	bf0c      	ite	eq
 80006b6:	2301      	moveq	r3, #1
 80006b8:	2300      	movne	r3, #0
 80006ba:	b2db      	uxtb	r3, r3
}
 80006bc:	4618      	mov	r0, r3
 80006be:	46bd      	mov	sp, r7
 80006c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c4:	4770      	bx	lr
 80006c6:	bf00      	nop
 80006c8:	40023800 	.word	0x40023800

080006cc <LL_RCC_SetSysClkSource>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 80006cc:	b480      	push	{r7}
 80006ce:	b083      	sub	sp, #12
 80006d0:	af00      	add	r7, sp, #0
 80006d2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80006d4:	4b06      	ldr	r3, [pc, #24]	@ (80006f0 <LL_RCC_SetSysClkSource+0x24>)
 80006d6:	689b      	ldr	r3, [r3, #8]
 80006d8:	f023 0203 	bic.w	r2, r3, #3
 80006dc:	4904      	ldr	r1, [pc, #16]	@ (80006f0 <LL_RCC_SetSysClkSource+0x24>)
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	4313      	orrs	r3, r2
 80006e2:	608b      	str	r3, [r1, #8]
}
 80006e4:	bf00      	nop
 80006e6:	370c      	adds	r7, #12
 80006e8:	46bd      	mov	sp, r7
 80006ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ee:	4770      	bx	lr
 80006f0:	40023800 	.word	0x40023800

080006f4 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLLR (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 80006f4:	b480      	push	{r7}
 80006f6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80006f8:	4b04      	ldr	r3, [pc, #16]	@ (800070c <LL_RCC_GetSysClkSource+0x18>)
 80006fa:	689b      	ldr	r3, [r3, #8]
 80006fc:	f003 030c 	and.w	r3, r3, #12
}
 8000700:	4618      	mov	r0, r3
 8000702:	46bd      	mov	sp, r7
 8000704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000708:	4770      	bx	lr
 800070a:	bf00      	nop
 800070c:	40023800 	.word	0x40023800

08000710 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8000710:	b480      	push	{r7}
 8000712:	b083      	sub	sp, #12
 8000714:	af00      	add	r7, sp, #0
 8000716:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8000718:	4b06      	ldr	r3, [pc, #24]	@ (8000734 <LL_RCC_SetAHBPrescaler+0x24>)
 800071a:	689b      	ldr	r3, [r3, #8]
 800071c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8000720:	4904      	ldr	r1, [pc, #16]	@ (8000734 <LL_RCC_SetAHBPrescaler+0x24>)
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	4313      	orrs	r3, r2
 8000726:	608b      	str	r3, [r1, #8]
}
 8000728:	bf00      	nop
 800072a:	370c      	adds	r7, #12
 800072c:	46bd      	mov	sp, r7
 800072e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000732:	4770      	bx	lr
 8000734:	40023800 	.word	0x40023800

08000738 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8000738:	b480      	push	{r7}
 800073a:	b083      	sub	sp, #12
 800073c:	af00      	add	r7, sp, #0
 800073e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8000740:	4b06      	ldr	r3, [pc, #24]	@ (800075c <LL_RCC_SetAPB1Prescaler+0x24>)
 8000742:	689b      	ldr	r3, [r3, #8]
 8000744:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8000748:	4904      	ldr	r1, [pc, #16]	@ (800075c <LL_RCC_SetAPB1Prescaler+0x24>)
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	4313      	orrs	r3, r2
 800074e:	608b      	str	r3, [r1, #8]
}
 8000750:	bf00      	nop
 8000752:	370c      	adds	r7, #12
 8000754:	46bd      	mov	sp, r7
 8000756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800075a:	4770      	bx	lr
 800075c:	40023800 	.word	0x40023800

08000760 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8000760:	b480      	push	{r7}
 8000762:	b083      	sub	sp, #12
 8000764:	af00      	add	r7, sp, #0
 8000766:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8000768:	4b06      	ldr	r3, [pc, #24]	@ (8000784 <LL_RCC_SetAPB2Prescaler+0x24>)
 800076a:	689b      	ldr	r3, [r3, #8]
 800076c:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8000770:	4904      	ldr	r1, [pc, #16]	@ (8000784 <LL_RCC_SetAPB2Prescaler+0x24>)
 8000772:	687b      	ldr	r3, [r7, #4]
 8000774:	4313      	orrs	r3, r2
 8000776:	608b      	str	r3, [r1, #8]
}
 8000778:	bf00      	nop
 800077a:	370c      	adds	r7, #12
 800077c:	46bd      	mov	sp, r7
 800077e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000782:	4770      	bx	lr
 8000784:	40023800 	.word	0x40023800

08000788 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8000788:	b480      	push	{r7}
 800078a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 800078c:	4b05      	ldr	r3, [pc, #20]	@ (80007a4 <LL_RCC_PLL_Enable+0x1c>)
 800078e:	681b      	ldr	r3, [r3, #0]
 8000790:	4a04      	ldr	r2, [pc, #16]	@ (80007a4 <LL_RCC_PLL_Enable+0x1c>)
 8000792:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000796:	6013      	str	r3, [r2, #0]
}
 8000798:	bf00      	nop
 800079a:	46bd      	mov	sp, r7
 800079c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a0:	4770      	bx	lr
 80007a2:	bf00      	nop
 80007a4:	40023800 	.word	0x40023800

080007a8 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 80007a8:	b480      	push	{r7}
 80007aa:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 80007ac:	4b07      	ldr	r3, [pc, #28]	@ (80007cc <LL_RCC_PLL_IsReady+0x24>)
 80007ae:	681b      	ldr	r3, [r3, #0]
 80007b0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80007b4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80007b8:	bf0c      	ite	eq
 80007ba:	2301      	moveq	r3, #1
 80007bc:	2300      	movne	r3, #0
 80007be:	b2db      	uxtb	r3, r3
}
 80007c0:	4618      	mov	r0, r3
 80007c2:	46bd      	mov	sp, r7
 80007c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c8:	4770      	bx	lr
 80007ca:	bf00      	nop
 80007cc:	40023800 	.word	0x40023800

080007d0 <LL_RCC_PLL_ConfigDomain_SYS>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLM, uint32_t PLLN, uint32_t PLLP_R)
{
 80007d0:	b480      	push	{r7}
 80007d2:	b085      	sub	sp, #20
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	60f8      	str	r0, [r7, #12]
 80007d8:	60b9      	str	r1, [r7, #8]
 80007da:	607a      	str	r2, [r7, #4]
 80007dc:	603b      	str	r3, [r7, #0]
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN,
 80007de:	4b0d      	ldr	r3, [pc, #52]	@ (8000814 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 80007e0:	685a      	ldr	r2, [r3, #4]
 80007e2:	4b0d      	ldr	r3, [pc, #52]	@ (8000818 <LL_RCC_PLL_ConfigDomain_SYS+0x48>)
 80007e4:	4013      	ands	r3, r2
 80007e6:	68f9      	ldr	r1, [r7, #12]
 80007e8:	68ba      	ldr	r2, [r7, #8]
 80007ea:	4311      	orrs	r1, r2
 80007ec:	687a      	ldr	r2, [r7, #4]
 80007ee:	0192      	lsls	r2, r2, #6
 80007f0:	430a      	orrs	r2, r1
 80007f2:	4908      	ldr	r1, [pc, #32]	@ (8000814 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 80007f4:	4313      	orrs	r3, r2
 80007f6:	604b      	str	r3, [r1, #4]
             Source | PLLM | PLLN << RCC_PLLCFGR_PLLN_Pos);
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLP, PLLP_R);
 80007f8:	4b06      	ldr	r3, [pc, #24]	@ (8000814 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 80007fa:	685b      	ldr	r3, [r3, #4]
 80007fc:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8000800:	4904      	ldr	r1, [pc, #16]	@ (8000814 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 8000802:	683b      	ldr	r3, [r7, #0]
 8000804:	4313      	orrs	r3, r2
 8000806:	604b      	str	r3, [r1, #4]
#if defined(RCC_PLLR_SYSCLK_SUPPORT)
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLR, PLLP_R);
#endif /* RCC_PLLR_SYSCLK_SUPPORT */
}
 8000808:	bf00      	nop
 800080a:	3714      	adds	r7, #20
 800080c:	46bd      	mov	sp, r7
 800080e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000812:	4770      	bx	lr
 8000814:	40023800 	.word	0x40023800
 8000818:	ffbf8000 	.word	0xffbf8000

0800081c <LL_RCC_PLL_ConfigDomain_48M>:
  *         @arg @ref LL_RCC_PLLQ_DIV_14
  *         @arg @ref LL_RCC_PLLQ_DIV_15
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_48M(uint32_t Source, uint32_t PLLM, uint32_t PLLN, uint32_t PLLQ)
{
 800081c:	b480      	push	{r7}
 800081e:	b085      	sub	sp, #20
 8000820:	af00      	add	r7, sp, #0
 8000822:	60f8      	str	r0, [r7, #12]
 8000824:	60b9      	str	r1, [r7, #8]
 8000826:	607a      	str	r2, [r7, #4]
 8000828:	603b      	str	r3, [r7, #0]
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN | RCC_PLLCFGR_PLLQ,
 800082a:	4b0a      	ldr	r3, [pc, #40]	@ (8000854 <LL_RCC_PLL_ConfigDomain_48M+0x38>)
 800082c:	685a      	ldr	r2, [r3, #4]
 800082e:	4b0a      	ldr	r3, [pc, #40]	@ (8000858 <LL_RCC_PLL_ConfigDomain_48M+0x3c>)
 8000830:	4013      	ands	r3, r2
 8000832:	68f9      	ldr	r1, [r7, #12]
 8000834:	68ba      	ldr	r2, [r7, #8]
 8000836:	4311      	orrs	r1, r2
 8000838:	687a      	ldr	r2, [r7, #4]
 800083a:	0192      	lsls	r2, r2, #6
 800083c:	4311      	orrs	r1, r2
 800083e:	683a      	ldr	r2, [r7, #0]
 8000840:	430a      	orrs	r2, r1
 8000842:	4904      	ldr	r1, [pc, #16]	@ (8000854 <LL_RCC_PLL_ConfigDomain_48M+0x38>)
 8000844:	4313      	orrs	r3, r2
 8000846:	604b      	str	r3, [r1, #4]
             Source | PLLM | PLLN << RCC_PLLCFGR_PLLN_Pos | PLLQ);
}
 8000848:	bf00      	nop
 800084a:	3714      	adds	r7, #20
 800084c:	46bd      	mov	sp, r7
 800084e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000852:	4770      	bx	lr
 8000854:	40023800 	.word	0x40023800
 8000858:	f0bf8000 	.word	0xf0bf8000

0800085c <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 800085c:	b480      	push	{r7}
 800085e:	b085      	sub	sp, #20
 8000860:	af00      	add	r7, sp, #0
 8000862:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 8000864:	4b08      	ldr	r3, [pc, #32]	@ (8000888 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000866:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000868:	4907      	ldr	r1, [pc, #28]	@ (8000888 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	4313      	orrs	r3, r2
 800086e:	630b      	str	r3, [r1, #48]	@ 0x30
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8000870:	4b05      	ldr	r3, [pc, #20]	@ (8000888 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000872:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	4013      	ands	r3, r2
 8000878:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800087a:	68fb      	ldr	r3, [r7, #12]
}
 800087c:	bf00      	nop
 800087e:	3714      	adds	r7, #20
 8000880:	46bd      	mov	sp, r7
 8000882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000886:	4770      	bx	lr
 8000888:	40023800 	.word	0x40023800

0800088c <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 800088c:	b480      	push	{r7}
 800088e:	b085      	sub	sp, #20
 8000890:	af00      	add	r7, sp, #0
 8000892:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000894:	4b08      	ldr	r3, [pc, #32]	@ (80008b8 <LL_APB2_GRP1_EnableClock+0x2c>)
 8000896:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8000898:	4907      	ldr	r1, [pc, #28]	@ (80008b8 <LL_APB2_GRP1_EnableClock+0x2c>)
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	4313      	orrs	r3, r2
 800089e:	644b      	str	r3, [r1, #68]	@ 0x44
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80008a0:	4b05      	ldr	r3, [pc, #20]	@ (80008b8 <LL_APB2_GRP1_EnableClock+0x2c>)
 80008a2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	4013      	ands	r3, r2
 80008a8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80008aa:	68fb      	ldr	r3, [r7, #12]
}
 80008ac:	bf00      	nop
 80008ae:	3714      	adds	r7, #20
 80008b0:	46bd      	mov	sp, r7
 80008b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b6:	4770      	bx	lr
 80008b8:	40023800 	.word	0x40023800

080008bc <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_14
  *         @arg @ref LL_FLASH_LATENCY_15
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 80008bc:	b480      	push	{r7}
 80008be:	b083      	sub	sp, #12
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 80008c4:	4b06      	ldr	r3, [pc, #24]	@ (80008e0 <LL_FLASH_SetLatency+0x24>)
 80008c6:	681b      	ldr	r3, [r3, #0]
 80008c8:	f023 0207 	bic.w	r2, r3, #7
 80008cc:	4904      	ldr	r1, [pc, #16]	@ (80008e0 <LL_FLASH_SetLatency+0x24>)
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	4313      	orrs	r3, r2
 80008d2:	600b      	str	r3, [r1, #0]
}
 80008d4:	bf00      	nop
 80008d6:	370c      	adds	r7, #12
 80008d8:	46bd      	mov	sp, r7
 80008da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008de:	4770      	bx	lr
 80008e0:	40023c00 	.word	0x40023c00

080008e4 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_13
  *         @arg @ref LL_FLASH_LATENCY_14
  *         @arg @ref LL_FLASH_LATENCY_15
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 80008e4:	b480      	push	{r7}
 80008e6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 80008e8:	4b04      	ldr	r3, [pc, #16]	@ (80008fc <LL_FLASH_GetLatency+0x18>)
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	f003 0307 	and.w	r3, r3, #7
}
 80008f0:	4618      	mov	r0, r3
 80008f2:	46bd      	mov	sp, r7
 80008f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f8:	4770      	bx	lr
 80008fa:	bf00      	nop
 80008fc:	40023c00 	.word	0x40023c00

08000900 <LL_PWR_SetRegulVoltageScaling>:
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE3
  *         (*) LL_PWR_REGU_VOLTAGE_SCALE1 is not available for STM32F401xx devices
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRegulVoltageScaling(uint32_t VoltageScaling)
{
 8000900:	b480      	push	{r7}
 8000902:	b083      	sub	sp, #12
 8000904:	af00      	add	r7, sp, #0
 8000906:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR, PWR_CR_VOS, VoltageScaling);
 8000908:	4b06      	ldr	r3, [pc, #24]	@ (8000924 <LL_PWR_SetRegulVoltageScaling+0x24>)
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8000910:	4904      	ldr	r1, [pc, #16]	@ (8000924 <LL_PWR_SetRegulVoltageScaling+0x24>)
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	4313      	orrs	r3, r2
 8000916:	600b      	str	r3, [r1, #0]
}
 8000918:	bf00      	nop
 800091a:	370c      	adds	r7, #12
 800091c:	46bd      	mov	sp, r7
 800091e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000922:	4770      	bx	lr
 8000924:	40007000 	.word	0x40007000

08000928 <LL_PWR_IsActiveFlag_VOS>:
  * @brief  Indicate whether the Regulator is ready in the selected voltage range or if its output voltage is still changing to the required voltage level
  * @rmtoll CSR   VOS       LL_PWR_IsActiveFlag_VOS
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_VOS(void)
{
 8000928:	b480      	push	{r7}
 800092a:	af00      	add	r7, sp, #0
  return (READ_BIT(PWR->CSR, LL_PWR_CSR_VOS) == (LL_PWR_CSR_VOS));
 800092c:	4b07      	ldr	r3, [pc, #28]	@ (800094c <LL_PWR_IsActiveFlag_VOS+0x24>)
 800092e:	685b      	ldr	r3, [r3, #4]
 8000930:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000934:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8000938:	bf0c      	ite	eq
 800093a:	2301      	moveq	r3, #1
 800093c:	2300      	movne	r3, #0
 800093e:	b2db      	uxtb	r3, r3
}
 8000940:	4618      	mov	r0, r3
 8000942:	46bd      	mov	sp, r7
 8000944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000948:	4770      	bx	lr
 800094a:	bf00      	nop
 800094c:	40007000 	.word	0x40007000

08000950 <LL_USART_Enable>:
  * @rmtoll CR1          UE            LL_USART_Enable
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Enable(USART_TypeDef *USARTx)
{
 8000950:	b480      	push	{r7}
 8000952:	b083      	sub	sp, #12
 8000954:	af00      	add	r7, sp, #0
 8000956:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	68db      	ldr	r3, [r3, #12]
 800095c:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	60da      	str	r2, [r3, #12]
}
 8000964:	bf00      	nop
 8000966:	370c      	adds	r7, #12
 8000968:	46bd      	mov	sp, r7
 800096a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800096e:	4770      	bx	lr

08000970 <LL_USART_ConfigAsyncMode>:
  *         CR3          HDSEL         LL_USART_ConfigAsyncMode
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
{
 8000970:	b480      	push	{r7}
 8000972:	b083      	sub	sp, #12
 8000974:	af00      	add	r7, sp, #0
 8000976:	6078      	str	r0, [r7, #4]
  /* In Asynchronous mode, the following bits must be kept cleared:
  - LINEN, CLKEN bits in the USART_CR2 register,
  - SCEN, IREN and HDSEL bits in the USART_CR3 register.*/
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	691b      	ldr	r3, [r3, #16]
 800097c:	f423 4290 	bic.w	r2, r3, #18432	@ 0x4800
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	695b      	ldr	r3, [r3, #20]
 8000988:	f023 022a 	bic.w	r2, r3, #42	@ 0x2a
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	615a      	str	r2, [r3, #20]
}
 8000990:	bf00      	nop
 8000992:	370c      	adds	r7, #12
 8000994:	46bd      	mov	sp, r7
 8000996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800099a:	4770      	bx	lr

0800099c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009a0:	f000 f9fa 	bl	8000d98 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009a4:	f000 f812 	bl	80009cc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009a8:	f000 f8c8 	bl	8000b3c <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80009ac:	f000 f866 	bl	8000a7c <MX_USART1_UART_Init>
  MX_USB_DEVICE_Init();
 80009b0:	f006 f86c 	bl	8006a8c <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  I2C_Bitbang_Init();
 80009b4:	f006 ff60 	bl	8007878 <I2C_Bitbang_Init>
  uart_printf("slave-f407vet\r\n");
 80009b8:	4803      	ldr	r0, [pc, #12]	@ (80009c8 <main+0x2c>)
 80009ba:	f007 f98d 	bl	8007cd8 <uart_printf>
  DWT_Clock_Enable();
 80009be:	f006 ff3b 	bl	8007838 <DWT_Clock_Enable>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80009c2:	bf00      	nop
 80009c4:	e7fd      	b.n	80009c2 <main+0x26>
 80009c6:	bf00      	nop
 80009c8:	08008698 	.word	0x08008698

080009cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_1);
 80009d0:	2001      	movs	r0, #1
 80009d2:	f7ff ff73 	bl	80008bc <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_1)
 80009d6:	bf00      	nop
 80009d8:	f7ff ff84 	bl	80008e4 <LL_FLASH_GetLatency>
 80009dc:	4603      	mov	r3, r0
 80009de:	2b01      	cmp	r3, #1
 80009e0:	d1fa      	bne.n	80009d8 <SystemClock_Config+0xc>
  {
  }
  LL_PWR_SetRegulVoltageScaling(LL_PWR_REGU_VOLTAGE_SCALE1);
 80009e2:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 80009e6:	f7ff ff8b 	bl	8000900 <LL_PWR_SetRegulVoltageScaling>
  LL_RCC_HSE_Enable();
 80009ea:	f7ff fe4b 	bl	8000684 <LL_RCC_HSE_Enable>

   /* Wait till HSE is ready */
  while(LL_RCC_HSE_IsReady() != 1)
 80009ee:	bf00      	nop
 80009f0:	f7ff fe58 	bl	80006a4 <LL_RCC_HSE_IsReady>
 80009f4:	4603      	mov	r3, r0
 80009f6:	2b01      	cmp	r3, #1
 80009f8:	d1fa      	bne.n	80009f0 <SystemClock_Config+0x24>
  {

  }
  LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSE, LL_RCC_PLLM_DIV_4, 120, LL_RCC_PLLP_DIV_2);
 80009fa:	2300      	movs	r3, #0
 80009fc:	2278      	movs	r2, #120	@ 0x78
 80009fe:	2104      	movs	r1, #4
 8000a00:	f44f 0080 	mov.w	r0, #4194304	@ 0x400000
 8000a04:	f7ff fee4 	bl	80007d0 <LL_RCC_PLL_ConfigDomain_SYS>
  LL_RCC_PLL_ConfigDomain_48M(LL_RCC_PLLSOURCE_HSE, LL_RCC_PLLM_DIV_4, 120, LL_RCC_PLLQ_DIV_5);
 8000a08:	f04f 63a0 	mov.w	r3, #83886080	@ 0x5000000
 8000a0c:	2278      	movs	r2, #120	@ 0x78
 8000a0e:	2104      	movs	r1, #4
 8000a10:	f44f 0080 	mov.w	r0, #4194304	@ 0x400000
 8000a14:	f7ff ff02 	bl	800081c <LL_RCC_PLL_ConfigDomain_48M>
  LL_RCC_PLL_Enable();
 8000a18:	f7ff feb6 	bl	8000788 <LL_RCC_PLL_Enable>

   /* Wait till PLL is ready */
  while(LL_RCC_PLL_IsReady() != 1)
 8000a1c:	bf00      	nop
 8000a1e:	f7ff fec3 	bl	80007a8 <LL_RCC_PLL_IsReady>
 8000a22:	4603      	mov	r3, r0
 8000a24:	2b01      	cmp	r3, #1
 8000a26:	d1fa      	bne.n	8000a1e <SystemClock_Config+0x52>
  {

  }
  while (LL_PWR_IsActiveFlag_VOS() == 0)
 8000a28:	bf00      	nop
 8000a2a:	f7ff ff7d 	bl	8000928 <LL_PWR_IsActiveFlag_VOS>
 8000a2e:	4603      	mov	r3, r0
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	d0fa      	beq.n	8000a2a <SystemClock_Config+0x5e>
  {
  }
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_2);
 8000a34:	2080      	movs	r0, #128	@ 0x80
 8000a36:	f7ff fe6b 	bl	8000710 <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_2);
 8000a3a:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8000a3e:	f7ff fe7b 	bl	8000738 <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_2);
 8000a42:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8000a46:	f7ff fe8b 	bl	8000760 <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
 8000a4a:	2002      	movs	r0, #2
 8000a4c:	f7ff fe3e 	bl	80006cc <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8000a50:	bf00      	nop
 8000a52:	f7ff fe4f 	bl	80006f4 <LL_RCC_GetSysClkSource>
 8000a56:	4603      	mov	r3, r0
 8000a58:	2b08      	cmp	r3, #8
 8000a5a:	d1fa      	bne.n	8000a52 <SystemClock_Config+0x86>
  {

  }
  LL_SetSystemCoreClock(60000000);
 8000a5c:	4806      	ldr	r0, [pc, #24]	@ (8000a78 <SystemClock_Config+0xac>)
 8000a5e:	f004 f873 	bl	8004b48 <LL_SetSystemCoreClock>

   /* Update the time base */
  if (HAL_InitTick (TICK_INT_PRIORITY) != HAL_OK)
 8000a62:	200f      	movs	r0, #15
 8000a64:	f000 f9ba 	bl	8000ddc <HAL_InitTick>
 8000a68:	4603      	mov	r3, r0
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	d001      	beq.n	8000a72 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000a6e:	f000 f872 	bl	8000b56 <Error_Handler>
  }
}
 8000a72:	bf00      	nop
 8000a74:	bd80      	pop	{r7, pc}
 8000a76:	bf00      	nop
 8000a78:	03938700 	.word	0x03938700

08000a7c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b08e      	sub	sp, #56	@ 0x38
 8000a80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART1_Init 0 */

  /* USER CODE END USART1_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 8000a82:	f107 031c 	add.w	r3, r7, #28
 8000a86:	2200      	movs	r2, #0
 8000a88:	601a      	str	r2, [r3, #0]
 8000a8a:	605a      	str	r2, [r3, #4]
 8000a8c:	609a      	str	r2, [r3, #8]
 8000a8e:	60da      	str	r2, [r3, #12]
 8000a90:	611a      	str	r2, [r3, #16]
 8000a92:	615a      	str	r2, [r3, #20]
 8000a94:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a96:	1d3b      	adds	r3, r7, #4
 8000a98:	2200      	movs	r2, #0
 8000a9a:	601a      	str	r2, [r3, #0]
 8000a9c:	605a      	str	r2, [r3, #4]
 8000a9e:	609a      	str	r2, [r3, #8]
 8000aa0:	60da      	str	r2, [r3, #12]
 8000aa2:	611a      	str	r2, [r3, #16]
 8000aa4:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_USART1);
 8000aa6:	2010      	movs	r0, #16
 8000aa8:	f7ff fef0 	bl	800088c <LL_APB2_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8000aac:	2001      	movs	r0, #1
 8000aae:	f7ff fed5 	bl	800085c <LL_AHB1_GRP1_EnableClock>
  /**USART1 GPIO Configuration
  PA9   ------> USART1_TX
  PA10   ------> USART1_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_9|LL_GPIO_PIN_10;
 8000ab2:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000ab6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000ab8:	2302      	movs	r3, #2
 8000aba:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8000abc:	2303      	movs	r3, #3
 8000abe:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 8000ac8:	2307      	movs	r3, #7
 8000aca:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000acc:	1d3b      	adds	r3, r7, #4
 8000ace:	4619      	mov	r1, r3
 8000ad0:	4818      	ldr	r0, [pc, #96]	@ (8000b34 <MX_USART1_UART_Init+0xb8>)
 8000ad2:	f002 f84e 	bl	8002b72 <LL_GPIO_Init>

  /* USART1 interrupt Init */
  NVIC_SetPriority(USART1_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8000ad6:	f7ff fd4b 	bl	8000570 <__NVIC_GetPriorityGrouping>
 8000ada:	4603      	mov	r3, r0
 8000adc:	2200      	movs	r2, #0
 8000ade:	2100      	movs	r1, #0
 8000ae0:	4618      	mov	r0, r3
 8000ae2:	f7ff fd9b 	bl	800061c <NVIC_EncodePriority>
 8000ae6:	4603      	mov	r3, r0
 8000ae8:	4619      	mov	r1, r3
 8000aea:	2025      	movs	r0, #37	@ 0x25
 8000aec:	f7ff fd6c 	bl	80005c8 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART1_IRQn);
 8000af0:	2025      	movs	r0, #37	@ 0x25
 8000af2:	f7ff fd4b 	bl	800058c <__NVIC_EnableIRQ>

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 8000af6:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 8000afa:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8000afc:	2300      	movs	r3, #0
 8000afe:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8000b00:	2300      	movs	r3, #0
 8000b02:	627b      	str	r3, [r7, #36]	@ 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8000b04:	2300      	movs	r3, #0
 8000b06:	62bb      	str	r3, [r7, #40]	@ 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8000b08:	230c      	movs	r3, #12
 8000b0a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	633b      	str	r3, [r7, #48]	@ 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8000b10:	2300      	movs	r3, #0
 8000b12:	637b      	str	r3, [r7, #52]	@ 0x34
  LL_USART_Init(USART1, &USART_InitStruct);
 8000b14:	f107 031c 	add.w	r3, r7, #28
 8000b18:	4619      	mov	r1, r3
 8000b1a:	4807      	ldr	r0, [pc, #28]	@ (8000b38 <MX_USART1_UART_Init+0xbc>)
 8000b1c:	f002 fc4c 	bl	80033b8 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART1);
 8000b20:	4805      	ldr	r0, [pc, #20]	@ (8000b38 <MX_USART1_UART_Init+0xbc>)
 8000b22:	f7ff ff25 	bl	8000970 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART1);
 8000b26:	4804      	ldr	r0, [pc, #16]	@ (8000b38 <MX_USART1_UART_Init+0xbc>)
 8000b28:	f7ff ff12 	bl	8000950 <LL_USART_Enable>
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000b2c:	bf00      	nop
 8000b2e:	3738      	adds	r7, #56	@ 0x38
 8000b30:	46bd      	mov	sp, r7
 8000b32:	bd80      	pop	{r7, pc}
 8000b34:	40020000 	.word	0x40020000
 8000b38:	40011000 	.word	0x40011000

08000b3c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 8000b40:	2004      	movs	r0, #4
 8000b42:	f7ff fe8b 	bl	800085c <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOH);
 8000b46:	2080      	movs	r0, #128	@ 0x80
 8000b48:	f7ff fe88 	bl	800085c <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8000b4c:	2001      	movs	r0, #1
 8000b4e:	f7ff fe85 	bl	800085c <LL_AHB1_GRP1_EnableClock>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000b52:	bf00      	nop
 8000b54:	bd80      	pop	{r7, pc}

08000b56 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b56:	b480      	push	{r7}
 8000b58:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b5a:	b672      	cpsid	i
}
 8000b5c:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b5e:	bf00      	nop
 8000b60:	e7fd      	b.n	8000b5e <Error_Handler+0x8>
	...

08000b64 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b64:	b480      	push	{r7}
 8000b66:	b083      	sub	sp, #12
 8000b68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	607b      	str	r3, [r7, #4]
 8000b6e:	4b10      	ldr	r3, [pc, #64]	@ (8000bb0 <HAL_MspInit+0x4c>)
 8000b70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b72:	4a0f      	ldr	r2, [pc, #60]	@ (8000bb0 <HAL_MspInit+0x4c>)
 8000b74:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000b78:	6453      	str	r3, [r2, #68]	@ 0x44
 8000b7a:	4b0d      	ldr	r3, [pc, #52]	@ (8000bb0 <HAL_MspInit+0x4c>)
 8000b7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b7e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000b82:	607b      	str	r3, [r7, #4]
 8000b84:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b86:	2300      	movs	r3, #0
 8000b88:	603b      	str	r3, [r7, #0]
 8000b8a:	4b09      	ldr	r3, [pc, #36]	@ (8000bb0 <HAL_MspInit+0x4c>)
 8000b8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b8e:	4a08      	ldr	r2, [pc, #32]	@ (8000bb0 <HAL_MspInit+0x4c>)
 8000b90:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000b94:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b96:	4b06      	ldr	r3, [pc, #24]	@ (8000bb0 <HAL_MspInit+0x4c>)
 8000b98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b9a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b9e:	603b      	str	r3, [r7, #0]
 8000ba0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ba2:	bf00      	nop
 8000ba4:	370c      	adds	r7, #12
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bac:	4770      	bx	lr
 8000bae:	bf00      	nop
 8000bb0:	40023800 	.word	0x40023800

08000bb4 <LL_EXTI_IsActiveFlag_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_EXTI_IsActiveFlag_0_31(uint32_t ExtiLine)
{
 8000bb4:	b480      	push	{r7}
 8000bb6:	b083      	sub	sp, #12
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	6078      	str	r0, [r7, #4]
  return (READ_BIT(EXTI->PR, ExtiLine) == (ExtiLine));
 8000bbc:	4b07      	ldr	r3, [pc, #28]	@ (8000bdc <LL_EXTI_IsActiveFlag_0_31+0x28>)
 8000bbe:	695a      	ldr	r2, [r3, #20]
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	4013      	ands	r3, r2
 8000bc4:	687a      	ldr	r2, [r7, #4]
 8000bc6:	429a      	cmp	r2, r3
 8000bc8:	bf0c      	ite	eq
 8000bca:	2301      	moveq	r3, #1
 8000bcc:	2300      	movne	r3, #0
 8000bce:	b2db      	uxtb	r3, r3
}
 8000bd0:	4618      	mov	r0, r3
 8000bd2:	370c      	adds	r7, #12
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bda:	4770      	bx	lr
 8000bdc:	40013c00 	.word	0x40013c00

08000be0 <LL_EXTI_ClearFlag_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
 8000be0:	b480      	push	{r7}
 8000be2:	b083      	sub	sp, #12
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR, ExtiLine);
 8000be8:	4a04      	ldr	r2, [pc, #16]	@ (8000bfc <LL_EXTI_ClearFlag_0_31+0x1c>)
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	6153      	str	r3, [r2, #20]
}
 8000bee:	bf00      	nop
 8000bf0:	370c      	adds	r7, #12
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf8:	4770      	bx	lr
 8000bfa:	bf00      	nop
 8000bfc:	40013c00 	.word	0x40013c00

08000c00 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c00:	b480      	push	{r7}
 8000c02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000c04:	bf00      	nop
 8000c06:	e7fd      	b.n	8000c04 <NMI_Handler+0x4>

08000c08 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c08:	b480      	push	{r7}
 8000c0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c0c:	bf00      	nop
 8000c0e:	e7fd      	b.n	8000c0c <HardFault_Handler+0x4>

08000c10 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c10:	b480      	push	{r7}
 8000c12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c14:	bf00      	nop
 8000c16:	e7fd      	b.n	8000c14 <MemManage_Handler+0x4>

08000c18 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c18:	b480      	push	{r7}
 8000c1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c1c:	bf00      	nop
 8000c1e:	e7fd      	b.n	8000c1c <BusFault_Handler+0x4>

08000c20 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c20:	b480      	push	{r7}
 8000c22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c24:	bf00      	nop
 8000c26:	e7fd      	b.n	8000c24 <UsageFault_Handler+0x4>

08000c28 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c28:	b480      	push	{r7}
 8000c2a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c2c:	bf00      	nop
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c34:	4770      	bx	lr

08000c36 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c36:	b480      	push	{r7}
 8000c38:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c3a:	bf00      	nop
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c42:	4770      	bx	lr

08000c44 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c44:	b480      	push	{r7}
 8000c46:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c48:	bf00      	nop
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c50:	4770      	bx	lr

08000c52 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c52:	b580      	push	{r7, lr}
 8000c54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c56:	f000 f8f1 	bl	8000e3c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c5a:	bf00      	nop
 8000c5c:	bd80      	pop	{r7, pc}

08000c5e <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000c5e:	b480      	push	{r7}
 8000c60:	af00      	add	r7, sp, #0

  /* USER CODE END USART1_IRQn 0 */
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000c62:	bf00      	nop
 8000c64:	46bd      	mov	sp, r7
 8000c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6a:	4770      	bx	lr

08000c6c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000c70:	4802      	ldr	r0, [pc, #8]	@ (8000c7c <OTG_FS_IRQHandler+0x10>)
 8000c72:	f000 fd19 	bl	80016a8 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000c76:	bf00      	nop
 8000c78:	bd80      	pop	{r7, pc}
 8000c7a:	bf00      	nop
 8000c7c:	20001650 	.word	0x20001650

08000c80 <EXTI9_5_IRQHandler>:

/* USER CODE BEGIN 1 */
void EXTI9_5_IRQHandler(void) {
 8000c80:	b580      	push	{r7, lr}
 8000c82:	af00      	add	r7, sp, #0

    if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_6)) {
 8000c84:	2040      	movs	r0, #64	@ 0x40
 8000c86:	f7ff ff95 	bl	8000bb4 <LL_EXTI_IsActiveFlag_0_31>
 8000c8a:	4603      	mov	r3, r0
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d004      	beq.n	8000c9a <EXTI9_5_IRQHandler+0x1a>
        I2C_Event_Take();
 8000c90:	f006 fedc 	bl	8007a4c <I2C_Event_Take>
        LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_6);
 8000c94:	2040      	movs	r0, #64	@ 0x40
 8000c96:	f7ff ffa3 	bl	8000be0 <LL_EXTI_ClearFlag_0_31>
    }
    if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_7))
 8000c9a:	2080      	movs	r0, #128	@ 0x80
 8000c9c:	f7ff ff8a 	bl	8000bb4 <LL_EXTI_IsActiveFlag_0_31>
 8000ca0:	4603      	mov	r3, r0
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d004      	beq.n	8000cb0 <EXTI9_5_IRQHandler+0x30>
        {
    		check_start_condition();
 8000ca6:	f006 feb5 	bl	8007a14 <check_start_condition>
            LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_7);
 8000caa:	2080      	movs	r0, #128	@ 0x80
 8000cac:	f7ff ff98 	bl	8000be0 <LL_EXTI_ClearFlag_0_31>
        }
}
 8000cb0:	bf00      	nop
 8000cb2:	bd80      	pop	{r7, pc}

08000cb4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b086      	sub	sp, #24
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000cbc:	4a14      	ldr	r2, [pc, #80]	@ (8000d10 <_sbrk+0x5c>)
 8000cbe:	4b15      	ldr	r3, [pc, #84]	@ (8000d14 <_sbrk+0x60>)
 8000cc0:	1ad3      	subs	r3, r2, r3
 8000cc2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000cc4:	697b      	ldr	r3, [r7, #20]
 8000cc6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000cc8:	4b13      	ldr	r3, [pc, #76]	@ (8000d18 <_sbrk+0x64>)
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d102      	bne.n	8000cd6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000cd0:	4b11      	ldr	r3, [pc, #68]	@ (8000d18 <_sbrk+0x64>)
 8000cd2:	4a12      	ldr	r2, [pc, #72]	@ (8000d1c <_sbrk+0x68>)
 8000cd4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000cd6:	4b10      	ldr	r3, [pc, #64]	@ (8000d18 <_sbrk+0x64>)
 8000cd8:	681a      	ldr	r2, [r3, #0]
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	4413      	add	r3, r2
 8000cde:	693a      	ldr	r2, [r7, #16]
 8000ce0:	429a      	cmp	r2, r3
 8000ce2:	d207      	bcs.n	8000cf4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ce4:	f007 f854 	bl	8007d90 <__errno>
 8000ce8:	4603      	mov	r3, r0
 8000cea:	220c      	movs	r2, #12
 8000cec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000cee:	f04f 33ff 	mov.w	r3, #4294967295
 8000cf2:	e009      	b.n	8000d08 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000cf4:	4b08      	ldr	r3, [pc, #32]	@ (8000d18 <_sbrk+0x64>)
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000cfa:	4b07      	ldr	r3, [pc, #28]	@ (8000d18 <_sbrk+0x64>)
 8000cfc:	681a      	ldr	r2, [r3, #0]
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	4413      	add	r3, r2
 8000d02:	4a05      	ldr	r2, [pc, #20]	@ (8000d18 <_sbrk+0x64>)
 8000d04:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d06:	68fb      	ldr	r3, [r7, #12]
}
 8000d08:	4618      	mov	r0, r3
 8000d0a:	3718      	adds	r7, #24
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	bd80      	pop	{r7, pc}
 8000d10:	20020000 	.word	0x20020000
 8000d14:	00000400 	.word	0x00000400
 8000d18:	20000168 	.word	0x20000168
 8000d1c:	20001eb0 	.word	0x20001eb0

08000d20 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d20:	b480      	push	{r7}
 8000d22:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d24:	4b06      	ldr	r3, [pc, #24]	@ (8000d40 <SystemInit+0x20>)
 8000d26:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000d2a:	4a05      	ldr	r2, [pc, #20]	@ (8000d40 <SystemInit+0x20>)
 8000d2c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000d30:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d34:	bf00      	nop
 8000d36:	46bd      	mov	sp, r7
 8000d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3c:	4770      	bx	lr
 8000d3e:	bf00      	nop
 8000d40:	e000ed00 	.word	0xe000ed00

08000d44 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000d44:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000d7c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000d48:	f7ff ffea 	bl	8000d20 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000d4c:	480c      	ldr	r0, [pc, #48]	@ (8000d80 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000d4e:	490d      	ldr	r1, [pc, #52]	@ (8000d84 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000d50:	4a0d      	ldr	r2, [pc, #52]	@ (8000d88 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000d52:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d54:	e002      	b.n	8000d5c <LoopCopyDataInit>

08000d56 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d56:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d58:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d5a:	3304      	adds	r3, #4

08000d5c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d5c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d5e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d60:	d3f9      	bcc.n	8000d56 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d62:	4a0a      	ldr	r2, [pc, #40]	@ (8000d8c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000d64:	4c0a      	ldr	r4, [pc, #40]	@ (8000d90 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000d66:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d68:	e001      	b.n	8000d6e <LoopFillZerobss>

08000d6a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d6a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d6c:	3204      	adds	r2, #4

08000d6e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d6e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d70:	d3fb      	bcc.n	8000d6a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000d72:	f007 f813 	bl	8007d9c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d76:	f7ff fe11 	bl	800099c <main>
  bx  lr    
 8000d7a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000d7c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000d80:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d84:	2000014c 	.word	0x2000014c
  ldr r2, =_sidata
 8000d88:	0800874c 	.word	0x0800874c
  ldr r2, =_sbss
 8000d8c:	2000014c 	.word	0x2000014c
  ldr r4, =_ebss
 8000d90:	20001eb0 	.word	0x20001eb0

08000d94 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d94:	e7fe      	b.n	8000d94 <ADC_IRQHandler>
	...

08000d98 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000d9c:	4b0e      	ldr	r3, [pc, #56]	@ (8000dd8 <HAL_Init+0x40>)
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	4a0d      	ldr	r2, [pc, #52]	@ (8000dd8 <HAL_Init+0x40>)
 8000da2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000da6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000da8:	4b0b      	ldr	r3, [pc, #44]	@ (8000dd8 <HAL_Init+0x40>)
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	4a0a      	ldr	r2, [pc, #40]	@ (8000dd8 <HAL_Init+0x40>)
 8000dae:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000db2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000db4:	4b08      	ldr	r3, [pc, #32]	@ (8000dd8 <HAL_Init+0x40>)
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	4a07      	ldr	r2, [pc, #28]	@ (8000dd8 <HAL_Init+0x40>)
 8000dba:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000dbe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000dc0:	2003      	movs	r0, #3
 8000dc2:	f000 f94f 	bl	8001064 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000dc6:	200f      	movs	r0, #15
 8000dc8:	f000 f808 	bl	8000ddc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000dcc:	f7ff feca 	bl	8000b64 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000dd0:	2300      	movs	r3, #0
}
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	bd80      	pop	{r7, pc}
 8000dd6:	bf00      	nop
 8000dd8:	40023c00 	.word	0x40023c00

08000ddc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b082      	sub	sp, #8
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000de4:	4b12      	ldr	r3, [pc, #72]	@ (8000e30 <HAL_InitTick+0x54>)
 8000de6:	681a      	ldr	r2, [r3, #0]
 8000de8:	4b12      	ldr	r3, [pc, #72]	@ (8000e34 <HAL_InitTick+0x58>)
 8000dea:	781b      	ldrb	r3, [r3, #0]
 8000dec:	4619      	mov	r1, r3
 8000dee:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000df2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000df6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000dfa:	4618      	mov	r0, r3
 8000dfc:	f000 f967 	bl	80010ce <HAL_SYSTICK_Config>
 8000e00:	4603      	mov	r3, r0
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d001      	beq.n	8000e0a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e06:	2301      	movs	r3, #1
 8000e08:	e00e      	b.n	8000e28 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	2b0f      	cmp	r3, #15
 8000e0e:	d80a      	bhi.n	8000e26 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e10:	2200      	movs	r2, #0
 8000e12:	6879      	ldr	r1, [r7, #4]
 8000e14:	f04f 30ff 	mov.w	r0, #4294967295
 8000e18:	f000 f92f 	bl	800107a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e1c:	4a06      	ldr	r2, [pc, #24]	@ (8000e38 <HAL_InitTick+0x5c>)
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e22:	2300      	movs	r3, #0
 8000e24:	e000      	b.n	8000e28 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e26:	2301      	movs	r3, #1
}
 8000e28:	4618      	mov	r0, r3
 8000e2a:	3708      	adds	r7, #8
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	bd80      	pop	{r7, pc}
 8000e30:	20000000 	.word	0x20000000
 8000e34:	20000008 	.word	0x20000008
 8000e38:	20000004 	.word	0x20000004

08000e3c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e40:	4b06      	ldr	r3, [pc, #24]	@ (8000e5c <HAL_IncTick+0x20>)
 8000e42:	781b      	ldrb	r3, [r3, #0]
 8000e44:	461a      	mov	r2, r3
 8000e46:	4b06      	ldr	r3, [pc, #24]	@ (8000e60 <HAL_IncTick+0x24>)
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	4413      	add	r3, r2
 8000e4c:	4a04      	ldr	r2, [pc, #16]	@ (8000e60 <HAL_IncTick+0x24>)
 8000e4e:	6013      	str	r3, [r2, #0]
}
 8000e50:	bf00      	nop
 8000e52:	46bd      	mov	sp, r7
 8000e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e58:	4770      	bx	lr
 8000e5a:	bf00      	nop
 8000e5c:	20000008 	.word	0x20000008
 8000e60:	2000016c 	.word	0x2000016c

08000e64 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e64:	b480      	push	{r7}
 8000e66:	af00      	add	r7, sp, #0
  return uwTick;
 8000e68:	4b03      	ldr	r3, [pc, #12]	@ (8000e78 <HAL_GetTick+0x14>)
 8000e6a:	681b      	ldr	r3, [r3, #0]
}
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e74:	4770      	bx	lr
 8000e76:	bf00      	nop
 8000e78:	2000016c 	.word	0x2000016c

08000e7c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b084      	sub	sp, #16
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e84:	f7ff ffee 	bl	8000e64 <HAL_GetTick>
 8000e88:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e8e:	68fb      	ldr	r3, [r7, #12]
 8000e90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e94:	d005      	beq.n	8000ea2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e96:	4b0a      	ldr	r3, [pc, #40]	@ (8000ec0 <HAL_Delay+0x44>)
 8000e98:	781b      	ldrb	r3, [r3, #0]
 8000e9a:	461a      	mov	r2, r3
 8000e9c:	68fb      	ldr	r3, [r7, #12]
 8000e9e:	4413      	add	r3, r2
 8000ea0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000ea2:	bf00      	nop
 8000ea4:	f7ff ffde 	bl	8000e64 <HAL_GetTick>
 8000ea8:	4602      	mov	r2, r0
 8000eaa:	68bb      	ldr	r3, [r7, #8]
 8000eac:	1ad3      	subs	r3, r2, r3
 8000eae:	68fa      	ldr	r2, [r7, #12]
 8000eb0:	429a      	cmp	r2, r3
 8000eb2:	d8f7      	bhi.n	8000ea4 <HAL_Delay+0x28>
  {
  }
}
 8000eb4:	bf00      	nop
 8000eb6:	bf00      	nop
 8000eb8:	3710      	adds	r7, #16
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	bd80      	pop	{r7, pc}
 8000ebe:	bf00      	nop
 8000ec0:	20000008 	.word	0x20000008

08000ec4 <__NVIC_SetPriorityGrouping>:
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	b085      	sub	sp, #20
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	f003 0307 	and.w	r3, r3, #7
 8000ed2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ed4:	4b0c      	ldr	r3, [pc, #48]	@ (8000f08 <__NVIC_SetPriorityGrouping+0x44>)
 8000ed6:	68db      	ldr	r3, [r3, #12]
 8000ed8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000eda:	68ba      	ldr	r2, [r7, #8]
 8000edc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000ee0:	4013      	ands	r3, r2
 8000ee2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ee4:	68fb      	ldr	r3, [r7, #12]
 8000ee6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ee8:	68bb      	ldr	r3, [r7, #8]
 8000eea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000eec:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000ef0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000ef4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ef6:	4a04      	ldr	r2, [pc, #16]	@ (8000f08 <__NVIC_SetPriorityGrouping+0x44>)
 8000ef8:	68bb      	ldr	r3, [r7, #8]
 8000efa:	60d3      	str	r3, [r2, #12]
}
 8000efc:	bf00      	nop
 8000efe:	3714      	adds	r7, #20
 8000f00:	46bd      	mov	sp, r7
 8000f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f06:	4770      	bx	lr
 8000f08:	e000ed00 	.word	0xe000ed00

08000f0c <__NVIC_GetPriorityGrouping>:
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f10:	4b04      	ldr	r3, [pc, #16]	@ (8000f24 <__NVIC_GetPriorityGrouping+0x18>)
 8000f12:	68db      	ldr	r3, [r3, #12]
 8000f14:	0a1b      	lsrs	r3, r3, #8
 8000f16:	f003 0307 	and.w	r3, r3, #7
}
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f22:	4770      	bx	lr
 8000f24:	e000ed00 	.word	0xe000ed00

08000f28 <__NVIC_EnableIRQ>:
{
 8000f28:	b480      	push	{r7}
 8000f2a:	b083      	sub	sp, #12
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	4603      	mov	r3, r0
 8000f30:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	db0b      	blt.n	8000f52 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f3a:	79fb      	ldrb	r3, [r7, #7]
 8000f3c:	f003 021f 	and.w	r2, r3, #31
 8000f40:	4907      	ldr	r1, [pc, #28]	@ (8000f60 <__NVIC_EnableIRQ+0x38>)
 8000f42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f46:	095b      	lsrs	r3, r3, #5
 8000f48:	2001      	movs	r0, #1
 8000f4a:	fa00 f202 	lsl.w	r2, r0, r2
 8000f4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000f52:	bf00      	nop
 8000f54:	370c      	adds	r7, #12
 8000f56:	46bd      	mov	sp, r7
 8000f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5c:	4770      	bx	lr
 8000f5e:	bf00      	nop
 8000f60:	e000e100 	.word	0xe000e100

08000f64 <__NVIC_SetPriority>:
{
 8000f64:	b480      	push	{r7}
 8000f66:	b083      	sub	sp, #12
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	6039      	str	r1, [r7, #0]
 8000f6e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	db0a      	blt.n	8000f8e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f78:	683b      	ldr	r3, [r7, #0]
 8000f7a:	b2da      	uxtb	r2, r3
 8000f7c:	490c      	ldr	r1, [pc, #48]	@ (8000fb0 <__NVIC_SetPriority+0x4c>)
 8000f7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f82:	0112      	lsls	r2, r2, #4
 8000f84:	b2d2      	uxtb	r2, r2
 8000f86:	440b      	add	r3, r1
 8000f88:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8000f8c:	e00a      	b.n	8000fa4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f8e:	683b      	ldr	r3, [r7, #0]
 8000f90:	b2da      	uxtb	r2, r3
 8000f92:	4908      	ldr	r1, [pc, #32]	@ (8000fb4 <__NVIC_SetPriority+0x50>)
 8000f94:	79fb      	ldrb	r3, [r7, #7]
 8000f96:	f003 030f 	and.w	r3, r3, #15
 8000f9a:	3b04      	subs	r3, #4
 8000f9c:	0112      	lsls	r2, r2, #4
 8000f9e:	b2d2      	uxtb	r2, r2
 8000fa0:	440b      	add	r3, r1
 8000fa2:	761a      	strb	r2, [r3, #24]
}
 8000fa4:	bf00      	nop
 8000fa6:	370c      	adds	r7, #12
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fae:	4770      	bx	lr
 8000fb0:	e000e100 	.word	0xe000e100
 8000fb4:	e000ed00 	.word	0xe000ed00

08000fb8 <NVIC_EncodePriority>:
{
 8000fb8:	b480      	push	{r7}
 8000fba:	b089      	sub	sp, #36	@ 0x24
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	60f8      	str	r0, [r7, #12]
 8000fc0:	60b9      	str	r1, [r7, #8]
 8000fc2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000fc4:	68fb      	ldr	r3, [r7, #12]
 8000fc6:	f003 0307 	and.w	r3, r3, #7
 8000fca:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000fcc:	69fb      	ldr	r3, [r7, #28]
 8000fce:	f1c3 0307 	rsb	r3, r3, #7
 8000fd2:	2b04      	cmp	r3, #4
 8000fd4:	bf28      	it	cs
 8000fd6:	2304      	movcs	r3, #4
 8000fd8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000fda:	69fb      	ldr	r3, [r7, #28]
 8000fdc:	3304      	adds	r3, #4
 8000fde:	2b06      	cmp	r3, #6
 8000fe0:	d902      	bls.n	8000fe8 <NVIC_EncodePriority+0x30>
 8000fe2:	69fb      	ldr	r3, [r7, #28]
 8000fe4:	3b03      	subs	r3, #3
 8000fe6:	e000      	b.n	8000fea <NVIC_EncodePriority+0x32>
 8000fe8:	2300      	movs	r3, #0
 8000fea:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fec:	f04f 32ff 	mov.w	r2, #4294967295
 8000ff0:	69bb      	ldr	r3, [r7, #24]
 8000ff2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff6:	43da      	mvns	r2, r3
 8000ff8:	68bb      	ldr	r3, [r7, #8]
 8000ffa:	401a      	ands	r2, r3
 8000ffc:	697b      	ldr	r3, [r7, #20]
 8000ffe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001000:	f04f 31ff 	mov.w	r1, #4294967295
 8001004:	697b      	ldr	r3, [r7, #20]
 8001006:	fa01 f303 	lsl.w	r3, r1, r3
 800100a:	43d9      	mvns	r1, r3
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001010:	4313      	orrs	r3, r2
}
 8001012:	4618      	mov	r0, r3
 8001014:	3724      	adds	r7, #36	@ 0x24
 8001016:	46bd      	mov	sp, r7
 8001018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101c:	4770      	bx	lr
	...

08001020 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b082      	sub	sp, #8
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	3b01      	subs	r3, #1
 800102c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001030:	d301      	bcc.n	8001036 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001032:	2301      	movs	r3, #1
 8001034:	e00f      	b.n	8001056 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001036:	4a0a      	ldr	r2, [pc, #40]	@ (8001060 <SysTick_Config+0x40>)
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	3b01      	subs	r3, #1
 800103c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800103e:	210f      	movs	r1, #15
 8001040:	f04f 30ff 	mov.w	r0, #4294967295
 8001044:	f7ff ff8e 	bl	8000f64 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001048:	4b05      	ldr	r3, [pc, #20]	@ (8001060 <SysTick_Config+0x40>)
 800104a:	2200      	movs	r2, #0
 800104c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800104e:	4b04      	ldr	r3, [pc, #16]	@ (8001060 <SysTick_Config+0x40>)
 8001050:	2207      	movs	r2, #7
 8001052:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001054:	2300      	movs	r3, #0
}
 8001056:	4618      	mov	r0, r3
 8001058:	3708      	adds	r7, #8
 800105a:	46bd      	mov	sp, r7
 800105c:	bd80      	pop	{r7, pc}
 800105e:	bf00      	nop
 8001060:	e000e010 	.word	0xe000e010

08001064 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b082      	sub	sp, #8
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800106c:	6878      	ldr	r0, [r7, #4]
 800106e:	f7ff ff29 	bl	8000ec4 <__NVIC_SetPriorityGrouping>
}
 8001072:	bf00      	nop
 8001074:	3708      	adds	r7, #8
 8001076:	46bd      	mov	sp, r7
 8001078:	bd80      	pop	{r7, pc}

0800107a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800107a:	b580      	push	{r7, lr}
 800107c:	b086      	sub	sp, #24
 800107e:	af00      	add	r7, sp, #0
 8001080:	4603      	mov	r3, r0
 8001082:	60b9      	str	r1, [r7, #8]
 8001084:	607a      	str	r2, [r7, #4]
 8001086:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001088:	2300      	movs	r3, #0
 800108a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800108c:	f7ff ff3e 	bl	8000f0c <__NVIC_GetPriorityGrouping>
 8001090:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001092:	687a      	ldr	r2, [r7, #4]
 8001094:	68b9      	ldr	r1, [r7, #8]
 8001096:	6978      	ldr	r0, [r7, #20]
 8001098:	f7ff ff8e 	bl	8000fb8 <NVIC_EncodePriority>
 800109c:	4602      	mov	r2, r0
 800109e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010a2:	4611      	mov	r1, r2
 80010a4:	4618      	mov	r0, r3
 80010a6:	f7ff ff5d 	bl	8000f64 <__NVIC_SetPriority>
}
 80010aa:	bf00      	nop
 80010ac:	3718      	adds	r7, #24
 80010ae:	46bd      	mov	sp, r7
 80010b0:	bd80      	pop	{r7, pc}

080010b2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010b2:	b580      	push	{r7, lr}
 80010b4:	b082      	sub	sp, #8
 80010b6:	af00      	add	r7, sp, #0
 80010b8:	4603      	mov	r3, r0
 80010ba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80010bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010c0:	4618      	mov	r0, r3
 80010c2:	f7ff ff31 	bl	8000f28 <__NVIC_EnableIRQ>
}
 80010c6:	bf00      	nop
 80010c8:	3708      	adds	r7, #8
 80010ca:	46bd      	mov	sp, r7
 80010cc:	bd80      	pop	{r7, pc}

080010ce <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80010ce:	b580      	push	{r7, lr}
 80010d0:	b082      	sub	sp, #8
 80010d2:	af00      	add	r7, sp, #0
 80010d4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80010d6:	6878      	ldr	r0, [r7, #4]
 80010d8:	f7ff ffa2 	bl	8001020 <SysTick_Config>
 80010dc:	4603      	mov	r3, r0
}
 80010de:	4618      	mov	r0, r3
 80010e0:	3708      	adds	r7, #8
 80010e2:	46bd      	mov	sp, r7
 80010e4:	bd80      	pop	{r7, pc}
	...

080010e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80010e8:	b480      	push	{r7}
 80010ea:	b089      	sub	sp, #36	@ 0x24
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
 80010f0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80010f2:	2300      	movs	r3, #0
 80010f4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80010f6:	2300      	movs	r3, #0
 80010f8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80010fa:	2300      	movs	r3, #0
 80010fc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80010fe:	2300      	movs	r3, #0
 8001100:	61fb      	str	r3, [r7, #28]
 8001102:	e16b      	b.n	80013dc <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001104:	2201      	movs	r2, #1
 8001106:	69fb      	ldr	r3, [r7, #28]
 8001108:	fa02 f303 	lsl.w	r3, r2, r3
 800110c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800110e:	683b      	ldr	r3, [r7, #0]
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	697a      	ldr	r2, [r7, #20]
 8001114:	4013      	ands	r3, r2
 8001116:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001118:	693a      	ldr	r2, [r7, #16]
 800111a:	697b      	ldr	r3, [r7, #20]
 800111c:	429a      	cmp	r2, r3
 800111e:	f040 815a 	bne.w	80013d6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001122:	683b      	ldr	r3, [r7, #0]
 8001124:	685b      	ldr	r3, [r3, #4]
 8001126:	f003 0303 	and.w	r3, r3, #3
 800112a:	2b01      	cmp	r3, #1
 800112c:	d005      	beq.n	800113a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800112e:	683b      	ldr	r3, [r7, #0]
 8001130:	685b      	ldr	r3, [r3, #4]
 8001132:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001136:	2b02      	cmp	r3, #2
 8001138:	d130      	bne.n	800119c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	689b      	ldr	r3, [r3, #8]
 800113e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001140:	69fb      	ldr	r3, [r7, #28]
 8001142:	005b      	lsls	r3, r3, #1
 8001144:	2203      	movs	r2, #3
 8001146:	fa02 f303 	lsl.w	r3, r2, r3
 800114a:	43db      	mvns	r3, r3
 800114c:	69ba      	ldr	r2, [r7, #24]
 800114e:	4013      	ands	r3, r2
 8001150:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001152:	683b      	ldr	r3, [r7, #0]
 8001154:	68da      	ldr	r2, [r3, #12]
 8001156:	69fb      	ldr	r3, [r7, #28]
 8001158:	005b      	lsls	r3, r3, #1
 800115a:	fa02 f303 	lsl.w	r3, r2, r3
 800115e:	69ba      	ldr	r2, [r7, #24]
 8001160:	4313      	orrs	r3, r2
 8001162:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	69ba      	ldr	r2, [r7, #24]
 8001168:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	685b      	ldr	r3, [r3, #4]
 800116e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001170:	2201      	movs	r2, #1
 8001172:	69fb      	ldr	r3, [r7, #28]
 8001174:	fa02 f303 	lsl.w	r3, r2, r3
 8001178:	43db      	mvns	r3, r3
 800117a:	69ba      	ldr	r2, [r7, #24]
 800117c:	4013      	ands	r3, r2
 800117e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001180:	683b      	ldr	r3, [r7, #0]
 8001182:	685b      	ldr	r3, [r3, #4]
 8001184:	091b      	lsrs	r3, r3, #4
 8001186:	f003 0201 	and.w	r2, r3, #1
 800118a:	69fb      	ldr	r3, [r7, #28]
 800118c:	fa02 f303 	lsl.w	r3, r2, r3
 8001190:	69ba      	ldr	r2, [r7, #24]
 8001192:	4313      	orrs	r3, r2
 8001194:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	69ba      	ldr	r2, [r7, #24]
 800119a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800119c:	683b      	ldr	r3, [r7, #0]
 800119e:	685b      	ldr	r3, [r3, #4]
 80011a0:	f003 0303 	and.w	r3, r3, #3
 80011a4:	2b03      	cmp	r3, #3
 80011a6:	d017      	beq.n	80011d8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	68db      	ldr	r3, [r3, #12]
 80011ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80011ae:	69fb      	ldr	r3, [r7, #28]
 80011b0:	005b      	lsls	r3, r3, #1
 80011b2:	2203      	movs	r2, #3
 80011b4:	fa02 f303 	lsl.w	r3, r2, r3
 80011b8:	43db      	mvns	r3, r3
 80011ba:	69ba      	ldr	r2, [r7, #24]
 80011bc:	4013      	ands	r3, r2
 80011be:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80011c0:	683b      	ldr	r3, [r7, #0]
 80011c2:	689a      	ldr	r2, [r3, #8]
 80011c4:	69fb      	ldr	r3, [r7, #28]
 80011c6:	005b      	lsls	r3, r3, #1
 80011c8:	fa02 f303 	lsl.w	r3, r2, r3
 80011cc:	69ba      	ldr	r2, [r7, #24]
 80011ce:	4313      	orrs	r3, r2
 80011d0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	69ba      	ldr	r2, [r7, #24]
 80011d6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80011d8:	683b      	ldr	r3, [r7, #0]
 80011da:	685b      	ldr	r3, [r3, #4]
 80011dc:	f003 0303 	and.w	r3, r3, #3
 80011e0:	2b02      	cmp	r3, #2
 80011e2:	d123      	bne.n	800122c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80011e4:	69fb      	ldr	r3, [r7, #28]
 80011e6:	08da      	lsrs	r2, r3, #3
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	3208      	adds	r2, #8
 80011ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80011f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80011f2:	69fb      	ldr	r3, [r7, #28]
 80011f4:	f003 0307 	and.w	r3, r3, #7
 80011f8:	009b      	lsls	r3, r3, #2
 80011fa:	220f      	movs	r2, #15
 80011fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001200:	43db      	mvns	r3, r3
 8001202:	69ba      	ldr	r2, [r7, #24]
 8001204:	4013      	ands	r3, r2
 8001206:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001208:	683b      	ldr	r3, [r7, #0]
 800120a:	691a      	ldr	r2, [r3, #16]
 800120c:	69fb      	ldr	r3, [r7, #28]
 800120e:	f003 0307 	and.w	r3, r3, #7
 8001212:	009b      	lsls	r3, r3, #2
 8001214:	fa02 f303 	lsl.w	r3, r2, r3
 8001218:	69ba      	ldr	r2, [r7, #24]
 800121a:	4313      	orrs	r3, r2
 800121c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800121e:	69fb      	ldr	r3, [r7, #28]
 8001220:	08da      	lsrs	r2, r3, #3
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	3208      	adds	r2, #8
 8001226:	69b9      	ldr	r1, [r7, #24]
 8001228:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001232:	69fb      	ldr	r3, [r7, #28]
 8001234:	005b      	lsls	r3, r3, #1
 8001236:	2203      	movs	r2, #3
 8001238:	fa02 f303 	lsl.w	r3, r2, r3
 800123c:	43db      	mvns	r3, r3
 800123e:	69ba      	ldr	r2, [r7, #24]
 8001240:	4013      	ands	r3, r2
 8001242:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001244:	683b      	ldr	r3, [r7, #0]
 8001246:	685b      	ldr	r3, [r3, #4]
 8001248:	f003 0203 	and.w	r2, r3, #3
 800124c:	69fb      	ldr	r3, [r7, #28]
 800124e:	005b      	lsls	r3, r3, #1
 8001250:	fa02 f303 	lsl.w	r3, r2, r3
 8001254:	69ba      	ldr	r2, [r7, #24]
 8001256:	4313      	orrs	r3, r2
 8001258:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	69ba      	ldr	r2, [r7, #24]
 800125e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001260:	683b      	ldr	r3, [r7, #0]
 8001262:	685b      	ldr	r3, [r3, #4]
 8001264:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001268:	2b00      	cmp	r3, #0
 800126a:	f000 80b4 	beq.w	80013d6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800126e:	2300      	movs	r3, #0
 8001270:	60fb      	str	r3, [r7, #12]
 8001272:	4b60      	ldr	r3, [pc, #384]	@ (80013f4 <HAL_GPIO_Init+0x30c>)
 8001274:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001276:	4a5f      	ldr	r2, [pc, #380]	@ (80013f4 <HAL_GPIO_Init+0x30c>)
 8001278:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800127c:	6453      	str	r3, [r2, #68]	@ 0x44
 800127e:	4b5d      	ldr	r3, [pc, #372]	@ (80013f4 <HAL_GPIO_Init+0x30c>)
 8001280:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001282:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001286:	60fb      	str	r3, [r7, #12]
 8001288:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800128a:	4a5b      	ldr	r2, [pc, #364]	@ (80013f8 <HAL_GPIO_Init+0x310>)
 800128c:	69fb      	ldr	r3, [r7, #28]
 800128e:	089b      	lsrs	r3, r3, #2
 8001290:	3302      	adds	r3, #2
 8001292:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001296:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001298:	69fb      	ldr	r3, [r7, #28]
 800129a:	f003 0303 	and.w	r3, r3, #3
 800129e:	009b      	lsls	r3, r3, #2
 80012a0:	220f      	movs	r2, #15
 80012a2:	fa02 f303 	lsl.w	r3, r2, r3
 80012a6:	43db      	mvns	r3, r3
 80012a8:	69ba      	ldr	r2, [r7, #24]
 80012aa:	4013      	ands	r3, r2
 80012ac:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	4a52      	ldr	r2, [pc, #328]	@ (80013fc <HAL_GPIO_Init+0x314>)
 80012b2:	4293      	cmp	r3, r2
 80012b4:	d02b      	beq.n	800130e <HAL_GPIO_Init+0x226>
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	4a51      	ldr	r2, [pc, #324]	@ (8001400 <HAL_GPIO_Init+0x318>)
 80012ba:	4293      	cmp	r3, r2
 80012bc:	d025      	beq.n	800130a <HAL_GPIO_Init+0x222>
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	4a50      	ldr	r2, [pc, #320]	@ (8001404 <HAL_GPIO_Init+0x31c>)
 80012c2:	4293      	cmp	r3, r2
 80012c4:	d01f      	beq.n	8001306 <HAL_GPIO_Init+0x21e>
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	4a4f      	ldr	r2, [pc, #316]	@ (8001408 <HAL_GPIO_Init+0x320>)
 80012ca:	4293      	cmp	r3, r2
 80012cc:	d019      	beq.n	8001302 <HAL_GPIO_Init+0x21a>
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	4a4e      	ldr	r2, [pc, #312]	@ (800140c <HAL_GPIO_Init+0x324>)
 80012d2:	4293      	cmp	r3, r2
 80012d4:	d013      	beq.n	80012fe <HAL_GPIO_Init+0x216>
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	4a4d      	ldr	r2, [pc, #308]	@ (8001410 <HAL_GPIO_Init+0x328>)
 80012da:	4293      	cmp	r3, r2
 80012dc:	d00d      	beq.n	80012fa <HAL_GPIO_Init+0x212>
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	4a4c      	ldr	r2, [pc, #304]	@ (8001414 <HAL_GPIO_Init+0x32c>)
 80012e2:	4293      	cmp	r3, r2
 80012e4:	d007      	beq.n	80012f6 <HAL_GPIO_Init+0x20e>
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	4a4b      	ldr	r2, [pc, #300]	@ (8001418 <HAL_GPIO_Init+0x330>)
 80012ea:	4293      	cmp	r3, r2
 80012ec:	d101      	bne.n	80012f2 <HAL_GPIO_Init+0x20a>
 80012ee:	2307      	movs	r3, #7
 80012f0:	e00e      	b.n	8001310 <HAL_GPIO_Init+0x228>
 80012f2:	2308      	movs	r3, #8
 80012f4:	e00c      	b.n	8001310 <HAL_GPIO_Init+0x228>
 80012f6:	2306      	movs	r3, #6
 80012f8:	e00a      	b.n	8001310 <HAL_GPIO_Init+0x228>
 80012fa:	2305      	movs	r3, #5
 80012fc:	e008      	b.n	8001310 <HAL_GPIO_Init+0x228>
 80012fe:	2304      	movs	r3, #4
 8001300:	e006      	b.n	8001310 <HAL_GPIO_Init+0x228>
 8001302:	2303      	movs	r3, #3
 8001304:	e004      	b.n	8001310 <HAL_GPIO_Init+0x228>
 8001306:	2302      	movs	r3, #2
 8001308:	e002      	b.n	8001310 <HAL_GPIO_Init+0x228>
 800130a:	2301      	movs	r3, #1
 800130c:	e000      	b.n	8001310 <HAL_GPIO_Init+0x228>
 800130e:	2300      	movs	r3, #0
 8001310:	69fa      	ldr	r2, [r7, #28]
 8001312:	f002 0203 	and.w	r2, r2, #3
 8001316:	0092      	lsls	r2, r2, #2
 8001318:	4093      	lsls	r3, r2
 800131a:	69ba      	ldr	r2, [r7, #24]
 800131c:	4313      	orrs	r3, r2
 800131e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001320:	4935      	ldr	r1, [pc, #212]	@ (80013f8 <HAL_GPIO_Init+0x310>)
 8001322:	69fb      	ldr	r3, [r7, #28]
 8001324:	089b      	lsrs	r3, r3, #2
 8001326:	3302      	adds	r3, #2
 8001328:	69ba      	ldr	r2, [r7, #24]
 800132a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800132e:	4b3b      	ldr	r3, [pc, #236]	@ (800141c <HAL_GPIO_Init+0x334>)
 8001330:	689b      	ldr	r3, [r3, #8]
 8001332:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001334:	693b      	ldr	r3, [r7, #16]
 8001336:	43db      	mvns	r3, r3
 8001338:	69ba      	ldr	r2, [r7, #24]
 800133a:	4013      	ands	r3, r2
 800133c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800133e:	683b      	ldr	r3, [r7, #0]
 8001340:	685b      	ldr	r3, [r3, #4]
 8001342:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001346:	2b00      	cmp	r3, #0
 8001348:	d003      	beq.n	8001352 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800134a:	69ba      	ldr	r2, [r7, #24]
 800134c:	693b      	ldr	r3, [r7, #16]
 800134e:	4313      	orrs	r3, r2
 8001350:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001352:	4a32      	ldr	r2, [pc, #200]	@ (800141c <HAL_GPIO_Init+0x334>)
 8001354:	69bb      	ldr	r3, [r7, #24]
 8001356:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001358:	4b30      	ldr	r3, [pc, #192]	@ (800141c <HAL_GPIO_Init+0x334>)
 800135a:	68db      	ldr	r3, [r3, #12]
 800135c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800135e:	693b      	ldr	r3, [r7, #16]
 8001360:	43db      	mvns	r3, r3
 8001362:	69ba      	ldr	r2, [r7, #24]
 8001364:	4013      	ands	r3, r2
 8001366:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001368:	683b      	ldr	r3, [r7, #0]
 800136a:	685b      	ldr	r3, [r3, #4]
 800136c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001370:	2b00      	cmp	r3, #0
 8001372:	d003      	beq.n	800137c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001374:	69ba      	ldr	r2, [r7, #24]
 8001376:	693b      	ldr	r3, [r7, #16]
 8001378:	4313      	orrs	r3, r2
 800137a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800137c:	4a27      	ldr	r2, [pc, #156]	@ (800141c <HAL_GPIO_Init+0x334>)
 800137e:	69bb      	ldr	r3, [r7, #24]
 8001380:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001382:	4b26      	ldr	r3, [pc, #152]	@ (800141c <HAL_GPIO_Init+0x334>)
 8001384:	685b      	ldr	r3, [r3, #4]
 8001386:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001388:	693b      	ldr	r3, [r7, #16]
 800138a:	43db      	mvns	r3, r3
 800138c:	69ba      	ldr	r2, [r7, #24]
 800138e:	4013      	ands	r3, r2
 8001390:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001392:	683b      	ldr	r3, [r7, #0]
 8001394:	685b      	ldr	r3, [r3, #4]
 8001396:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800139a:	2b00      	cmp	r3, #0
 800139c:	d003      	beq.n	80013a6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800139e:	69ba      	ldr	r2, [r7, #24]
 80013a0:	693b      	ldr	r3, [r7, #16]
 80013a2:	4313      	orrs	r3, r2
 80013a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80013a6:	4a1d      	ldr	r2, [pc, #116]	@ (800141c <HAL_GPIO_Init+0x334>)
 80013a8:	69bb      	ldr	r3, [r7, #24]
 80013aa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80013ac:	4b1b      	ldr	r3, [pc, #108]	@ (800141c <HAL_GPIO_Init+0x334>)
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013b2:	693b      	ldr	r3, [r7, #16]
 80013b4:	43db      	mvns	r3, r3
 80013b6:	69ba      	ldr	r2, [r7, #24]
 80013b8:	4013      	ands	r3, r2
 80013ba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80013bc:	683b      	ldr	r3, [r7, #0]
 80013be:	685b      	ldr	r3, [r3, #4]
 80013c0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d003      	beq.n	80013d0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80013c8:	69ba      	ldr	r2, [r7, #24]
 80013ca:	693b      	ldr	r3, [r7, #16]
 80013cc:	4313      	orrs	r3, r2
 80013ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80013d0:	4a12      	ldr	r2, [pc, #72]	@ (800141c <HAL_GPIO_Init+0x334>)
 80013d2:	69bb      	ldr	r3, [r7, #24]
 80013d4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80013d6:	69fb      	ldr	r3, [r7, #28]
 80013d8:	3301      	adds	r3, #1
 80013da:	61fb      	str	r3, [r7, #28]
 80013dc:	69fb      	ldr	r3, [r7, #28]
 80013de:	2b0f      	cmp	r3, #15
 80013e0:	f67f ae90 	bls.w	8001104 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80013e4:	bf00      	nop
 80013e6:	bf00      	nop
 80013e8:	3724      	adds	r7, #36	@ 0x24
 80013ea:	46bd      	mov	sp, r7
 80013ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f0:	4770      	bx	lr
 80013f2:	bf00      	nop
 80013f4:	40023800 	.word	0x40023800
 80013f8:	40013800 	.word	0x40013800
 80013fc:	40020000 	.word	0x40020000
 8001400:	40020400 	.word	0x40020400
 8001404:	40020800 	.word	0x40020800
 8001408:	40020c00 	.word	0x40020c00
 800140c:	40021000 	.word	0x40021000
 8001410:	40021400 	.word	0x40021400
 8001414:	40021800 	.word	0x40021800
 8001418:	40021c00 	.word	0x40021c00
 800141c:	40013c00 	.word	0x40013c00

08001420 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	b086      	sub	sp, #24
 8001424:	af02      	add	r7, sp, #8
 8001426:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	2b00      	cmp	r3, #0
 800142c:	d101      	bne.n	8001432 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800142e:	2301      	movs	r3, #1
 8001430:	e101      	b.n	8001636 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 800143e:	b2db      	uxtb	r3, r3
 8001440:	2b00      	cmp	r3, #0
 8001442:	d106      	bne.n	8001452 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	2200      	movs	r2, #0
 8001448:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800144c:	6878      	ldr	r0, [r7, #4]
 800144e:	f005 fcfd 	bl	8006e4c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	2203      	movs	r2, #3
 8001456:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 800145a:	68bb      	ldr	r3, [r7, #8]
 800145c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001460:	d102      	bne.n	8001468 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	2200      	movs	r2, #0
 8001466:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	4618      	mov	r0, r3
 800146e:	f002 f93a 	bl	80036e6 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	6818      	ldr	r0, [r3, #0]
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	7c1a      	ldrb	r2, [r3, #16]
 800147a:	f88d 2000 	strb.w	r2, [sp]
 800147e:	3304      	adds	r3, #4
 8001480:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001482:	f002 f819 	bl	80034b8 <USB_CoreInit>
 8001486:	4603      	mov	r3, r0
 8001488:	2b00      	cmp	r3, #0
 800148a:	d005      	beq.n	8001498 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	2202      	movs	r2, #2
 8001490:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001494:	2301      	movs	r3, #1
 8001496:	e0ce      	b.n	8001636 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	2100      	movs	r1, #0
 800149e:	4618      	mov	r0, r3
 80014a0:	f002 f932 	bl	8003708 <USB_SetCurrentMode>
 80014a4:	4603      	mov	r3, r0
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d005      	beq.n	80014b6 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	2202      	movs	r2, #2
 80014ae:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80014b2:	2301      	movs	r3, #1
 80014b4:	e0bf      	b.n	8001636 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80014b6:	2300      	movs	r3, #0
 80014b8:	73fb      	strb	r3, [r7, #15]
 80014ba:	e04a      	b.n	8001552 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80014bc:	7bfa      	ldrb	r2, [r7, #15]
 80014be:	6879      	ldr	r1, [r7, #4]
 80014c0:	4613      	mov	r3, r2
 80014c2:	00db      	lsls	r3, r3, #3
 80014c4:	4413      	add	r3, r2
 80014c6:	009b      	lsls	r3, r3, #2
 80014c8:	440b      	add	r3, r1
 80014ca:	3315      	adds	r3, #21
 80014cc:	2201      	movs	r2, #1
 80014ce:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80014d0:	7bfa      	ldrb	r2, [r7, #15]
 80014d2:	6879      	ldr	r1, [r7, #4]
 80014d4:	4613      	mov	r3, r2
 80014d6:	00db      	lsls	r3, r3, #3
 80014d8:	4413      	add	r3, r2
 80014da:	009b      	lsls	r3, r3, #2
 80014dc:	440b      	add	r3, r1
 80014de:	3314      	adds	r3, #20
 80014e0:	7bfa      	ldrb	r2, [r7, #15]
 80014e2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80014e4:	7bfa      	ldrb	r2, [r7, #15]
 80014e6:	7bfb      	ldrb	r3, [r7, #15]
 80014e8:	b298      	uxth	r0, r3
 80014ea:	6879      	ldr	r1, [r7, #4]
 80014ec:	4613      	mov	r3, r2
 80014ee:	00db      	lsls	r3, r3, #3
 80014f0:	4413      	add	r3, r2
 80014f2:	009b      	lsls	r3, r3, #2
 80014f4:	440b      	add	r3, r1
 80014f6:	332e      	adds	r3, #46	@ 0x2e
 80014f8:	4602      	mov	r2, r0
 80014fa:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80014fc:	7bfa      	ldrb	r2, [r7, #15]
 80014fe:	6879      	ldr	r1, [r7, #4]
 8001500:	4613      	mov	r3, r2
 8001502:	00db      	lsls	r3, r3, #3
 8001504:	4413      	add	r3, r2
 8001506:	009b      	lsls	r3, r3, #2
 8001508:	440b      	add	r3, r1
 800150a:	3318      	adds	r3, #24
 800150c:	2200      	movs	r2, #0
 800150e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001510:	7bfa      	ldrb	r2, [r7, #15]
 8001512:	6879      	ldr	r1, [r7, #4]
 8001514:	4613      	mov	r3, r2
 8001516:	00db      	lsls	r3, r3, #3
 8001518:	4413      	add	r3, r2
 800151a:	009b      	lsls	r3, r3, #2
 800151c:	440b      	add	r3, r1
 800151e:	331c      	adds	r3, #28
 8001520:	2200      	movs	r2, #0
 8001522:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001524:	7bfa      	ldrb	r2, [r7, #15]
 8001526:	6879      	ldr	r1, [r7, #4]
 8001528:	4613      	mov	r3, r2
 800152a:	00db      	lsls	r3, r3, #3
 800152c:	4413      	add	r3, r2
 800152e:	009b      	lsls	r3, r3, #2
 8001530:	440b      	add	r3, r1
 8001532:	3320      	adds	r3, #32
 8001534:	2200      	movs	r2, #0
 8001536:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001538:	7bfa      	ldrb	r2, [r7, #15]
 800153a:	6879      	ldr	r1, [r7, #4]
 800153c:	4613      	mov	r3, r2
 800153e:	00db      	lsls	r3, r3, #3
 8001540:	4413      	add	r3, r2
 8001542:	009b      	lsls	r3, r3, #2
 8001544:	440b      	add	r3, r1
 8001546:	3324      	adds	r3, #36	@ 0x24
 8001548:	2200      	movs	r2, #0
 800154a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800154c:	7bfb      	ldrb	r3, [r7, #15]
 800154e:	3301      	adds	r3, #1
 8001550:	73fb      	strb	r3, [r7, #15]
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	791b      	ldrb	r3, [r3, #4]
 8001556:	7bfa      	ldrb	r2, [r7, #15]
 8001558:	429a      	cmp	r2, r3
 800155a:	d3af      	bcc.n	80014bc <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800155c:	2300      	movs	r3, #0
 800155e:	73fb      	strb	r3, [r7, #15]
 8001560:	e044      	b.n	80015ec <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001562:	7bfa      	ldrb	r2, [r7, #15]
 8001564:	6879      	ldr	r1, [r7, #4]
 8001566:	4613      	mov	r3, r2
 8001568:	00db      	lsls	r3, r3, #3
 800156a:	4413      	add	r3, r2
 800156c:	009b      	lsls	r3, r3, #2
 800156e:	440b      	add	r3, r1
 8001570:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8001574:	2200      	movs	r2, #0
 8001576:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001578:	7bfa      	ldrb	r2, [r7, #15]
 800157a:	6879      	ldr	r1, [r7, #4]
 800157c:	4613      	mov	r3, r2
 800157e:	00db      	lsls	r3, r3, #3
 8001580:	4413      	add	r3, r2
 8001582:	009b      	lsls	r3, r3, #2
 8001584:	440b      	add	r3, r1
 8001586:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 800158a:	7bfa      	ldrb	r2, [r7, #15]
 800158c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800158e:	7bfa      	ldrb	r2, [r7, #15]
 8001590:	6879      	ldr	r1, [r7, #4]
 8001592:	4613      	mov	r3, r2
 8001594:	00db      	lsls	r3, r3, #3
 8001596:	4413      	add	r3, r2
 8001598:	009b      	lsls	r3, r3, #2
 800159a:	440b      	add	r3, r1
 800159c:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80015a0:	2200      	movs	r2, #0
 80015a2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80015a4:	7bfa      	ldrb	r2, [r7, #15]
 80015a6:	6879      	ldr	r1, [r7, #4]
 80015a8:	4613      	mov	r3, r2
 80015aa:	00db      	lsls	r3, r3, #3
 80015ac:	4413      	add	r3, r2
 80015ae:	009b      	lsls	r3, r3, #2
 80015b0:	440b      	add	r3, r1
 80015b2:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 80015b6:	2200      	movs	r2, #0
 80015b8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80015ba:	7bfa      	ldrb	r2, [r7, #15]
 80015bc:	6879      	ldr	r1, [r7, #4]
 80015be:	4613      	mov	r3, r2
 80015c0:	00db      	lsls	r3, r3, #3
 80015c2:	4413      	add	r3, r2
 80015c4:	009b      	lsls	r3, r3, #2
 80015c6:	440b      	add	r3, r1
 80015c8:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80015cc:	2200      	movs	r2, #0
 80015ce:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80015d0:	7bfa      	ldrb	r2, [r7, #15]
 80015d2:	6879      	ldr	r1, [r7, #4]
 80015d4:	4613      	mov	r3, r2
 80015d6:	00db      	lsls	r3, r3, #3
 80015d8:	4413      	add	r3, r2
 80015da:	009b      	lsls	r3, r3, #2
 80015dc:	440b      	add	r3, r1
 80015de:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80015e2:	2200      	movs	r2, #0
 80015e4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80015e6:	7bfb      	ldrb	r3, [r7, #15]
 80015e8:	3301      	adds	r3, #1
 80015ea:	73fb      	strb	r3, [r7, #15]
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	791b      	ldrb	r3, [r3, #4]
 80015f0:	7bfa      	ldrb	r2, [r7, #15]
 80015f2:	429a      	cmp	r2, r3
 80015f4:	d3b5      	bcc.n	8001562 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	6818      	ldr	r0, [r3, #0]
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	7c1a      	ldrb	r2, [r3, #16]
 80015fe:	f88d 2000 	strb.w	r2, [sp]
 8001602:	3304      	adds	r3, #4
 8001604:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001606:	f002 f8cb 	bl	80037a0 <USB_DevInit>
 800160a:	4603      	mov	r3, r0
 800160c:	2b00      	cmp	r3, #0
 800160e:	d005      	beq.n	800161c <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	2202      	movs	r2, #2
 8001614:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001618:	2301      	movs	r3, #1
 800161a:	e00c      	b.n	8001636 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	2200      	movs	r2, #0
 8001620:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	2201      	movs	r2, #1
 8001626:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	4618      	mov	r0, r3
 8001630:	f003 f915 	bl	800485e <USB_DevDisconnect>

  return HAL_OK;
 8001634:	2300      	movs	r3, #0
}
 8001636:	4618      	mov	r0, r3
 8001638:	3710      	adds	r7, #16
 800163a:	46bd      	mov	sp, r7
 800163c:	bd80      	pop	{r7, pc}

0800163e <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800163e:	b580      	push	{r7, lr}
 8001640:	b084      	sub	sp, #16
 8001642:	af00      	add	r7, sp, #0
 8001644:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8001652:	2b01      	cmp	r3, #1
 8001654:	d101      	bne.n	800165a <HAL_PCD_Start+0x1c>
 8001656:	2302      	movs	r3, #2
 8001658:	e022      	b.n	80016a0 <HAL_PCD_Start+0x62>
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	2201      	movs	r2, #1
 800165e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	68db      	ldr	r3, [r3, #12]
 8001666:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800166a:	2b00      	cmp	r3, #0
 800166c:	d009      	beq.n	8001682 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8001672:	2b01      	cmp	r3, #1
 8001674:	d105      	bne.n	8001682 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800167a:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	4618      	mov	r0, r3
 8001688:	f002 f81c 	bl	80036c4 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	4618      	mov	r0, r3
 8001692:	f003 f8c3 	bl	800481c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	2200      	movs	r2, #0
 800169a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800169e:	2300      	movs	r3, #0
}
 80016a0:	4618      	mov	r0, r3
 80016a2:	3710      	adds	r7, #16
 80016a4:	46bd      	mov	sp, r7
 80016a6:	bd80      	pop	{r7, pc}

080016a8 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80016a8:	b590      	push	{r4, r7, lr}
 80016aa:	b08d      	sub	sp, #52	@ 0x34
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80016b6:	6a3b      	ldr	r3, [r7, #32]
 80016b8:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	4618      	mov	r0, r3
 80016c0:	f003 f981 	bl	80049c6 <USB_GetMode>
 80016c4:	4603      	mov	r3, r0
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	f040 848c 	bne.w	8001fe4 <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	4618      	mov	r0, r3
 80016d2:	f003 f8e5 	bl	80048a0 <USB_ReadInterrupts>
 80016d6:	4603      	mov	r3, r0
 80016d8:	2b00      	cmp	r3, #0
 80016da:	f000 8482 	beq.w	8001fe2 <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80016de:	69fb      	ldr	r3, [r7, #28]
 80016e0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80016e4:	689b      	ldr	r3, [r3, #8]
 80016e6:	0a1b      	lsrs	r3, r3, #8
 80016e8:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	4618      	mov	r0, r3
 80016f8:	f003 f8d2 	bl	80048a0 <USB_ReadInterrupts>
 80016fc:	4603      	mov	r3, r0
 80016fe:	f003 0302 	and.w	r3, r3, #2
 8001702:	2b02      	cmp	r3, #2
 8001704:	d107      	bne.n	8001716 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	695a      	ldr	r2, [r3, #20]
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	f002 0202 	and.w	r2, r2, #2
 8001714:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	4618      	mov	r0, r3
 800171c:	f003 f8c0 	bl	80048a0 <USB_ReadInterrupts>
 8001720:	4603      	mov	r3, r0
 8001722:	f003 0310 	and.w	r3, r3, #16
 8001726:	2b10      	cmp	r3, #16
 8001728:	d161      	bne.n	80017ee <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	699a      	ldr	r2, [r3, #24]
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	f022 0210 	bic.w	r2, r2, #16
 8001738:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 800173a:	6a3b      	ldr	r3, [r7, #32]
 800173c:	6a1b      	ldr	r3, [r3, #32]
 800173e:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8001740:	69bb      	ldr	r3, [r7, #24]
 8001742:	f003 020f 	and.w	r2, r3, #15
 8001746:	4613      	mov	r3, r2
 8001748:	00db      	lsls	r3, r3, #3
 800174a:	4413      	add	r3, r2
 800174c:	009b      	lsls	r3, r3, #2
 800174e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001752:	687a      	ldr	r2, [r7, #4]
 8001754:	4413      	add	r3, r2
 8001756:	3304      	adds	r3, #4
 8001758:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800175a:	69bb      	ldr	r3, [r7, #24]
 800175c:	0c5b      	lsrs	r3, r3, #17
 800175e:	f003 030f 	and.w	r3, r3, #15
 8001762:	2b02      	cmp	r3, #2
 8001764:	d124      	bne.n	80017b0 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8001766:	69ba      	ldr	r2, [r7, #24]
 8001768:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 800176c:	4013      	ands	r3, r2
 800176e:	2b00      	cmp	r3, #0
 8001770:	d035      	beq.n	80017de <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001772:	697b      	ldr	r3, [r7, #20]
 8001774:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8001776:	69bb      	ldr	r3, [r7, #24]
 8001778:	091b      	lsrs	r3, r3, #4
 800177a:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800177c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001780:	b29b      	uxth	r3, r3
 8001782:	461a      	mov	r2, r3
 8001784:	6a38      	ldr	r0, [r7, #32]
 8001786:	f002 fef7 	bl	8004578 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800178a:	697b      	ldr	r3, [r7, #20]
 800178c:	68da      	ldr	r2, [r3, #12]
 800178e:	69bb      	ldr	r3, [r7, #24]
 8001790:	091b      	lsrs	r3, r3, #4
 8001792:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001796:	441a      	add	r2, r3
 8001798:	697b      	ldr	r3, [r7, #20]
 800179a:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800179c:	697b      	ldr	r3, [r7, #20]
 800179e:	695a      	ldr	r2, [r3, #20]
 80017a0:	69bb      	ldr	r3, [r7, #24]
 80017a2:	091b      	lsrs	r3, r3, #4
 80017a4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80017a8:	441a      	add	r2, r3
 80017aa:	697b      	ldr	r3, [r7, #20]
 80017ac:	615a      	str	r2, [r3, #20]
 80017ae:	e016      	b.n	80017de <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80017b0:	69bb      	ldr	r3, [r7, #24]
 80017b2:	0c5b      	lsrs	r3, r3, #17
 80017b4:	f003 030f 	and.w	r3, r3, #15
 80017b8:	2b06      	cmp	r3, #6
 80017ba:	d110      	bne.n	80017de <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80017c2:	2208      	movs	r2, #8
 80017c4:	4619      	mov	r1, r3
 80017c6:	6a38      	ldr	r0, [r7, #32]
 80017c8:	f002 fed6 	bl	8004578 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80017cc:	697b      	ldr	r3, [r7, #20]
 80017ce:	695a      	ldr	r2, [r3, #20]
 80017d0:	69bb      	ldr	r3, [r7, #24]
 80017d2:	091b      	lsrs	r3, r3, #4
 80017d4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80017d8:	441a      	add	r2, r3
 80017da:	697b      	ldr	r3, [r7, #20]
 80017dc:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	699a      	ldr	r2, [r3, #24]
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	f042 0210 	orr.w	r2, r2, #16
 80017ec:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	4618      	mov	r0, r3
 80017f4:	f003 f854 	bl	80048a0 <USB_ReadInterrupts>
 80017f8:	4603      	mov	r3, r0
 80017fa:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80017fe:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8001802:	f040 80a7 	bne.w	8001954 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8001806:	2300      	movs	r3, #0
 8001808:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	4618      	mov	r0, r3
 8001810:	f003 f859 	bl	80048c6 <USB_ReadDevAllOutEpInterrupt>
 8001814:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8001816:	e099      	b.n	800194c <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8001818:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800181a:	f003 0301 	and.w	r3, r3, #1
 800181e:	2b00      	cmp	r3, #0
 8001820:	f000 808e 	beq.w	8001940 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800182a:	b2d2      	uxtb	r2, r2
 800182c:	4611      	mov	r1, r2
 800182e:	4618      	mov	r0, r3
 8001830:	f003 f87d 	bl	800492e <USB_ReadDevOutEPInterrupt>
 8001834:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8001836:	693b      	ldr	r3, [r7, #16]
 8001838:	f003 0301 	and.w	r3, r3, #1
 800183c:	2b00      	cmp	r3, #0
 800183e:	d00c      	beq.n	800185a <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8001840:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001842:	015a      	lsls	r2, r3, #5
 8001844:	69fb      	ldr	r3, [r7, #28]
 8001846:	4413      	add	r3, r2
 8001848:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800184c:	461a      	mov	r2, r3
 800184e:	2301      	movs	r3, #1
 8001850:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8001852:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001854:	6878      	ldr	r0, [r7, #4]
 8001856:	f000 fea3 	bl	80025a0 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800185a:	693b      	ldr	r3, [r7, #16]
 800185c:	f003 0308 	and.w	r3, r3, #8
 8001860:	2b00      	cmp	r3, #0
 8001862:	d00c      	beq.n	800187e <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8001864:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001866:	015a      	lsls	r2, r3, #5
 8001868:	69fb      	ldr	r3, [r7, #28]
 800186a:	4413      	add	r3, r2
 800186c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001870:	461a      	mov	r2, r3
 8001872:	2308      	movs	r3, #8
 8001874:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8001876:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001878:	6878      	ldr	r0, [r7, #4]
 800187a:	f000 ff79 	bl	8002770 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800187e:	693b      	ldr	r3, [r7, #16]
 8001880:	f003 0310 	and.w	r3, r3, #16
 8001884:	2b00      	cmp	r3, #0
 8001886:	d008      	beq.n	800189a <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8001888:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800188a:	015a      	lsls	r2, r3, #5
 800188c:	69fb      	ldr	r3, [r7, #28]
 800188e:	4413      	add	r3, r2
 8001890:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001894:	461a      	mov	r2, r3
 8001896:	2310      	movs	r3, #16
 8001898:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 800189a:	693b      	ldr	r3, [r7, #16]
 800189c:	f003 0302 	and.w	r3, r3, #2
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d030      	beq.n	8001906 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80018a4:	6a3b      	ldr	r3, [r7, #32]
 80018a6:	695b      	ldr	r3, [r3, #20]
 80018a8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80018ac:	2b80      	cmp	r3, #128	@ 0x80
 80018ae:	d109      	bne.n	80018c4 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80018b0:	69fb      	ldr	r3, [r7, #28]
 80018b2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80018b6:	685b      	ldr	r3, [r3, #4]
 80018b8:	69fa      	ldr	r2, [r7, #28]
 80018ba:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80018be:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80018c2:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80018c4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80018c6:	4613      	mov	r3, r2
 80018c8:	00db      	lsls	r3, r3, #3
 80018ca:	4413      	add	r3, r2
 80018cc:	009b      	lsls	r3, r3, #2
 80018ce:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80018d2:	687a      	ldr	r2, [r7, #4]
 80018d4:	4413      	add	r3, r2
 80018d6:	3304      	adds	r3, #4
 80018d8:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80018da:	697b      	ldr	r3, [r7, #20]
 80018dc:	78db      	ldrb	r3, [r3, #3]
 80018de:	2b01      	cmp	r3, #1
 80018e0:	d108      	bne.n	80018f4 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80018e2:	697b      	ldr	r3, [r7, #20]
 80018e4:	2200      	movs	r2, #0
 80018e6:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80018e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018ea:	b2db      	uxtb	r3, r3
 80018ec:	4619      	mov	r1, r3
 80018ee:	6878      	ldr	r0, [r7, #4]
 80018f0:	f005 fbb2 	bl	8007058 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80018f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018f6:	015a      	lsls	r2, r3, #5
 80018f8:	69fb      	ldr	r3, [r7, #28]
 80018fa:	4413      	add	r3, r2
 80018fc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001900:	461a      	mov	r2, r3
 8001902:	2302      	movs	r3, #2
 8001904:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001906:	693b      	ldr	r3, [r7, #16]
 8001908:	f003 0320 	and.w	r3, r3, #32
 800190c:	2b00      	cmp	r3, #0
 800190e:	d008      	beq.n	8001922 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001910:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001912:	015a      	lsls	r2, r3, #5
 8001914:	69fb      	ldr	r3, [r7, #28]
 8001916:	4413      	add	r3, r2
 8001918:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800191c:	461a      	mov	r2, r3
 800191e:	2320      	movs	r3, #32
 8001920:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8001922:	693b      	ldr	r3, [r7, #16]
 8001924:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001928:	2b00      	cmp	r3, #0
 800192a:	d009      	beq.n	8001940 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800192c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800192e:	015a      	lsls	r2, r3, #5
 8001930:	69fb      	ldr	r3, [r7, #28]
 8001932:	4413      	add	r3, r2
 8001934:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001938:	461a      	mov	r2, r3
 800193a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800193e:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8001940:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001942:	3301      	adds	r3, #1
 8001944:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8001946:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001948:	085b      	lsrs	r3, r3, #1
 800194a:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 800194c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800194e:	2b00      	cmp	r3, #0
 8001950:	f47f af62 	bne.w	8001818 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	4618      	mov	r0, r3
 800195a:	f002 ffa1 	bl	80048a0 <USB_ReadInterrupts>
 800195e:	4603      	mov	r3, r0
 8001960:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001964:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8001968:	f040 80db 	bne.w	8001b22 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	4618      	mov	r0, r3
 8001972:	f002 ffc2 	bl	80048fa <USB_ReadDevAllInEpInterrupt>
 8001976:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8001978:	2300      	movs	r3, #0
 800197a:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 800197c:	e0cd      	b.n	8001b1a <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800197e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001980:	f003 0301 	and.w	r3, r3, #1
 8001984:	2b00      	cmp	r3, #0
 8001986:	f000 80c2 	beq.w	8001b0e <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001990:	b2d2      	uxtb	r2, r2
 8001992:	4611      	mov	r1, r2
 8001994:	4618      	mov	r0, r3
 8001996:	f002 ffe8 	bl	800496a <USB_ReadDevInEPInterrupt>
 800199a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800199c:	693b      	ldr	r3, [r7, #16]
 800199e:	f003 0301 	and.w	r3, r3, #1
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d057      	beq.n	8001a56 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80019a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019a8:	f003 030f 	and.w	r3, r3, #15
 80019ac:	2201      	movs	r2, #1
 80019ae:	fa02 f303 	lsl.w	r3, r2, r3
 80019b2:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80019b4:	69fb      	ldr	r3, [r7, #28]
 80019b6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80019ba:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	43db      	mvns	r3, r3
 80019c0:	69f9      	ldr	r1, [r7, #28]
 80019c2:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80019c6:	4013      	ands	r3, r2
 80019c8:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80019ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019cc:	015a      	lsls	r2, r3, #5
 80019ce:	69fb      	ldr	r3, [r7, #28]
 80019d0:	4413      	add	r3, r2
 80019d2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80019d6:	461a      	mov	r2, r3
 80019d8:	2301      	movs	r3, #1
 80019da:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	799b      	ldrb	r3, [r3, #6]
 80019e0:	2b01      	cmp	r3, #1
 80019e2:	d132      	bne.n	8001a4a <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80019e4:	6879      	ldr	r1, [r7, #4]
 80019e6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80019e8:	4613      	mov	r3, r2
 80019ea:	00db      	lsls	r3, r3, #3
 80019ec:	4413      	add	r3, r2
 80019ee:	009b      	lsls	r3, r3, #2
 80019f0:	440b      	add	r3, r1
 80019f2:	3320      	adds	r3, #32
 80019f4:	6819      	ldr	r1, [r3, #0]
 80019f6:	6878      	ldr	r0, [r7, #4]
 80019f8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80019fa:	4613      	mov	r3, r2
 80019fc:	00db      	lsls	r3, r3, #3
 80019fe:	4413      	add	r3, r2
 8001a00:	009b      	lsls	r3, r3, #2
 8001a02:	4403      	add	r3, r0
 8001a04:	331c      	adds	r3, #28
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	4419      	add	r1, r3
 8001a0a:	6878      	ldr	r0, [r7, #4]
 8001a0c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001a0e:	4613      	mov	r3, r2
 8001a10:	00db      	lsls	r3, r3, #3
 8001a12:	4413      	add	r3, r2
 8001a14:	009b      	lsls	r3, r3, #2
 8001a16:	4403      	add	r3, r0
 8001a18:	3320      	adds	r3, #32
 8001a1a:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8001a1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d113      	bne.n	8001a4a <HAL_PCD_IRQHandler+0x3a2>
 8001a22:	6879      	ldr	r1, [r7, #4]
 8001a24:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001a26:	4613      	mov	r3, r2
 8001a28:	00db      	lsls	r3, r3, #3
 8001a2a:	4413      	add	r3, r2
 8001a2c:	009b      	lsls	r3, r3, #2
 8001a2e:	440b      	add	r3, r1
 8001a30:	3324      	adds	r3, #36	@ 0x24
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d108      	bne.n	8001a4a <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	6818      	ldr	r0, [r3, #0]
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8001a42:	461a      	mov	r2, r3
 8001a44:	2101      	movs	r1, #1
 8001a46:	f002 ffef 	bl	8004a28 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8001a4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a4c:	b2db      	uxtb	r3, r3
 8001a4e:	4619      	mov	r1, r3
 8001a50:	6878      	ldr	r0, [r7, #4]
 8001a52:	f005 fa7c 	bl	8006f4e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8001a56:	693b      	ldr	r3, [r7, #16]
 8001a58:	f003 0308 	and.w	r3, r3, #8
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d008      	beq.n	8001a72 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8001a60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a62:	015a      	lsls	r2, r3, #5
 8001a64:	69fb      	ldr	r3, [r7, #28]
 8001a66:	4413      	add	r3, r2
 8001a68:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001a6c:	461a      	mov	r2, r3
 8001a6e:	2308      	movs	r3, #8
 8001a70:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8001a72:	693b      	ldr	r3, [r7, #16]
 8001a74:	f003 0310 	and.w	r3, r3, #16
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d008      	beq.n	8001a8e <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8001a7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a7e:	015a      	lsls	r2, r3, #5
 8001a80:	69fb      	ldr	r3, [r7, #28]
 8001a82:	4413      	add	r3, r2
 8001a84:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001a88:	461a      	mov	r2, r3
 8001a8a:	2310      	movs	r3, #16
 8001a8c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8001a8e:	693b      	ldr	r3, [r7, #16]
 8001a90:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d008      	beq.n	8001aaa <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8001a98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a9a:	015a      	lsls	r2, r3, #5
 8001a9c:	69fb      	ldr	r3, [r7, #28]
 8001a9e:	4413      	add	r3, r2
 8001aa0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001aa4:	461a      	mov	r2, r3
 8001aa6:	2340      	movs	r3, #64	@ 0x40
 8001aa8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8001aaa:	693b      	ldr	r3, [r7, #16]
 8001aac:	f003 0302 	and.w	r3, r3, #2
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d023      	beq.n	8001afc <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8001ab4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001ab6:	6a38      	ldr	r0, [r7, #32]
 8001ab8:	f001 ffd6 	bl	8003a68 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8001abc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001abe:	4613      	mov	r3, r2
 8001ac0:	00db      	lsls	r3, r3, #3
 8001ac2:	4413      	add	r3, r2
 8001ac4:	009b      	lsls	r3, r3, #2
 8001ac6:	3310      	adds	r3, #16
 8001ac8:	687a      	ldr	r2, [r7, #4]
 8001aca:	4413      	add	r3, r2
 8001acc:	3304      	adds	r3, #4
 8001ace:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8001ad0:	697b      	ldr	r3, [r7, #20]
 8001ad2:	78db      	ldrb	r3, [r3, #3]
 8001ad4:	2b01      	cmp	r3, #1
 8001ad6:	d108      	bne.n	8001aea <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8001ad8:	697b      	ldr	r3, [r7, #20]
 8001ada:	2200      	movs	r2, #0
 8001adc:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8001ade:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ae0:	b2db      	uxtb	r3, r3
 8001ae2:	4619      	mov	r1, r3
 8001ae4:	6878      	ldr	r0, [r7, #4]
 8001ae6:	f005 fac9 	bl	800707c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8001aea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001aec:	015a      	lsls	r2, r3, #5
 8001aee:	69fb      	ldr	r3, [r7, #28]
 8001af0:	4413      	add	r3, r2
 8001af2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001af6:	461a      	mov	r2, r3
 8001af8:	2302      	movs	r3, #2
 8001afa:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8001afc:	693b      	ldr	r3, [r7, #16]
 8001afe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d003      	beq.n	8001b0e <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8001b06:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001b08:	6878      	ldr	r0, [r7, #4]
 8001b0a:	f000 fcbd 	bl	8002488 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8001b0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b10:	3301      	adds	r3, #1
 8001b12:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8001b14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001b16:	085b      	lsrs	r3, r3, #1
 8001b18:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8001b1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	f47f af2e 	bne.w	800197e <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	4618      	mov	r0, r3
 8001b28:	f002 feba 	bl	80048a0 <USB_ReadInterrupts>
 8001b2c:	4603      	mov	r3, r0
 8001b2e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8001b32:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8001b36:	d122      	bne.n	8001b7e <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001b38:	69fb      	ldr	r3, [r7, #28]
 8001b3a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001b3e:	685b      	ldr	r3, [r3, #4]
 8001b40:	69fa      	ldr	r2, [r7, #28]
 8001b42:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001b46:	f023 0301 	bic.w	r3, r3, #1
 8001b4a:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8001b52:	2b01      	cmp	r3, #1
 8001b54:	d108      	bne.n	8001b68 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	2200      	movs	r2, #0
 8001b5a:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001b5e:	2100      	movs	r1, #0
 8001b60:	6878      	ldr	r0, [r7, #4]
 8001b62:	f000 fea3 	bl	80028ac <HAL_PCDEx_LPM_Callback>
 8001b66:	e002      	b.n	8001b6e <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8001b68:	6878      	ldr	r0, [r7, #4]
 8001b6a:	f005 fa67 	bl	800703c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	695a      	ldr	r2, [r3, #20]
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8001b7c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	4618      	mov	r0, r3
 8001b84:	f002 fe8c 	bl	80048a0 <USB_ReadInterrupts>
 8001b88:	4603      	mov	r3, r0
 8001b8a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001b8e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001b92:	d112      	bne.n	8001bba <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8001b94:	69fb      	ldr	r3, [r7, #28]
 8001b96:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001b9a:	689b      	ldr	r3, [r3, #8]
 8001b9c:	f003 0301 	and.w	r3, r3, #1
 8001ba0:	2b01      	cmp	r3, #1
 8001ba2:	d102      	bne.n	8001baa <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001ba4:	6878      	ldr	r0, [r7, #4]
 8001ba6:	f005 fa23 	bl	8006ff0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	695a      	ldr	r2, [r3, #20]
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8001bb8:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	f002 fe6e 	bl	80048a0 <USB_ReadInterrupts>
 8001bc4:	4603      	mov	r3, r0
 8001bc6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001bca:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001bce:	f040 80b7 	bne.w	8001d40 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001bd2:	69fb      	ldr	r3, [r7, #28]
 8001bd4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001bd8:	685b      	ldr	r3, [r3, #4]
 8001bda:	69fa      	ldr	r2, [r7, #28]
 8001bdc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001be0:	f023 0301 	bic.w	r3, r3, #1
 8001be4:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	2110      	movs	r1, #16
 8001bec:	4618      	mov	r0, r3
 8001bee:	f001 ff3b 	bl	8003a68 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001bf6:	e046      	b.n	8001c86 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8001bf8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001bfa:	015a      	lsls	r2, r3, #5
 8001bfc:	69fb      	ldr	r3, [r7, #28]
 8001bfe:	4413      	add	r3, r2
 8001c00:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001c04:	461a      	mov	r2, r3
 8001c06:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8001c0a:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8001c0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001c0e:	015a      	lsls	r2, r3, #5
 8001c10:	69fb      	ldr	r3, [r7, #28]
 8001c12:	4413      	add	r3, r2
 8001c14:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001c1c:	0151      	lsls	r1, r2, #5
 8001c1e:	69fa      	ldr	r2, [r7, #28]
 8001c20:	440a      	add	r2, r1
 8001c22:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8001c26:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8001c2a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8001c2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001c2e:	015a      	lsls	r2, r3, #5
 8001c30:	69fb      	ldr	r3, [r7, #28]
 8001c32:	4413      	add	r3, r2
 8001c34:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001c38:	461a      	mov	r2, r3
 8001c3a:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8001c3e:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8001c40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001c42:	015a      	lsls	r2, r3, #5
 8001c44:	69fb      	ldr	r3, [r7, #28]
 8001c46:	4413      	add	r3, r2
 8001c48:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001c50:	0151      	lsls	r1, r2, #5
 8001c52:	69fa      	ldr	r2, [r7, #28]
 8001c54:	440a      	add	r2, r1
 8001c56:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8001c5a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8001c5e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8001c60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001c62:	015a      	lsls	r2, r3, #5
 8001c64:	69fb      	ldr	r3, [r7, #28]
 8001c66:	4413      	add	r3, r2
 8001c68:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001c70:	0151      	lsls	r1, r2, #5
 8001c72:	69fa      	ldr	r2, [r7, #28]
 8001c74:	440a      	add	r2, r1
 8001c76:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8001c7a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8001c7e:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001c80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001c82:	3301      	adds	r3, #1
 8001c84:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	791b      	ldrb	r3, [r3, #4]
 8001c8a:	461a      	mov	r2, r3
 8001c8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001c8e:	4293      	cmp	r3, r2
 8001c90:	d3b2      	bcc.n	8001bf8 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8001c92:	69fb      	ldr	r3, [r7, #28]
 8001c94:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001c98:	69db      	ldr	r3, [r3, #28]
 8001c9a:	69fa      	ldr	r2, [r7, #28]
 8001c9c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001ca0:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8001ca4:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	7bdb      	ldrb	r3, [r3, #15]
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d016      	beq.n	8001cdc <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8001cae:	69fb      	ldr	r3, [r7, #28]
 8001cb0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001cb4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001cb8:	69fa      	ldr	r2, [r7, #28]
 8001cba:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001cbe:	f043 030b 	orr.w	r3, r3, #11
 8001cc2:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8001cc6:	69fb      	ldr	r3, [r7, #28]
 8001cc8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001ccc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cce:	69fa      	ldr	r2, [r7, #28]
 8001cd0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001cd4:	f043 030b 	orr.w	r3, r3, #11
 8001cd8:	6453      	str	r3, [r2, #68]	@ 0x44
 8001cda:	e015      	b.n	8001d08 <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8001cdc:	69fb      	ldr	r3, [r7, #28]
 8001cde:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001ce2:	695b      	ldr	r3, [r3, #20]
 8001ce4:	69fa      	ldr	r2, [r7, #28]
 8001ce6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001cea:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001cee:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8001cf2:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8001cf4:	69fb      	ldr	r3, [r7, #28]
 8001cf6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001cfa:	691b      	ldr	r3, [r3, #16]
 8001cfc:	69fa      	ldr	r2, [r7, #28]
 8001cfe:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001d02:	f043 030b 	orr.w	r3, r3, #11
 8001d06:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8001d08:	69fb      	ldr	r3, [r7, #28]
 8001d0a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	69fa      	ldr	r2, [r7, #28]
 8001d12:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001d16:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8001d1a:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	6818      	ldr	r0, [r3, #0]
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001d2a:	461a      	mov	r2, r3
 8001d2c:	f002 fe7c 	bl	8004a28 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	695a      	ldr	r2, [r3, #20]
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8001d3e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	4618      	mov	r0, r3
 8001d46:	f002 fdab 	bl	80048a0 <USB_ReadInterrupts>
 8001d4a:	4603      	mov	r3, r0
 8001d4c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001d50:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001d54:	d123      	bne.n	8001d9e <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	f002 fe41 	bl	80049e2 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	4618      	mov	r0, r3
 8001d66:	f001 fef8 	bl	8003b5a <USB_GetDevSpeed>
 8001d6a:	4603      	mov	r3, r0
 8001d6c:	461a      	mov	r2, r3
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681c      	ldr	r4, [r3, #0]
 8001d76:	f000 fda5 	bl	80028c4 <HAL_RCC_GetHCLKFreq>
 8001d7a:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001d80:	461a      	mov	r2, r3
 8001d82:	4620      	mov	r0, r4
 8001d84:	f001 fbfc 	bl	8003580 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8001d88:	6878      	ldr	r0, [r7, #4]
 8001d8a:	f005 f908 	bl	8006f9e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	695a      	ldr	r2, [r3, #20]
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8001d9c:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	4618      	mov	r0, r3
 8001da4:	f002 fd7c 	bl	80048a0 <USB_ReadInterrupts>
 8001da8:	4603      	mov	r3, r0
 8001daa:	f003 0308 	and.w	r3, r3, #8
 8001dae:	2b08      	cmp	r3, #8
 8001db0:	d10a      	bne.n	8001dc8 <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8001db2:	6878      	ldr	r0, [r7, #4]
 8001db4:	f005 f8e5 	bl	8006f82 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	695a      	ldr	r2, [r3, #20]
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f002 0208 	and.w	r2, r2, #8
 8001dc6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	4618      	mov	r0, r3
 8001dce:	f002 fd67 	bl	80048a0 <USB_ReadInterrupts>
 8001dd2:	4603      	mov	r3, r0
 8001dd4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001dd8:	2b80      	cmp	r3, #128	@ 0x80
 8001dda:	d123      	bne.n	8001e24 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8001ddc:	6a3b      	ldr	r3, [r7, #32]
 8001dde:	699b      	ldr	r3, [r3, #24]
 8001de0:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8001de4:	6a3b      	ldr	r3, [r7, #32]
 8001de6:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001de8:	2301      	movs	r3, #1
 8001dea:	627b      	str	r3, [r7, #36]	@ 0x24
 8001dec:	e014      	b.n	8001e18 <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8001dee:	6879      	ldr	r1, [r7, #4]
 8001df0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001df2:	4613      	mov	r3, r2
 8001df4:	00db      	lsls	r3, r3, #3
 8001df6:	4413      	add	r3, r2
 8001df8:	009b      	lsls	r3, r3, #2
 8001dfa:	440b      	add	r3, r1
 8001dfc:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8001e00:	781b      	ldrb	r3, [r3, #0]
 8001e02:	2b01      	cmp	r3, #1
 8001e04:	d105      	bne.n	8001e12 <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8001e06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e08:	b2db      	uxtb	r3, r3
 8001e0a:	4619      	mov	r1, r3
 8001e0c:	6878      	ldr	r0, [r7, #4]
 8001e0e:	f000 fb0a 	bl	8002426 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001e12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e14:	3301      	adds	r3, #1
 8001e16:	627b      	str	r3, [r7, #36]	@ 0x24
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	791b      	ldrb	r3, [r3, #4]
 8001e1c:	461a      	mov	r2, r3
 8001e1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e20:	4293      	cmp	r3, r2
 8001e22:	d3e4      	bcc.n	8001dee <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	4618      	mov	r0, r3
 8001e2a:	f002 fd39 	bl	80048a0 <USB_ReadInterrupts>
 8001e2e:	4603      	mov	r3, r0
 8001e30:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001e34:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8001e38:	d13c      	bne.n	8001eb4 <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001e3a:	2301      	movs	r3, #1
 8001e3c:	627b      	str	r3, [r7, #36]	@ 0x24
 8001e3e:	e02b      	b.n	8001e98 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8001e40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e42:	015a      	lsls	r2, r3, #5
 8001e44:	69fb      	ldr	r3, [r7, #28]
 8001e46:	4413      	add	r3, r2
 8001e48:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001e50:	6879      	ldr	r1, [r7, #4]
 8001e52:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001e54:	4613      	mov	r3, r2
 8001e56:	00db      	lsls	r3, r3, #3
 8001e58:	4413      	add	r3, r2
 8001e5a:	009b      	lsls	r3, r3, #2
 8001e5c:	440b      	add	r3, r1
 8001e5e:	3318      	adds	r3, #24
 8001e60:	781b      	ldrb	r3, [r3, #0]
 8001e62:	2b01      	cmp	r3, #1
 8001e64:	d115      	bne.n	8001e92 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8001e66:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	da12      	bge.n	8001e92 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8001e6c:	6879      	ldr	r1, [r7, #4]
 8001e6e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001e70:	4613      	mov	r3, r2
 8001e72:	00db      	lsls	r3, r3, #3
 8001e74:	4413      	add	r3, r2
 8001e76:	009b      	lsls	r3, r3, #2
 8001e78:	440b      	add	r3, r1
 8001e7a:	3317      	adds	r3, #23
 8001e7c:	2201      	movs	r2, #1
 8001e7e:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8001e80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e82:	b2db      	uxtb	r3, r3
 8001e84:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001e88:	b2db      	uxtb	r3, r3
 8001e8a:	4619      	mov	r1, r3
 8001e8c:	6878      	ldr	r0, [r7, #4]
 8001e8e:	f000 faca 	bl	8002426 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001e92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e94:	3301      	adds	r3, #1
 8001e96:	627b      	str	r3, [r7, #36]	@ 0x24
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	791b      	ldrb	r3, [r3, #4]
 8001e9c:	461a      	mov	r2, r3
 8001e9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ea0:	4293      	cmp	r3, r2
 8001ea2:	d3cd      	bcc.n	8001e40 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	695a      	ldr	r2, [r3, #20]
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8001eb2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	4618      	mov	r0, r3
 8001eba:	f002 fcf1 	bl	80048a0 <USB_ReadInterrupts>
 8001ebe:	4603      	mov	r3, r0
 8001ec0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001ec4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8001ec8:	d156      	bne.n	8001f78 <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001eca:	2301      	movs	r3, #1
 8001ecc:	627b      	str	r3, [r7, #36]	@ 0x24
 8001ece:	e045      	b.n	8001f5c <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8001ed0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ed2:	015a      	lsls	r2, r3, #5
 8001ed4:	69fb      	ldr	r3, [r7, #28]
 8001ed6:	4413      	add	r3, r2
 8001ed8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001ee0:	6879      	ldr	r1, [r7, #4]
 8001ee2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001ee4:	4613      	mov	r3, r2
 8001ee6:	00db      	lsls	r3, r3, #3
 8001ee8:	4413      	add	r3, r2
 8001eea:	009b      	lsls	r3, r3, #2
 8001eec:	440b      	add	r3, r1
 8001eee:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8001ef2:	781b      	ldrb	r3, [r3, #0]
 8001ef4:	2b01      	cmp	r3, #1
 8001ef6:	d12e      	bne.n	8001f56 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8001ef8:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	da2b      	bge.n	8001f56 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8001efe:	69bb      	ldr	r3, [r7, #24]
 8001f00:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8001f0a:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8001f0e:	429a      	cmp	r2, r3
 8001f10:	d121      	bne.n	8001f56 <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8001f12:	6879      	ldr	r1, [r7, #4]
 8001f14:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001f16:	4613      	mov	r3, r2
 8001f18:	00db      	lsls	r3, r3, #3
 8001f1a:	4413      	add	r3, r2
 8001f1c:	009b      	lsls	r3, r3, #2
 8001f1e:	440b      	add	r3, r1
 8001f20:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8001f24:	2201      	movs	r2, #1
 8001f26:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8001f28:	6a3b      	ldr	r3, [r7, #32]
 8001f2a:	699b      	ldr	r3, [r3, #24]
 8001f2c:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8001f30:	6a3b      	ldr	r3, [r7, #32]
 8001f32:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8001f34:	6a3b      	ldr	r3, [r7, #32]
 8001f36:	695b      	ldr	r3, [r3, #20]
 8001f38:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d10a      	bne.n	8001f56 <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8001f40:	69fb      	ldr	r3, [r7, #28]
 8001f42:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001f46:	685b      	ldr	r3, [r3, #4]
 8001f48:	69fa      	ldr	r2, [r7, #28]
 8001f4a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001f4e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001f52:	6053      	str	r3, [r2, #4]
            break;
 8001f54:	e008      	b.n	8001f68 <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001f56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f58:	3301      	adds	r3, #1
 8001f5a:	627b      	str	r3, [r7, #36]	@ 0x24
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	791b      	ldrb	r3, [r3, #4]
 8001f60:	461a      	mov	r2, r3
 8001f62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f64:	4293      	cmp	r3, r2
 8001f66:	d3b3      	bcc.n	8001ed0 <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	695a      	ldr	r2, [r3, #20]
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8001f76:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	f002 fc8f 	bl	80048a0 <USB_ReadInterrupts>
 8001f82:	4603      	mov	r3, r0
 8001f84:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8001f88:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001f8c:	d10a      	bne.n	8001fa4 <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8001f8e:	6878      	ldr	r0, [r7, #4]
 8001f90:	f005 f886 	bl	80070a0 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	695a      	ldr	r2, [r3, #20]
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8001fa2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	4618      	mov	r0, r3
 8001faa:	f002 fc79 	bl	80048a0 <USB_ReadInterrupts>
 8001fae:	4603      	mov	r3, r0
 8001fb0:	f003 0304 	and.w	r3, r3, #4
 8001fb4:	2b04      	cmp	r3, #4
 8001fb6:	d115      	bne.n	8001fe4 <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	685b      	ldr	r3, [r3, #4]
 8001fbe:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8001fc0:	69bb      	ldr	r3, [r7, #24]
 8001fc2:	f003 0304 	and.w	r3, r3, #4
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d002      	beq.n	8001fd0 <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8001fca:	6878      	ldr	r0, [r7, #4]
 8001fcc:	f005 f876 	bl	80070bc <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	6859      	ldr	r1, [r3, #4]
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	69ba      	ldr	r2, [r7, #24]
 8001fdc:	430a      	orrs	r2, r1
 8001fde:	605a      	str	r2, [r3, #4]
 8001fe0:	e000      	b.n	8001fe4 <HAL_PCD_IRQHandler+0x93c>
      return;
 8001fe2:	bf00      	nop
    }
  }
}
 8001fe4:	3734      	adds	r7, #52	@ 0x34
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	bd90      	pop	{r4, r7, pc}

08001fea <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001fea:	b580      	push	{r7, lr}
 8001fec:	b082      	sub	sp, #8
 8001fee:	af00      	add	r7, sp, #0
 8001ff0:	6078      	str	r0, [r7, #4]
 8001ff2:	460b      	mov	r3, r1
 8001ff4:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8001ffc:	2b01      	cmp	r3, #1
 8001ffe:	d101      	bne.n	8002004 <HAL_PCD_SetAddress+0x1a>
 8002000:	2302      	movs	r3, #2
 8002002:	e012      	b.n	800202a <HAL_PCD_SetAddress+0x40>
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	2201      	movs	r2, #1
 8002008:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	78fa      	ldrb	r2, [r7, #3]
 8002010:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	78fa      	ldrb	r2, [r7, #3]
 8002018:	4611      	mov	r1, r2
 800201a:	4618      	mov	r0, r3
 800201c:	f002 fbd8 	bl	80047d0 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	2200      	movs	r2, #0
 8002024:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8002028:	2300      	movs	r3, #0
}
 800202a:	4618      	mov	r0, r3
 800202c:	3708      	adds	r7, #8
 800202e:	46bd      	mov	sp, r7
 8002030:	bd80      	pop	{r7, pc}

08002032 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002032:	b580      	push	{r7, lr}
 8002034:	b084      	sub	sp, #16
 8002036:	af00      	add	r7, sp, #0
 8002038:	6078      	str	r0, [r7, #4]
 800203a:	4608      	mov	r0, r1
 800203c:	4611      	mov	r1, r2
 800203e:	461a      	mov	r2, r3
 8002040:	4603      	mov	r3, r0
 8002042:	70fb      	strb	r3, [r7, #3]
 8002044:	460b      	mov	r3, r1
 8002046:	803b      	strh	r3, [r7, #0]
 8002048:	4613      	mov	r3, r2
 800204a:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 800204c:	2300      	movs	r3, #0
 800204e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002050:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002054:	2b00      	cmp	r3, #0
 8002056:	da0f      	bge.n	8002078 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002058:	78fb      	ldrb	r3, [r7, #3]
 800205a:	f003 020f 	and.w	r2, r3, #15
 800205e:	4613      	mov	r3, r2
 8002060:	00db      	lsls	r3, r3, #3
 8002062:	4413      	add	r3, r2
 8002064:	009b      	lsls	r3, r3, #2
 8002066:	3310      	adds	r3, #16
 8002068:	687a      	ldr	r2, [r7, #4]
 800206a:	4413      	add	r3, r2
 800206c:	3304      	adds	r3, #4
 800206e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	2201      	movs	r2, #1
 8002074:	705a      	strb	r2, [r3, #1]
 8002076:	e00f      	b.n	8002098 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002078:	78fb      	ldrb	r3, [r7, #3]
 800207a:	f003 020f 	and.w	r2, r3, #15
 800207e:	4613      	mov	r3, r2
 8002080:	00db      	lsls	r3, r3, #3
 8002082:	4413      	add	r3, r2
 8002084:	009b      	lsls	r3, r3, #2
 8002086:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800208a:	687a      	ldr	r2, [r7, #4]
 800208c:	4413      	add	r3, r2
 800208e:	3304      	adds	r3, #4
 8002090:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	2200      	movs	r2, #0
 8002096:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002098:	78fb      	ldrb	r3, [r7, #3]
 800209a:	f003 030f 	and.w	r3, r3, #15
 800209e:	b2da      	uxtb	r2, r3
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 80020a4:	883b      	ldrh	r3, [r7, #0]
 80020a6:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	78ba      	ldrb	r2, [r7, #2]
 80020b2:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	785b      	ldrb	r3, [r3, #1]
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d004      	beq.n	80020c6 <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	781b      	ldrb	r3, [r3, #0]
 80020c0:	461a      	mov	r2, r3
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80020c6:	78bb      	ldrb	r3, [r7, #2]
 80020c8:	2b02      	cmp	r3, #2
 80020ca:	d102      	bne.n	80020d2 <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	2200      	movs	r2, #0
 80020d0:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80020d8:	2b01      	cmp	r3, #1
 80020da:	d101      	bne.n	80020e0 <HAL_PCD_EP_Open+0xae>
 80020dc:	2302      	movs	r3, #2
 80020de:	e00e      	b.n	80020fe <HAL_PCD_EP_Open+0xcc>
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	2201      	movs	r2, #1
 80020e4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	68f9      	ldr	r1, [r7, #12]
 80020ee:	4618      	mov	r0, r3
 80020f0:	f001 fd58 	bl	8003ba4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	2200      	movs	r2, #0
 80020f8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 80020fc:	7afb      	ldrb	r3, [r7, #11]
}
 80020fe:	4618      	mov	r0, r3
 8002100:	3710      	adds	r7, #16
 8002102:	46bd      	mov	sp, r7
 8002104:	bd80      	pop	{r7, pc}

08002106 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002106:	b580      	push	{r7, lr}
 8002108:	b084      	sub	sp, #16
 800210a:	af00      	add	r7, sp, #0
 800210c:	6078      	str	r0, [r7, #4]
 800210e:	460b      	mov	r3, r1
 8002110:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002112:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002116:	2b00      	cmp	r3, #0
 8002118:	da0f      	bge.n	800213a <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800211a:	78fb      	ldrb	r3, [r7, #3]
 800211c:	f003 020f 	and.w	r2, r3, #15
 8002120:	4613      	mov	r3, r2
 8002122:	00db      	lsls	r3, r3, #3
 8002124:	4413      	add	r3, r2
 8002126:	009b      	lsls	r3, r3, #2
 8002128:	3310      	adds	r3, #16
 800212a:	687a      	ldr	r2, [r7, #4]
 800212c:	4413      	add	r3, r2
 800212e:	3304      	adds	r3, #4
 8002130:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	2201      	movs	r2, #1
 8002136:	705a      	strb	r2, [r3, #1]
 8002138:	e00f      	b.n	800215a <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800213a:	78fb      	ldrb	r3, [r7, #3]
 800213c:	f003 020f 	and.w	r2, r3, #15
 8002140:	4613      	mov	r3, r2
 8002142:	00db      	lsls	r3, r3, #3
 8002144:	4413      	add	r3, r2
 8002146:	009b      	lsls	r3, r3, #2
 8002148:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800214c:	687a      	ldr	r2, [r7, #4]
 800214e:	4413      	add	r3, r2
 8002150:	3304      	adds	r3, #4
 8002152:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	2200      	movs	r2, #0
 8002158:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 800215a:	78fb      	ldrb	r3, [r7, #3]
 800215c:	f003 030f 	and.w	r3, r3, #15
 8002160:	b2da      	uxtb	r2, r3
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800216c:	2b01      	cmp	r3, #1
 800216e:	d101      	bne.n	8002174 <HAL_PCD_EP_Close+0x6e>
 8002170:	2302      	movs	r3, #2
 8002172:	e00e      	b.n	8002192 <HAL_PCD_EP_Close+0x8c>
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	2201      	movs	r2, #1
 8002178:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	68f9      	ldr	r1, [r7, #12]
 8002182:	4618      	mov	r0, r3
 8002184:	f001 fd96 	bl	8003cb4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	2200      	movs	r2, #0
 800218c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8002190:	2300      	movs	r3, #0
}
 8002192:	4618      	mov	r0, r3
 8002194:	3710      	adds	r7, #16
 8002196:	46bd      	mov	sp, r7
 8002198:	bd80      	pop	{r7, pc}

0800219a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800219a:	b580      	push	{r7, lr}
 800219c:	b086      	sub	sp, #24
 800219e:	af00      	add	r7, sp, #0
 80021a0:	60f8      	str	r0, [r7, #12]
 80021a2:	607a      	str	r2, [r7, #4]
 80021a4:	603b      	str	r3, [r7, #0]
 80021a6:	460b      	mov	r3, r1
 80021a8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80021aa:	7afb      	ldrb	r3, [r7, #11]
 80021ac:	f003 020f 	and.w	r2, r3, #15
 80021b0:	4613      	mov	r3, r2
 80021b2:	00db      	lsls	r3, r3, #3
 80021b4:	4413      	add	r3, r2
 80021b6:	009b      	lsls	r3, r3, #2
 80021b8:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80021bc:	68fa      	ldr	r2, [r7, #12]
 80021be:	4413      	add	r3, r2
 80021c0:	3304      	adds	r3, #4
 80021c2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80021c4:	697b      	ldr	r3, [r7, #20]
 80021c6:	687a      	ldr	r2, [r7, #4]
 80021c8:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80021ca:	697b      	ldr	r3, [r7, #20]
 80021cc:	683a      	ldr	r2, [r7, #0]
 80021ce:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80021d0:	697b      	ldr	r3, [r7, #20]
 80021d2:	2200      	movs	r2, #0
 80021d4:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 80021d6:	697b      	ldr	r3, [r7, #20]
 80021d8:	2200      	movs	r2, #0
 80021da:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80021dc:	7afb      	ldrb	r3, [r7, #11]
 80021de:	f003 030f 	and.w	r3, r3, #15
 80021e2:	b2da      	uxtb	r2, r3
 80021e4:	697b      	ldr	r3, [r7, #20]
 80021e6:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	799b      	ldrb	r3, [r3, #6]
 80021ec:	2b01      	cmp	r3, #1
 80021ee:	d102      	bne.n	80021f6 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80021f0:	687a      	ldr	r2, [r7, #4]
 80021f2:	697b      	ldr	r3, [r7, #20]
 80021f4:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	6818      	ldr	r0, [r3, #0]
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	799b      	ldrb	r3, [r3, #6]
 80021fe:	461a      	mov	r2, r3
 8002200:	6979      	ldr	r1, [r7, #20]
 8002202:	f001 fe33 	bl	8003e6c <USB_EPStartXfer>

  return HAL_OK;
 8002206:	2300      	movs	r3, #0
}
 8002208:	4618      	mov	r0, r3
 800220a:	3718      	adds	r7, #24
 800220c:	46bd      	mov	sp, r7
 800220e:	bd80      	pop	{r7, pc}

08002210 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8002210:	b480      	push	{r7}
 8002212:	b083      	sub	sp, #12
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]
 8002218:	460b      	mov	r3, r1
 800221a:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800221c:	78fb      	ldrb	r3, [r7, #3]
 800221e:	f003 020f 	and.w	r2, r3, #15
 8002222:	6879      	ldr	r1, [r7, #4]
 8002224:	4613      	mov	r3, r2
 8002226:	00db      	lsls	r3, r3, #3
 8002228:	4413      	add	r3, r2
 800222a:	009b      	lsls	r3, r3, #2
 800222c:	440b      	add	r3, r1
 800222e:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8002232:	681b      	ldr	r3, [r3, #0]
}
 8002234:	4618      	mov	r0, r3
 8002236:	370c      	adds	r7, #12
 8002238:	46bd      	mov	sp, r7
 800223a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223e:	4770      	bx	lr

08002240 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002240:	b580      	push	{r7, lr}
 8002242:	b086      	sub	sp, #24
 8002244:	af00      	add	r7, sp, #0
 8002246:	60f8      	str	r0, [r7, #12]
 8002248:	607a      	str	r2, [r7, #4]
 800224a:	603b      	str	r3, [r7, #0]
 800224c:	460b      	mov	r3, r1
 800224e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002250:	7afb      	ldrb	r3, [r7, #11]
 8002252:	f003 020f 	and.w	r2, r3, #15
 8002256:	4613      	mov	r3, r2
 8002258:	00db      	lsls	r3, r3, #3
 800225a:	4413      	add	r3, r2
 800225c:	009b      	lsls	r3, r3, #2
 800225e:	3310      	adds	r3, #16
 8002260:	68fa      	ldr	r2, [r7, #12]
 8002262:	4413      	add	r3, r2
 8002264:	3304      	adds	r3, #4
 8002266:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002268:	697b      	ldr	r3, [r7, #20]
 800226a:	687a      	ldr	r2, [r7, #4]
 800226c:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800226e:	697b      	ldr	r3, [r7, #20]
 8002270:	683a      	ldr	r2, [r7, #0]
 8002272:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8002274:	697b      	ldr	r3, [r7, #20]
 8002276:	2200      	movs	r2, #0
 8002278:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 800227a:	697b      	ldr	r3, [r7, #20]
 800227c:	2201      	movs	r2, #1
 800227e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002280:	7afb      	ldrb	r3, [r7, #11]
 8002282:	f003 030f 	and.w	r3, r3, #15
 8002286:	b2da      	uxtb	r2, r3
 8002288:	697b      	ldr	r3, [r7, #20]
 800228a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	799b      	ldrb	r3, [r3, #6]
 8002290:	2b01      	cmp	r3, #1
 8002292:	d102      	bne.n	800229a <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002294:	687a      	ldr	r2, [r7, #4]
 8002296:	697b      	ldr	r3, [r7, #20]
 8002298:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	6818      	ldr	r0, [r3, #0]
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	799b      	ldrb	r3, [r3, #6]
 80022a2:	461a      	mov	r2, r3
 80022a4:	6979      	ldr	r1, [r7, #20]
 80022a6:	f001 fde1 	bl	8003e6c <USB_EPStartXfer>

  return HAL_OK;
 80022aa:	2300      	movs	r3, #0
}
 80022ac:	4618      	mov	r0, r3
 80022ae:	3718      	adds	r7, #24
 80022b0:	46bd      	mov	sp, r7
 80022b2:	bd80      	pop	{r7, pc}

080022b4 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80022b4:	b580      	push	{r7, lr}
 80022b6:	b084      	sub	sp, #16
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]
 80022bc:	460b      	mov	r3, r1
 80022be:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80022c0:	78fb      	ldrb	r3, [r7, #3]
 80022c2:	f003 030f 	and.w	r3, r3, #15
 80022c6:	687a      	ldr	r2, [r7, #4]
 80022c8:	7912      	ldrb	r2, [r2, #4]
 80022ca:	4293      	cmp	r3, r2
 80022cc:	d901      	bls.n	80022d2 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80022ce:	2301      	movs	r3, #1
 80022d0:	e04f      	b.n	8002372 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80022d2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	da0f      	bge.n	80022fa <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80022da:	78fb      	ldrb	r3, [r7, #3]
 80022dc:	f003 020f 	and.w	r2, r3, #15
 80022e0:	4613      	mov	r3, r2
 80022e2:	00db      	lsls	r3, r3, #3
 80022e4:	4413      	add	r3, r2
 80022e6:	009b      	lsls	r3, r3, #2
 80022e8:	3310      	adds	r3, #16
 80022ea:	687a      	ldr	r2, [r7, #4]
 80022ec:	4413      	add	r3, r2
 80022ee:	3304      	adds	r3, #4
 80022f0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	2201      	movs	r2, #1
 80022f6:	705a      	strb	r2, [r3, #1]
 80022f8:	e00d      	b.n	8002316 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80022fa:	78fa      	ldrb	r2, [r7, #3]
 80022fc:	4613      	mov	r3, r2
 80022fe:	00db      	lsls	r3, r3, #3
 8002300:	4413      	add	r3, r2
 8002302:	009b      	lsls	r3, r3, #2
 8002304:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002308:	687a      	ldr	r2, [r7, #4]
 800230a:	4413      	add	r3, r2
 800230c:	3304      	adds	r3, #4
 800230e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	2200      	movs	r2, #0
 8002314:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	2201      	movs	r2, #1
 800231a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800231c:	78fb      	ldrb	r3, [r7, #3]
 800231e:	f003 030f 	and.w	r3, r3, #15
 8002322:	b2da      	uxtb	r2, r3
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800232e:	2b01      	cmp	r3, #1
 8002330:	d101      	bne.n	8002336 <HAL_PCD_EP_SetStall+0x82>
 8002332:	2302      	movs	r3, #2
 8002334:	e01d      	b.n	8002372 <HAL_PCD_EP_SetStall+0xbe>
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	2201      	movs	r2, #1
 800233a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	68f9      	ldr	r1, [r7, #12]
 8002344:	4618      	mov	r0, r3
 8002346:	f002 f96f 	bl	8004628 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800234a:	78fb      	ldrb	r3, [r7, #3]
 800234c:	f003 030f 	and.w	r3, r3, #15
 8002350:	2b00      	cmp	r3, #0
 8002352:	d109      	bne.n	8002368 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	6818      	ldr	r0, [r3, #0]
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	7999      	ldrb	r1, [r3, #6]
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002362:	461a      	mov	r2, r3
 8002364:	f002 fb60 	bl	8004a28 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	2200      	movs	r2, #0
 800236c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8002370:	2300      	movs	r3, #0
}
 8002372:	4618      	mov	r0, r3
 8002374:	3710      	adds	r7, #16
 8002376:	46bd      	mov	sp, r7
 8002378:	bd80      	pop	{r7, pc}

0800237a <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800237a:	b580      	push	{r7, lr}
 800237c:	b084      	sub	sp, #16
 800237e:	af00      	add	r7, sp, #0
 8002380:	6078      	str	r0, [r7, #4]
 8002382:	460b      	mov	r3, r1
 8002384:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002386:	78fb      	ldrb	r3, [r7, #3]
 8002388:	f003 030f 	and.w	r3, r3, #15
 800238c:	687a      	ldr	r2, [r7, #4]
 800238e:	7912      	ldrb	r2, [r2, #4]
 8002390:	4293      	cmp	r3, r2
 8002392:	d901      	bls.n	8002398 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002394:	2301      	movs	r3, #1
 8002396:	e042      	b.n	800241e <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002398:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800239c:	2b00      	cmp	r3, #0
 800239e:	da0f      	bge.n	80023c0 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80023a0:	78fb      	ldrb	r3, [r7, #3]
 80023a2:	f003 020f 	and.w	r2, r3, #15
 80023a6:	4613      	mov	r3, r2
 80023a8:	00db      	lsls	r3, r3, #3
 80023aa:	4413      	add	r3, r2
 80023ac:	009b      	lsls	r3, r3, #2
 80023ae:	3310      	adds	r3, #16
 80023b0:	687a      	ldr	r2, [r7, #4]
 80023b2:	4413      	add	r3, r2
 80023b4:	3304      	adds	r3, #4
 80023b6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	2201      	movs	r2, #1
 80023bc:	705a      	strb	r2, [r3, #1]
 80023be:	e00f      	b.n	80023e0 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80023c0:	78fb      	ldrb	r3, [r7, #3]
 80023c2:	f003 020f 	and.w	r2, r3, #15
 80023c6:	4613      	mov	r3, r2
 80023c8:	00db      	lsls	r3, r3, #3
 80023ca:	4413      	add	r3, r2
 80023cc:	009b      	lsls	r3, r3, #2
 80023ce:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80023d2:	687a      	ldr	r2, [r7, #4]
 80023d4:	4413      	add	r3, r2
 80023d6:	3304      	adds	r3, #4
 80023d8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	2200      	movs	r2, #0
 80023de:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	2200      	movs	r2, #0
 80023e4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80023e6:	78fb      	ldrb	r3, [r7, #3]
 80023e8:	f003 030f 	and.w	r3, r3, #15
 80023ec:	b2da      	uxtb	r2, r3
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80023f8:	2b01      	cmp	r3, #1
 80023fa:	d101      	bne.n	8002400 <HAL_PCD_EP_ClrStall+0x86>
 80023fc:	2302      	movs	r3, #2
 80023fe:	e00e      	b.n	800241e <HAL_PCD_EP_ClrStall+0xa4>
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	2201      	movs	r2, #1
 8002404:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	68f9      	ldr	r1, [r7, #12]
 800240e:	4618      	mov	r0, r3
 8002410:	f002 f978 	bl	8004704 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	2200      	movs	r2, #0
 8002418:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800241c:	2300      	movs	r3, #0
}
 800241e:	4618      	mov	r0, r3
 8002420:	3710      	adds	r7, #16
 8002422:	46bd      	mov	sp, r7
 8002424:	bd80      	pop	{r7, pc}

08002426 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002426:	b580      	push	{r7, lr}
 8002428:	b084      	sub	sp, #16
 800242a:	af00      	add	r7, sp, #0
 800242c:	6078      	str	r0, [r7, #4]
 800242e:	460b      	mov	r3, r1
 8002430:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8002432:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002436:	2b00      	cmp	r3, #0
 8002438:	da0c      	bge.n	8002454 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800243a:	78fb      	ldrb	r3, [r7, #3]
 800243c:	f003 020f 	and.w	r2, r3, #15
 8002440:	4613      	mov	r3, r2
 8002442:	00db      	lsls	r3, r3, #3
 8002444:	4413      	add	r3, r2
 8002446:	009b      	lsls	r3, r3, #2
 8002448:	3310      	adds	r3, #16
 800244a:	687a      	ldr	r2, [r7, #4]
 800244c:	4413      	add	r3, r2
 800244e:	3304      	adds	r3, #4
 8002450:	60fb      	str	r3, [r7, #12]
 8002452:	e00c      	b.n	800246e <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002454:	78fb      	ldrb	r3, [r7, #3]
 8002456:	f003 020f 	and.w	r2, r3, #15
 800245a:	4613      	mov	r3, r2
 800245c:	00db      	lsls	r3, r3, #3
 800245e:	4413      	add	r3, r2
 8002460:	009b      	lsls	r3, r3, #2
 8002462:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002466:	687a      	ldr	r2, [r7, #4]
 8002468:	4413      	add	r3, r2
 800246a:	3304      	adds	r3, #4
 800246c:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	68f9      	ldr	r1, [r7, #12]
 8002474:	4618      	mov	r0, r3
 8002476:	f001 ff97 	bl	80043a8 <USB_EPStopXfer>
 800247a:	4603      	mov	r3, r0
 800247c:	72fb      	strb	r3, [r7, #11]

  return ret;
 800247e:	7afb      	ldrb	r3, [r7, #11]
}
 8002480:	4618      	mov	r0, r3
 8002482:	3710      	adds	r7, #16
 8002484:	46bd      	mov	sp, r7
 8002486:	bd80      	pop	{r7, pc}

08002488 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	b08a      	sub	sp, #40	@ 0x28
 800248c:	af02      	add	r7, sp, #8
 800248e:	6078      	str	r0, [r7, #4]
 8002490:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002498:	697b      	ldr	r3, [r7, #20]
 800249a:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800249c:	683a      	ldr	r2, [r7, #0]
 800249e:	4613      	mov	r3, r2
 80024a0:	00db      	lsls	r3, r3, #3
 80024a2:	4413      	add	r3, r2
 80024a4:	009b      	lsls	r3, r3, #2
 80024a6:	3310      	adds	r3, #16
 80024a8:	687a      	ldr	r2, [r7, #4]
 80024aa:	4413      	add	r3, r2
 80024ac:	3304      	adds	r3, #4
 80024ae:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	695a      	ldr	r2, [r3, #20]
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	691b      	ldr	r3, [r3, #16]
 80024b8:	429a      	cmp	r2, r3
 80024ba:	d901      	bls.n	80024c0 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80024bc:	2301      	movs	r3, #1
 80024be:	e06b      	b.n	8002598 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	691a      	ldr	r2, [r3, #16]
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	695b      	ldr	r3, [r3, #20]
 80024c8:	1ad3      	subs	r3, r2, r3
 80024ca:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	689b      	ldr	r3, [r3, #8]
 80024d0:	69fa      	ldr	r2, [r7, #28]
 80024d2:	429a      	cmp	r2, r3
 80024d4:	d902      	bls.n	80024dc <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	689b      	ldr	r3, [r3, #8]
 80024da:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80024dc:	69fb      	ldr	r3, [r7, #28]
 80024de:	3303      	adds	r3, #3
 80024e0:	089b      	lsrs	r3, r3, #2
 80024e2:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80024e4:	e02a      	b.n	800253c <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	691a      	ldr	r2, [r3, #16]
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	695b      	ldr	r3, [r3, #20]
 80024ee:	1ad3      	subs	r3, r2, r3
 80024f0:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	689b      	ldr	r3, [r3, #8]
 80024f6:	69fa      	ldr	r2, [r7, #28]
 80024f8:	429a      	cmp	r2, r3
 80024fa:	d902      	bls.n	8002502 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	689b      	ldr	r3, [r3, #8]
 8002500:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002502:	69fb      	ldr	r3, [r7, #28]
 8002504:	3303      	adds	r3, #3
 8002506:	089b      	lsrs	r3, r3, #2
 8002508:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	68d9      	ldr	r1, [r3, #12]
 800250e:	683b      	ldr	r3, [r7, #0]
 8002510:	b2da      	uxtb	r2, r3
 8002512:	69fb      	ldr	r3, [r7, #28]
 8002514:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800251a:	9300      	str	r3, [sp, #0]
 800251c:	4603      	mov	r3, r0
 800251e:	6978      	ldr	r0, [r7, #20]
 8002520:	f001 ffec 	bl	80044fc <USB_WritePacket>

    ep->xfer_buff  += len;
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	68da      	ldr	r2, [r3, #12]
 8002528:	69fb      	ldr	r3, [r7, #28]
 800252a:	441a      	add	r2, r3
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	695a      	ldr	r2, [r3, #20]
 8002534:	69fb      	ldr	r3, [r7, #28]
 8002536:	441a      	add	r2, r3
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800253c:	683b      	ldr	r3, [r7, #0]
 800253e:	015a      	lsls	r2, r3, #5
 8002540:	693b      	ldr	r3, [r7, #16]
 8002542:	4413      	add	r3, r2
 8002544:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002548:	699b      	ldr	r3, [r3, #24]
 800254a:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800254c:	69ba      	ldr	r2, [r7, #24]
 800254e:	429a      	cmp	r2, r3
 8002550:	d809      	bhi.n	8002566 <PCD_WriteEmptyTxFifo+0xde>
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	695a      	ldr	r2, [r3, #20]
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800255a:	429a      	cmp	r2, r3
 800255c:	d203      	bcs.n	8002566 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	691b      	ldr	r3, [r3, #16]
 8002562:	2b00      	cmp	r3, #0
 8002564:	d1bf      	bne.n	80024e6 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	691a      	ldr	r2, [r3, #16]
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	695b      	ldr	r3, [r3, #20]
 800256e:	429a      	cmp	r2, r3
 8002570:	d811      	bhi.n	8002596 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002572:	683b      	ldr	r3, [r7, #0]
 8002574:	f003 030f 	and.w	r3, r3, #15
 8002578:	2201      	movs	r2, #1
 800257a:	fa02 f303 	lsl.w	r3, r2, r3
 800257e:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002580:	693b      	ldr	r3, [r7, #16]
 8002582:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002586:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002588:	68bb      	ldr	r3, [r7, #8]
 800258a:	43db      	mvns	r3, r3
 800258c:	6939      	ldr	r1, [r7, #16]
 800258e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8002592:	4013      	ands	r3, r2
 8002594:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8002596:	2300      	movs	r3, #0
}
 8002598:	4618      	mov	r0, r3
 800259a:	3720      	adds	r7, #32
 800259c:	46bd      	mov	sp, r7
 800259e:	bd80      	pop	{r7, pc}

080025a0 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80025a0:	b580      	push	{r7, lr}
 80025a2:	b088      	sub	sp, #32
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	6078      	str	r0, [r7, #4]
 80025a8:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80025b0:	69fb      	ldr	r3, [r7, #28]
 80025b2:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80025b4:	69fb      	ldr	r3, [r7, #28]
 80025b6:	333c      	adds	r3, #60	@ 0x3c
 80025b8:	3304      	adds	r3, #4
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80025be:	683b      	ldr	r3, [r7, #0]
 80025c0:	015a      	lsls	r2, r3, #5
 80025c2:	69bb      	ldr	r3, [r7, #24]
 80025c4:	4413      	add	r3, r2
 80025c6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80025ca:	689b      	ldr	r3, [r3, #8]
 80025cc:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	799b      	ldrb	r3, [r3, #6]
 80025d2:	2b01      	cmp	r3, #1
 80025d4:	d17b      	bne.n	80026ce <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80025d6:	693b      	ldr	r3, [r7, #16]
 80025d8:	f003 0308 	and.w	r3, r3, #8
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d015      	beq.n	800260c <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80025e0:	697b      	ldr	r3, [r7, #20]
 80025e2:	4a61      	ldr	r2, [pc, #388]	@ (8002768 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80025e4:	4293      	cmp	r3, r2
 80025e6:	f240 80b9 	bls.w	800275c <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80025ea:	693b      	ldr	r3, [r7, #16]
 80025ec:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	f000 80b3 	beq.w	800275c <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80025f6:	683b      	ldr	r3, [r7, #0]
 80025f8:	015a      	lsls	r2, r3, #5
 80025fa:	69bb      	ldr	r3, [r7, #24]
 80025fc:	4413      	add	r3, r2
 80025fe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002602:	461a      	mov	r2, r3
 8002604:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002608:	6093      	str	r3, [r2, #8]
 800260a:	e0a7      	b.n	800275c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800260c:	693b      	ldr	r3, [r7, #16]
 800260e:	f003 0320 	and.w	r3, r3, #32
 8002612:	2b00      	cmp	r3, #0
 8002614:	d009      	beq.n	800262a <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002616:	683b      	ldr	r3, [r7, #0]
 8002618:	015a      	lsls	r2, r3, #5
 800261a:	69bb      	ldr	r3, [r7, #24]
 800261c:	4413      	add	r3, r2
 800261e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002622:	461a      	mov	r2, r3
 8002624:	2320      	movs	r3, #32
 8002626:	6093      	str	r3, [r2, #8]
 8002628:	e098      	b.n	800275c <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800262a:	693b      	ldr	r3, [r7, #16]
 800262c:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8002630:	2b00      	cmp	r3, #0
 8002632:	f040 8093 	bne.w	800275c <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002636:	697b      	ldr	r3, [r7, #20]
 8002638:	4a4b      	ldr	r2, [pc, #300]	@ (8002768 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800263a:	4293      	cmp	r3, r2
 800263c:	d90f      	bls.n	800265e <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800263e:	693b      	ldr	r3, [r7, #16]
 8002640:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002644:	2b00      	cmp	r3, #0
 8002646:	d00a      	beq.n	800265e <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002648:	683b      	ldr	r3, [r7, #0]
 800264a:	015a      	lsls	r2, r3, #5
 800264c:	69bb      	ldr	r3, [r7, #24]
 800264e:	4413      	add	r3, r2
 8002650:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002654:	461a      	mov	r2, r3
 8002656:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800265a:	6093      	str	r3, [r2, #8]
 800265c:	e07e      	b.n	800275c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800265e:	683a      	ldr	r2, [r7, #0]
 8002660:	4613      	mov	r3, r2
 8002662:	00db      	lsls	r3, r3, #3
 8002664:	4413      	add	r3, r2
 8002666:	009b      	lsls	r3, r3, #2
 8002668:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800266c:	687a      	ldr	r2, [r7, #4]
 800266e:	4413      	add	r3, r2
 8002670:	3304      	adds	r3, #4
 8002672:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	6a1a      	ldr	r2, [r3, #32]
 8002678:	683b      	ldr	r3, [r7, #0]
 800267a:	0159      	lsls	r1, r3, #5
 800267c:	69bb      	ldr	r3, [r7, #24]
 800267e:	440b      	add	r3, r1
 8002680:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002684:	691b      	ldr	r3, [r3, #16]
 8002686:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800268a:	1ad2      	subs	r2, r2, r3
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8002690:	683b      	ldr	r3, [r7, #0]
 8002692:	2b00      	cmp	r3, #0
 8002694:	d114      	bne.n	80026c0 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	691b      	ldr	r3, [r3, #16]
 800269a:	2b00      	cmp	r3, #0
 800269c:	d109      	bne.n	80026b2 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	6818      	ldr	r0, [r3, #0]
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80026a8:	461a      	mov	r2, r3
 80026aa:	2101      	movs	r1, #1
 80026ac:	f002 f9bc 	bl	8004a28 <USB_EP0_OutStart>
 80026b0:	e006      	b.n	80026c0 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	68da      	ldr	r2, [r3, #12]
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	695b      	ldr	r3, [r3, #20]
 80026ba:	441a      	add	r2, r3
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80026c0:	683b      	ldr	r3, [r7, #0]
 80026c2:	b2db      	uxtb	r3, r3
 80026c4:	4619      	mov	r1, r3
 80026c6:	6878      	ldr	r0, [r7, #4]
 80026c8:	f004 fc26 	bl	8006f18 <HAL_PCD_DataOutStageCallback>
 80026cc:	e046      	b.n	800275c <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80026ce:	697b      	ldr	r3, [r7, #20]
 80026d0:	4a26      	ldr	r2, [pc, #152]	@ (800276c <PCD_EP_OutXfrComplete_int+0x1cc>)
 80026d2:	4293      	cmp	r3, r2
 80026d4:	d124      	bne.n	8002720 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80026d6:	693b      	ldr	r3, [r7, #16]
 80026d8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d00a      	beq.n	80026f6 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80026e0:	683b      	ldr	r3, [r7, #0]
 80026e2:	015a      	lsls	r2, r3, #5
 80026e4:	69bb      	ldr	r3, [r7, #24]
 80026e6:	4413      	add	r3, r2
 80026e8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80026ec:	461a      	mov	r2, r3
 80026ee:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80026f2:	6093      	str	r3, [r2, #8]
 80026f4:	e032      	b.n	800275c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80026f6:	693b      	ldr	r3, [r7, #16]
 80026f8:	f003 0320 	and.w	r3, r3, #32
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d008      	beq.n	8002712 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002700:	683b      	ldr	r3, [r7, #0]
 8002702:	015a      	lsls	r2, r3, #5
 8002704:	69bb      	ldr	r3, [r7, #24]
 8002706:	4413      	add	r3, r2
 8002708:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800270c:	461a      	mov	r2, r3
 800270e:	2320      	movs	r3, #32
 8002710:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002712:	683b      	ldr	r3, [r7, #0]
 8002714:	b2db      	uxtb	r3, r3
 8002716:	4619      	mov	r1, r3
 8002718:	6878      	ldr	r0, [r7, #4]
 800271a:	f004 fbfd 	bl	8006f18 <HAL_PCD_DataOutStageCallback>
 800271e:	e01d      	b.n	800275c <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002720:	683b      	ldr	r3, [r7, #0]
 8002722:	2b00      	cmp	r3, #0
 8002724:	d114      	bne.n	8002750 <PCD_EP_OutXfrComplete_int+0x1b0>
 8002726:	6879      	ldr	r1, [r7, #4]
 8002728:	683a      	ldr	r2, [r7, #0]
 800272a:	4613      	mov	r3, r2
 800272c:	00db      	lsls	r3, r3, #3
 800272e:	4413      	add	r3, r2
 8002730:	009b      	lsls	r3, r3, #2
 8002732:	440b      	add	r3, r1
 8002734:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	2b00      	cmp	r3, #0
 800273c:	d108      	bne.n	8002750 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	6818      	ldr	r0, [r3, #0]
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002748:	461a      	mov	r2, r3
 800274a:	2100      	movs	r1, #0
 800274c:	f002 f96c 	bl	8004a28 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002750:	683b      	ldr	r3, [r7, #0]
 8002752:	b2db      	uxtb	r3, r3
 8002754:	4619      	mov	r1, r3
 8002756:	6878      	ldr	r0, [r7, #4]
 8002758:	f004 fbde 	bl	8006f18 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800275c:	2300      	movs	r3, #0
}
 800275e:	4618      	mov	r0, r3
 8002760:	3720      	adds	r7, #32
 8002762:	46bd      	mov	sp, r7
 8002764:	bd80      	pop	{r7, pc}
 8002766:	bf00      	nop
 8002768:	4f54300a 	.word	0x4f54300a
 800276c:	4f54310a 	.word	0x4f54310a

08002770 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002770:	b580      	push	{r7, lr}
 8002772:	b086      	sub	sp, #24
 8002774:	af00      	add	r7, sp, #0
 8002776:	6078      	str	r0, [r7, #4]
 8002778:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002780:	697b      	ldr	r3, [r7, #20]
 8002782:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8002784:	697b      	ldr	r3, [r7, #20]
 8002786:	333c      	adds	r3, #60	@ 0x3c
 8002788:	3304      	adds	r3, #4
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800278e:	683b      	ldr	r3, [r7, #0]
 8002790:	015a      	lsls	r2, r3, #5
 8002792:	693b      	ldr	r3, [r7, #16]
 8002794:	4413      	add	r3, r2
 8002796:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800279a:	689b      	ldr	r3, [r3, #8]
 800279c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	4a15      	ldr	r2, [pc, #84]	@ (80027f8 <PCD_EP_OutSetupPacket_int+0x88>)
 80027a2:	4293      	cmp	r3, r2
 80027a4:	d90e      	bls.n	80027c4 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80027a6:	68bb      	ldr	r3, [r7, #8]
 80027a8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d009      	beq.n	80027c4 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80027b0:	683b      	ldr	r3, [r7, #0]
 80027b2:	015a      	lsls	r2, r3, #5
 80027b4:	693b      	ldr	r3, [r7, #16]
 80027b6:	4413      	add	r3, r2
 80027b8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80027bc:	461a      	mov	r2, r3
 80027be:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80027c2:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80027c4:	6878      	ldr	r0, [r7, #4]
 80027c6:	f004 fb95 	bl	8006ef4 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	4a0a      	ldr	r2, [pc, #40]	@ (80027f8 <PCD_EP_OutSetupPacket_int+0x88>)
 80027ce:	4293      	cmp	r3, r2
 80027d0:	d90c      	bls.n	80027ec <PCD_EP_OutSetupPacket_int+0x7c>
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	799b      	ldrb	r3, [r3, #6]
 80027d6:	2b01      	cmp	r3, #1
 80027d8:	d108      	bne.n	80027ec <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	6818      	ldr	r0, [r3, #0]
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80027e4:	461a      	mov	r2, r3
 80027e6:	2101      	movs	r1, #1
 80027e8:	f002 f91e 	bl	8004a28 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80027ec:	2300      	movs	r3, #0
}
 80027ee:	4618      	mov	r0, r3
 80027f0:	3718      	adds	r7, #24
 80027f2:	46bd      	mov	sp, r7
 80027f4:	bd80      	pop	{r7, pc}
 80027f6:	bf00      	nop
 80027f8:	4f54300a 	.word	0x4f54300a

080027fc <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80027fc:	b480      	push	{r7}
 80027fe:	b085      	sub	sp, #20
 8002800:	af00      	add	r7, sp, #0
 8002802:	6078      	str	r0, [r7, #4]
 8002804:	460b      	mov	r3, r1
 8002806:	70fb      	strb	r3, [r7, #3]
 8002808:	4613      	mov	r3, r2
 800280a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002812:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8002814:	78fb      	ldrb	r3, [r7, #3]
 8002816:	2b00      	cmp	r3, #0
 8002818:	d107      	bne.n	800282a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800281a:	883b      	ldrh	r3, [r7, #0]
 800281c:	0419      	lsls	r1, r3, #16
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	68ba      	ldr	r2, [r7, #8]
 8002824:	430a      	orrs	r2, r1
 8002826:	629a      	str	r2, [r3, #40]	@ 0x28
 8002828:	e028      	b.n	800287c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002830:	0c1b      	lsrs	r3, r3, #16
 8002832:	68ba      	ldr	r2, [r7, #8]
 8002834:	4413      	add	r3, r2
 8002836:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002838:	2300      	movs	r3, #0
 800283a:	73fb      	strb	r3, [r7, #15]
 800283c:	e00d      	b.n	800285a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681a      	ldr	r2, [r3, #0]
 8002842:	7bfb      	ldrb	r3, [r7, #15]
 8002844:	3340      	adds	r3, #64	@ 0x40
 8002846:	009b      	lsls	r3, r3, #2
 8002848:	4413      	add	r3, r2
 800284a:	685b      	ldr	r3, [r3, #4]
 800284c:	0c1b      	lsrs	r3, r3, #16
 800284e:	68ba      	ldr	r2, [r7, #8]
 8002850:	4413      	add	r3, r2
 8002852:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002854:	7bfb      	ldrb	r3, [r7, #15]
 8002856:	3301      	adds	r3, #1
 8002858:	73fb      	strb	r3, [r7, #15]
 800285a:	7bfa      	ldrb	r2, [r7, #15]
 800285c:	78fb      	ldrb	r3, [r7, #3]
 800285e:	3b01      	subs	r3, #1
 8002860:	429a      	cmp	r2, r3
 8002862:	d3ec      	bcc.n	800283e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8002864:	883b      	ldrh	r3, [r7, #0]
 8002866:	0418      	lsls	r0, r3, #16
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	6819      	ldr	r1, [r3, #0]
 800286c:	78fb      	ldrb	r3, [r7, #3]
 800286e:	3b01      	subs	r3, #1
 8002870:	68ba      	ldr	r2, [r7, #8]
 8002872:	4302      	orrs	r2, r0
 8002874:	3340      	adds	r3, #64	@ 0x40
 8002876:	009b      	lsls	r3, r3, #2
 8002878:	440b      	add	r3, r1
 800287a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800287c:	2300      	movs	r3, #0
}
 800287e:	4618      	mov	r0, r3
 8002880:	3714      	adds	r7, #20
 8002882:	46bd      	mov	sp, r7
 8002884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002888:	4770      	bx	lr

0800288a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800288a:	b480      	push	{r7}
 800288c:	b083      	sub	sp, #12
 800288e:	af00      	add	r7, sp, #0
 8002890:	6078      	str	r0, [r7, #4]
 8002892:	460b      	mov	r3, r1
 8002894:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	887a      	ldrh	r2, [r7, #2]
 800289c:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800289e:	2300      	movs	r3, #0
}
 80028a0:	4618      	mov	r0, r3
 80028a2:	370c      	adds	r7, #12
 80028a4:	46bd      	mov	sp, r7
 80028a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028aa:	4770      	bx	lr

080028ac <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80028ac:	b480      	push	{r7}
 80028ae:	b083      	sub	sp, #12
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	6078      	str	r0, [r7, #4]
 80028b4:	460b      	mov	r3, r1
 80028b6:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80028b8:	bf00      	nop
 80028ba:	370c      	adds	r7, #12
 80028bc:	46bd      	mov	sp, r7
 80028be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c2:	4770      	bx	lr

080028c4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80028c4:	b480      	push	{r7}
 80028c6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80028c8:	4b03      	ldr	r3, [pc, #12]	@ (80028d8 <HAL_RCC_GetHCLKFreq+0x14>)
 80028ca:	681b      	ldr	r3, [r3, #0]
}
 80028cc:	4618      	mov	r0, r3
 80028ce:	46bd      	mov	sp, r7
 80028d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d4:	4770      	bx	lr
 80028d6:	bf00      	nop
 80028d8:	20000000 	.word	0x20000000

080028dc <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 80028dc:	b480      	push	{r7}
 80028de:	b08b      	sub	sp, #44	@ 0x2c
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	60f8      	str	r0, [r7, #12]
 80028e4:	60b9      	str	r1, [r7, #8]
 80028e6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	681a      	ldr	r2, [r3, #0]
 80028ec:	68bb      	ldr	r3, [r7, #8]
 80028ee:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028f0:	697b      	ldr	r3, [r7, #20]
 80028f2:	fa93 f3a3 	rbit	r3, r3
 80028f6:	613b      	str	r3, [r7, #16]
  return result;
 80028f8:	693b      	ldr	r3, [r7, #16]
 80028fa:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80028fc:	69bb      	ldr	r3, [r7, #24]
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d101      	bne.n	8002906 <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 8002902:	2320      	movs	r3, #32
 8002904:	e003      	b.n	800290e <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 8002906:	69bb      	ldr	r3, [r7, #24]
 8002908:	fab3 f383 	clz	r3, r3
 800290c:	b2db      	uxtb	r3, r3
 800290e:	005b      	lsls	r3, r3, #1
 8002910:	2103      	movs	r1, #3
 8002912:	fa01 f303 	lsl.w	r3, r1, r3
 8002916:	43db      	mvns	r3, r3
 8002918:	401a      	ands	r2, r3
 800291a:	68bb      	ldr	r3, [r7, #8]
 800291c:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800291e:	6a3b      	ldr	r3, [r7, #32]
 8002920:	fa93 f3a3 	rbit	r3, r3
 8002924:	61fb      	str	r3, [r7, #28]
  return result;
 8002926:	69fb      	ldr	r3, [r7, #28]
 8002928:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800292a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800292c:	2b00      	cmp	r3, #0
 800292e:	d101      	bne.n	8002934 <LL_GPIO_SetPinMode+0x58>
    return 32U;
 8002930:	2320      	movs	r3, #32
 8002932:	e003      	b.n	800293c <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 8002934:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002936:	fab3 f383 	clz	r3, r3
 800293a:	b2db      	uxtb	r3, r3
 800293c:	005b      	lsls	r3, r3, #1
 800293e:	6879      	ldr	r1, [r7, #4]
 8002940:	fa01 f303 	lsl.w	r3, r1, r3
 8002944:	431a      	orrs	r2, r3
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	601a      	str	r2, [r3, #0]
}
 800294a:	bf00      	nop
 800294c:	372c      	adds	r7, #44	@ 0x2c
 800294e:	46bd      	mov	sp, r7
 8002950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002954:	4770      	bx	lr

08002956 <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 8002956:	b480      	push	{r7}
 8002958:	b085      	sub	sp, #20
 800295a:	af00      	add	r7, sp, #0
 800295c:	60f8      	str	r0, [r7, #12]
 800295e:	60b9      	str	r1, [r7, #8]
 8002960:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	685a      	ldr	r2, [r3, #4]
 8002966:	68bb      	ldr	r3, [r7, #8]
 8002968:	43db      	mvns	r3, r3
 800296a:	401a      	ands	r2, r3
 800296c:	68bb      	ldr	r3, [r7, #8]
 800296e:	6879      	ldr	r1, [r7, #4]
 8002970:	fb01 f303 	mul.w	r3, r1, r3
 8002974:	431a      	orrs	r2, r3
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	605a      	str	r2, [r3, #4]
}
 800297a:	bf00      	nop
 800297c:	3714      	adds	r7, #20
 800297e:	46bd      	mov	sp, r7
 8002980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002984:	4770      	bx	lr

08002986 <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  *         @arg @ref LL_GPIO_SPEED_FREQ_VERY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 8002986:	b480      	push	{r7}
 8002988:	b08b      	sub	sp, #44	@ 0x2c
 800298a:	af00      	add	r7, sp, #0
 800298c:	60f8      	str	r0, [r7, #12]
 800298e:	60b9      	str	r1, [r7, #8]
 8002990:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	689a      	ldr	r2, [r3, #8]
 8002996:	68bb      	ldr	r3, [r7, #8]
 8002998:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800299a:	697b      	ldr	r3, [r7, #20]
 800299c:	fa93 f3a3 	rbit	r3, r3
 80029a0:	613b      	str	r3, [r7, #16]
  return result;
 80029a2:	693b      	ldr	r3, [r7, #16]
 80029a4:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80029a6:	69bb      	ldr	r3, [r7, #24]
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d101      	bne.n	80029b0 <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 80029ac:	2320      	movs	r3, #32
 80029ae:	e003      	b.n	80029b8 <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 80029b0:	69bb      	ldr	r3, [r7, #24]
 80029b2:	fab3 f383 	clz	r3, r3
 80029b6:	b2db      	uxtb	r3, r3
 80029b8:	005b      	lsls	r3, r3, #1
 80029ba:	2103      	movs	r1, #3
 80029bc:	fa01 f303 	lsl.w	r3, r1, r3
 80029c0:	43db      	mvns	r3, r3
 80029c2:	401a      	ands	r2, r3
 80029c4:	68bb      	ldr	r3, [r7, #8]
 80029c6:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029c8:	6a3b      	ldr	r3, [r7, #32]
 80029ca:	fa93 f3a3 	rbit	r3, r3
 80029ce:	61fb      	str	r3, [r7, #28]
  return result;
 80029d0:	69fb      	ldr	r3, [r7, #28]
 80029d2:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 80029d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d101      	bne.n	80029de <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 80029da:	2320      	movs	r3, #32
 80029dc:	e003      	b.n	80029e6 <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 80029de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029e0:	fab3 f383 	clz	r3, r3
 80029e4:	b2db      	uxtb	r3, r3
 80029e6:	005b      	lsls	r3, r3, #1
 80029e8:	6879      	ldr	r1, [r7, #4]
 80029ea:	fa01 f303 	lsl.w	r3, r1, r3
 80029ee:	431a      	orrs	r2, r3
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	609a      	str	r2, [r3, #8]
             (Speed << (POSITION_VAL(Pin) * 2U)));
}
 80029f4:	bf00      	nop
 80029f6:	372c      	adds	r7, #44	@ 0x2c
 80029f8:	46bd      	mov	sp, r7
 80029fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029fe:	4770      	bx	lr

08002a00 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 8002a00:	b480      	push	{r7}
 8002a02:	b08b      	sub	sp, #44	@ 0x2c
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	60f8      	str	r0, [r7, #12]
 8002a08:	60b9      	str	r1, [r7, #8]
 8002a0a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	68da      	ldr	r2, [r3, #12]
 8002a10:	68bb      	ldr	r3, [r7, #8]
 8002a12:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a14:	697b      	ldr	r3, [r7, #20]
 8002a16:	fa93 f3a3 	rbit	r3, r3
 8002a1a:	613b      	str	r3, [r7, #16]
  return result;
 8002a1c:	693b      	ldr	r3, [r7, #16]
 8002a1e:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002a20:	69bb      	ldr	r3, [r7, #24]
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d101      	bne.n	8002a2a <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 8002a26:	2320      	movs	r3, #32
 8002a28:	e003      	b.n	8002a32 <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 8002a2a:	69bb      	ldr	r3, [r7, #24]
 8002a2c:	fab3 f383 	clz	r3, r3
 8002a30:	b2db      	uxtb	r3, r3
 8002a32:	005b      	lsls	r3, r3, #1
 8002a34:	2103      	movs	r1, #3
 8002a36:	fa01 f303 	lsl.w	r3, r1, r3
 8002a3a:	43db      	mvns	r3, r3
 8002a3c:	401a      	ands	r2, r3
 8002a3e:	68bb      	ldr	r3, [r7, #8]
 8002a40:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a42:	6a3b      	ldr	r3, [r7, #32]
 8002a44:	fa93 f3a3 	rbit	r3, r3
 8002a48:	61fb      	str	r3, [r7, #28]
  return result;
 8002a4a:	69fb      	ldr	r3, [r7, #28]
 8002a4c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8002a4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d101      	bne.n	8002a58 <LL_GPIO_SetPinPull+0x58>
    return 32U;
 8002a54:	2320      	movs	r3, #32
 8002a56:	e003      	b.n	8002a60 <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 8002a58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a5a:	fab3 f383 	clz	r3, r3
 8002a5e:	b2db      	uxtb	r3, r3
 8002a60:	005b      	lsls	r3, r3, #1
 8002a62:	6879      	ldr	r1, [r7, #4]
 8002a64:	fa01 f303 	lsl.w	r3, r1, r3
 8002a68:	431a      	orrs	r2, r3
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	60da      	str	r2, [r3, #12]
}
 8002a6e:	bf00      	nop
 8002a70:	372c      	adds	r7, #44	@ 0x2c
 8002a72:	46bd      	mov	sp, r7
 8002a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a78:	4770      	bx	lr

08002a7a <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8002a7a:	b480      	push	{r7}
 8002a7c:	b08b      	sub	sp, #44	@ 0x2c
 8002a7e:	af00      	add	r7, sp, #0
 8002a80:	60f8      	str	r0, [r7, #12]
 8002a82:	60b9      	str	r1, [r7, #8]
 8002a84:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	6a1a      	ldr	r2, [r3, #32]
 8002a8a:	68bb      	ldr	r3, [r7, #8]
 8002a8c:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a8e:	697b      	ldr	r3, [r7, #20]
 8002a90:	fa93 f3a3 	rbit	r3, r3
 8002a94:	613b      	str	r3, [r7, #16]
  return result;
 8002a96:	693b      	ldr	r3, [r7, #16]
 8002a98:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002a9a:	69bb      	ldr	r3, [r7, #24]
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d101      	bne.n	8002aa4 <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 8002aa0:	2320      	movs	r3, #32
 8002aa2:	e003      	b.n	8002aac <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 8002aa4:	69bb      	ldr	r3, [r7, #24]
 8002aa6:	fab3 f383 	clz	r3, r3
 8002aaa:	b2db      	uxtb	r3, r3
 8002aac:	009b      	lsls	r3, r3, #2
 8002aae:	210f      	movs	r1, #15
 8002ab0:	fa01 f303 	lsl.w	r3, r1, r3
 8002ab4:	43db      	mvns	r3, r3
 8002ab6:	401a      	ands	r2, r3
 8002ab8:	68bb      	ldr	r3, [r7, #8]
 8002aba:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002abc:	6a3b      	ldr	r3, [r7, #32]
 8002abe:	fa93 f3a3 	rbit	r3, r3
 8002ac2:	61fb      	str	r3, [r7, #28]
  return result;
 8002ac4:	69fb      	ldr	r3, [r7, #28]
 8002ac6:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8002ac8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d101      	bne.n	8002ad2 <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 8002ace:	2320      	movs	r3, #32
 8002ad0:	e003      	b.n	8002ada <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 8002ad2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ad4:	fab3 f383 	clz	r3, r3
 8002ad8:	b2db      	uxtb	r3, r3
 8002ada:	009b      	lsls	r3, r3, #2
 8002adc:	6879      	ldr	r1, [r7, #4]
 8002ade:	fa01 f303 	lsl.w	r3, r1, r3
 8002ae2:	431a      	orrs	r2, r3
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	621a      	str	r2, [r3, #32]
             (Alternate << (POSITION_VAL(Pin) * 4U)));
}
 8002ae8:	bf00      	nop
 8002aea:	372c      	adds	r7, #44	@ 0x2c
 8002aec:	46bd      	mov	sp, r7
 8002aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af2:	4770      	bx	lr

08002af4 <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8002af4:	b480      	push	{r7}
 8002af6:	b08b      	sub	sp, #44	@ 0x2c
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	60f8      	str	r0, [r7, #12]
 8002afc:	60b9      	str	r1, [r7, #8]
 8002afe:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002b04:	68bb      	ldr	r3, [r7, #8]
 8002b06:	0a1b      	lsrs	r3, r3, #8
 8002b08:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b0a:	697b      	ldr	r3, [r7, #20]
 8002b0c:	fa93 f3a3 	rbit	r3, r3
 8002b10:	613b      	str	r3, [r7, #16]
  return result;
 8002b12:	693b      	ldr	r3, [r7, #16]
 8002b14:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002b16:	69bb      	ldr	r3, [r7, #24]
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d101      	bne.n	8002b20 <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 8002b1c:	2320      	movs	r3, #32
 8002b1e:	e003      	b.n	8002b28 <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 8002b20:	69bb      	ldr	r3, [r7, #24]
 8002b22:	fab3 f383 	clz	r3, r3
 8002b26:	b2db      	uxtb	r3, r3
 8002b28:	009b      	lsls	r3, r3, #2
 8002b2a:	210f      	movs	r1, #15
 8002b2c:	fa01 f303 	lsl.w	r3, r1, r3
 8002b30:	43db      	mvns	r3, r3
 8002b32:	401a      	ands	r2, r3
 8002b34:	68bb      	ldr	r3, [r7, #8]
 8002b36:	0a1b      	lsrs	r3, r3, #8
 8002b38:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b3a:	6a3b      	ldr	r3, [r7, #32]
 8002b3c:	fa93 f3a3 	rbit	r3, r3
 8002b40:	61fb      	str	r3, [r7, #28]
  return result;
 8002b42:	69fb      	ldr	r3, [r7, #28]
 8002b44:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8002b46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d101      	bne.n	8002b50 <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 8002b4c:	2320      	movs	r3, #32
 8002b4e:	e003      	b.n	8002b58 <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 8002b50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b52:	fab3 f383 	clz	r3, r3
 8002b56:	b2db      	uxtb	r3, r3
 8002b58:	009b      	lsls	r3, r3, #2
 8002b5a:	6879      	ldr	r1, [r7, #4]
 8002b5c:	fa01 f303 	lsl.w	r3, r1, r3
 8002b60:	431a      	orrs	r2, r3
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	625a      	str	r2, [r3, #36]	@ 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
}
 8002b66:	bf00      	nop
 8002b68:	372c      	adds	r7, #44	@ 0x2c
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b70:	4770      	bx	lr

08002b72 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8002b72:	b580      	push	{r7, lr}
 8002b74:	b08a      	sub	sp, #40	@ 0x28
 8002b76:	af00      	add	r7, sp, #0
 8002b78:	6078      	str	r0, [r7, #4]
 8002b7a:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 8002b7c:	2300      	movs	r3, #0
 8002b7e:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t currentpin = 0x00000000U;
 8002b80:	2300      	movs	r3, #0
 8002b82:	623b      	str	r3, [r7, #32]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8002b84:	683b      	ldr	r3, [r7, #0]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	61bb      	str	r3, [r7, #24]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b8a:	69bb      	ldr	r3, [r7, #24]
 8002b8c:	fa93 f3a3 	rbit	r3, r3
 8002b90:	617b      	str	r3, [r7, #20]
  return result;
 8002b92:	697b      	ldr	r3, [r7, #20]
 8002b94:	61fb      	str	r3, [r7, #28]
  if (value == 0U)
 8002b96:	69fb      	ldr	r3, [r7, #28]
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d101      	bne.n	8002ba0 <LL_GPIO_Init+0x2e>
    return 32U;
 8002b9c:	2320      	movs	r3, #32
 8002b9e:	e003      	b.n	8002ba8 <LL_GPIO_Init+0x36>
  return __builtin_clz(value);
 8002ba0:	69fb      	ldr	r3, [r7, #28]
 8002ba2:	fab3 f383 	clz	r3, r3
 8002ba6:	b2db      	uxtb	r3, r3
 8002ba8:	627b      	str	r3, [r7, #36]	@ 0x24
  
  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8002baa:	e057      	b.n	8002c5c <LL_GPIO_Init+0xea>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 8002bac:	683b      	ldr	r3, [r7, #0]
 8002bae:	681a      	ldr	r2, [r3, #0]
 8002bb0:	2101      	movs	r1, #1
 8002bb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bb4:	fa01 f303 	lsl.w	r3, r1, r3
 8002bb8:	4013      	ands	r3, r2
 8002bba:	623b      	str	r3, [r7, #32]
    
    if (currentpin)
 8002bbc:	6a3b      	ldr	r3, [r7, #32]
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d049      	beq.n	8002c56 <LL_GPIO_Init+0xe4>
    {
      
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8002bc2:	683b      	ldr	r3, [r7, #0]
 8002bc4:	685b      	ldr	r3, [r3, #4]
 8002bc6:	2b01      	cmp	r3, #1
 8002bc8:	d003      	beq.n	8002bd2 <LL_GPIO_Init+0x60>
 8002bca:	683b      	ldr	r3, [r7, #0]
 8002bcc:	685b      	ldr	r3, [r3, #4]
 8002bce:	2b02      	cmp	r3, #2
 8002bd0:	d10d      	bne.n	8002bee <LL_GPIO_Init+0x7c>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        
        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8002bd2:	683b      	ldr	r3, [r7, #0]
 8002bd4:	689b      	ldr	r3, [r3, #8]
 8002bd6:	461a      	mov	r2, r3
 8002bd8:	6a39      	ldr	r1, [r7, #32]
 8002bda:	6878      	ldr	r0, [r7, #4]
 8002bdc:	f7ff fed3 	bl	8002986 <LL_GPIO_SetPinSpeed>
        
        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));
        
        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 8002be0:	683b      	ldr	r3, [r7, #0]
 8002be2:	68db      	ldr	r3, [r3, #12]
 8002be4:	461a      	mov	r2, r3
 8002be6:	6a39      	ldr	r1, [r7, #32]
 8002be8:	6878      	ldr	r0, [r7, #4]
 8002bea:	f7ff feb4 	bl	8002956 <LL_GPIO_SetPinOutputType>
      }
      
      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8002bee:	683b      	ldr	r3, [r7, #0]
 8002bf0:	691b      	ldr	r3, [r3, #16]
 8002bf2:	461a      	mov	r2, r3
 8002bf4:	6a39      	ldr	r1, [r7, #32]
 8002bf6:	6878      	ldr	r0, [r7, #4]
 8002bf8:	f7ff ff02 	bl	8002a00 <LL_GPIO_SetPinPull>
      
      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8002bfc:	683b      	ldr	r3, [r7, #0]
 8002bfe:	685b      	ldr	r3, [r3, #4]
 8002c00:	2b02      	cmp	r3, #2
 8002c02:	d121      	bne.n	8002c48 <LL_GPIO_Init+0xd6>
 8002c04:	6a3b      	ldr	r3, [r7, #32]
 8002c06:	60fb      	str	r3, [r7, #12]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	fa93 f3a3 	rbit	r3, r3
 8002c0e:	60bb      	str	r3, [r7, #8]
  return result;
 8002c10:	68bb      	ldr	r3, [r7, #8]
 8002c12:	613b      	str	r3, [r7, #16]
  if (value == 0U)
 8002c14:	693b      	ldr	r3, [r7, #16]
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d101      	bne.n	8002c1e <LL_GPIO_Init+0xac>
    return 32U;
 8002c1a:	2320      	movs	r3, #32
 8002c1c:	e003      	b.n	8002c26 <LL_GPIO_Init+0xb4>
  return __builtin_clz(value);
 8002c1e:	693b      	ldr	r3, [r7, #16]
 8002c20:	fab3 f383 	clz	r3, r3
 8002c24:	b2db      	uxtb	r3, r3
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));
        
        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 8002c26:	2b07      	cmp	r3, #7
 8002c28:	d807      	bhi.n	8002c3a <LL_GPIO_Init+0xc8>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8002c2a:	683b      	ldr	r3, [r7, #0]
 8002c2c:	695b      	ldr	r3, [r3, #20]
 8002c2e:	461a      	mov	r2, r3
 8002c30:	6a39      	ldr	r1, [r7, #32]
 8002c32:	6878      	ldr	r0, [r7, #4]
 8002c34:	f7ff ff21 	bl	8002a7a <LL_GPIO_SetAFPin_0_7>
 8002c38:	e006      	b.n	8002c48 <LL_GPIO_Init+0xd6>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8002c3a:	683b      	ldr	r3, [r7, #0]
 8002c3c:	695b      	ldr	r3, [r3, #20]
 8002c3e:	461a      	mov	r2, r3
 8002c40:	6a39      	ldr	r1, [r7, #32]
 8002c42:	6878      	ldr	r0, [r7, #4]
 8002c44:	f7ff ff56 	bl	8002af4 <LL_GPIO_SetAFPin_8_15>
        }
      }
      
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8002c48:	683b      	ldr	r3, [r7, #0]
 8002c4a:	685b      	ldr	r3, [r3, #4]
 8002c4c:	461a      	mov	r2, r3
 8002c4e:	6a39      	ldr	r1, [r7, #32]
 8002c50:	6878      	ldr	r0, [r7, #4]
 8002c52:	f7ff fe43 	bl	80028dc <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8002c56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c58:	3301      	adds	r3, #1
 8002c5a:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8002c5c:	683b      	ldr	r3, [r7, #0]
 8002c5e:	681a      	ldr	r2, [r3, #0]
 8002c60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c62:	fa22 f303 	lsr.w	r3, r2, r3
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d1a0      	bne.n	8002bac <LL_GPIO_Init+0x3a>
  }

  return (SUCCESS);
 8002c6a:	2300      	movs	r3, #0
}
 8002c6c:	4618      	mov	r0, r3
 8002c6e:	3728      	adds	r7, #40	@ 0x28
 8002c70:	46bd      	mov	sp, r7
 8002c72:	bd80      	pop	{r7, pc}

08002c74 <LL_RCC_GetSysClkSource>:
{
 8002c74:	b480      	push	{r7}
 8002c76:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8002c78:	4b04      	ldr	r3, [pc, #16]	@ (8002c8c <LL_RCC_GetSysClkSource+0x18>)
 8002c7a:	689b      	ldr	r3, [r3, #8]
 8002c7c:	f003 030c 	and.w	r3, r3, #12
}
 8002c80:	4618      	mov	r0, r3
 8002c82:	46bd      	mov	sp, r7
 8002c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c88:	4770      	bx	lr
 8002c8a:	bf00      	nop
 8002c8c:	40023800 	.word	0x40023800

08002c90 <LL_RCC_GetAHBPrescaler>:
{
 8002c90:	b480      	push	{r7}
 8002c92:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8002c94:	4b04      	ldr	r3, [pc, #16]	@ (8002ca8 <LL_RCC_GetAHBPrescaler+0x18>)
 8002c96:	689b      	ldr	r3, [r3, #8]
 8002c98:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8002c9c:	4618      	mov	r0, r3
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca4:	4770      	bx	lr
 8002ca6:	bf00      	nop
 8002ca8:	40023800 	.word	0x40023800

08002cac <LL_RCC_GetAPB1Prescaler>:
{
 8002cac:	b480      	push	{r7}
 8002cae:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8002cb0:	4b04      	ldr	r3, [pc, #16]	@ (8002cc4 <LL_RCC_GetAPB1Prescaler+0x18>)
 8002cb2:	689b      	ldr	r3, [r3, #8]
 8002cb4:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
}
 8002cb8:	4618      	mov	r0, r3
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc0:	4770      	bx	lr
 8002cc2:	bf00      	nop
 8002cc4:	40023800 	.word	0x40023800

08002cc8 <LL_RCC_GetAPB2Prescaler>:
{
 8002cc8:	b480      	push	{r7}
 8002cca:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8002ccc:	4b04      	ldr	r3, [pc, #16]	@ (8002ce0 <LL_RCC_GetAPB2Prescaler+0x18>)
 8002cce:	689b      	ldr	r3, [r3, #8]
 8002cd0:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 8002cd4:	4618      	mov	r0, r3
 8002cd6:	46bd      	mov	sp, r7
 8002cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cdc:	4770      	bx	lr
 8002cde:	bf00      	nop
 8002ce0:	40023800 	.word	0x40023800

08002ce4 <LL_RCC_PLL_GetMainSource>:
  * @retval Returned value can be one of the following values:
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8002ce4:	b480      	push	{r7}
 8002ce6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8002ce8:	4b04      	ldr	r3, [pc, #16]	@ (8002cfc <LL_RCC_PLL_GetMainSource+0x18>)
 8002cea:	685b      	ldr	r3, [r3, #4]
 8002cec:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
}
 8002cf0:	4618      	mov	r0, r3
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf8:	4770      	bx	lr
 8002cfa:	bf00      	nop
 8002cfc:	40023800 	.word	0x40023800

08002d00 <LL_RCC_PLL_GetN>:
  * @retval Between 50/192(*) and 432
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8002d00:	b480      	push	{r7}
 8002d02:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8002d04:	4b04      	ldr	r3, [pc, #16]	@ (8002d18 <LL_RCC_PLL_GetN+0x18>)
 8002d06:	685b      	ldr	r3, [r3, #4]
 8002d08:	099b      	lsrs	r3, r3, #6
 8002d0a:	f3c3 0308 	ubfx	r3, r3, #0, #9
}
 8002d0e:	4618      	mov	r0, r3
 8002d10:	46bd      	mov	sp, r7
 8002d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d16:	4770      	bx	lr
 8002d18:	40023800 	.word	0x40023800

08002d1c <LL_RCC_PLL_GetP>:
  *         @arg @ref LL_RCC_PLLP_DIV_4
  *         @arg @ref LL_RCC_PLLP_DIV_6
  *         @arg @ref LL_RCC_PLLP_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetP(void)
{
 8002d1c:	b480      	push	{r7}
 8002d1e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP));
 8002d20:	4b04      	ldr	r3, [pc, #16]	@ (8002d34 <LL_RCC_PLL_GetP+0x18>)
 8002d22:	685b      	ldr	r3, [r3, #4]
 8002d24:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
}
 8002d28:	4618      	mov	r0, r3
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d30:	4770      	bx	lr
 8002d32:	bf00      	nop
 8002d34:	40023800 	.word	0x40023800

08002d38 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_61
  *         @arg @ref LL_RCC_PLLM_DIV_62
  *         @arg @ref LL_RCC_PLLM_DIV_63
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8002d38:	b480      	push	{r7}
 8002d3a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8002d3c:	4b04      	ldr	r3, [pc, #16]	@ (8002d50 <LL_RCC_PLL_GetDivider+0x18>)
 8002d3e:	685b      	ldr	r3, [r3, #4]
 8002d40:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
}
 8002d44:	4618      	mov	r0, r3
 8002d46:	46bd      	mov	sp, r7
 8002d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d4c:	4770      	bx	lr
 8002d4e:	bf00      	nop
 8002d50:	40023800 	.word	0x40023800

08002d54 <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 8002d54:	b580      	push	{r7, lr}
 8002d56:	b082      	sub	sp, #8
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 8002d5c:	f000 f820 	bl	8002da0 <RCC_GetSystemClockFreq>
 8002d60:	4602      	mov	r2, r0
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	4618      	mov	r0, r3
 8002d6c:	f000 f840 	bl	8002df0 <RCC_GetHCLKClockFreq>
 8002d70:	4602      	mov	r2, r0
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	685b      	ldr	r3, [r3, #4]
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	f000 f84e 	bl	8002e1c <RCC_GetPCLK1ClockFreq>
 8002d80:	4602      	mov	r2, r0
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	685b      	ldr	r3, [r3, #4]
 8002d8a:	4618      	mov	r0, r3
 8002d8c:	f000 f85a 	bl	8002e44 <RCC_GetPCLK2ClockFreq>
 8002d90:	4602      	mov	r2, r0
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	60da      	str	r2, [r3, #12]
}
 8002d96:	bf00      	nop
 8002d98:	3708      	adds	r7, #8
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	bd80      	pop	{r7, pc}
	...

08002da0 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 8002da0:	b580      	push	{r7, lr}
 8002da2:	b082      	sub	sp, #8
 8002da4:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 8002da6:	2300      	movs	r3, #0
 8002da8:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 8002daa:	f7ff ff63 	bl	8002c74 <LL_RCC_GetSysClkSource>
 8002dae:	4603      	mov	r3, r0
 8002db0:	2b08      	cmp	r3, #8
 8002db2:	d00c      	beq.n	8002dce <RCC_GetSystemClockFreq+0x2e>
 8002db4:	2b08      	cmp	r3, #8
 8002db6:	d80f      	bhi.n	8002dd8 <RCC_GetSystemClockFreq+0x38>
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d002      	beq.n	8002dc2 <RCC_GetSystemClockFreq+0x22>
 8002dbc:	2b04      	cmp	r3, #4
 8002dbe:	d003      	beq.n	8002dc8 <RCC_GetSystemClockFreq+0x28>
 8002dc0:	e00a      	b.n	8002dd8 <RCC_GetSystemClockFreq+0x38>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 8002dc2:	4b09      	ldr	r3, [pc, #36]	@ (8002de8 <RCC_GetSystemClockFreq+0x48>)
 8002dc4:	607b      	str	r3, [r7, #4]
      break;
 8002dc6:	e00a      	b.n	8002dde <RCC_GetSystemClockFreq+0x3e>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 8002dc8:	4b08      	ldr	r3, [pc, #32]	@ (8002dec <RCC_GetSystemClockFreq+0x4c>)
 8002dca:	607b      	str	r3, [r7, #4]
      break;
 8002dcc:	e007      	b.n	8002dde <RCC_GetSystemClockFreq+0x3e>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLL);
 8002dce:	2008      	movs	r0, #8
 8002dd0:	f000 f84c 	bl	8002e6c <RCC_PLL_GetFreqDomain_SYS>
 8002dd4:	6078      	str	r0, [r7, #4]
      break;
 8002dd6:	e002      	b.n	8002dde <RCC_GetSystemClockFreq+0x3e>
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLLR);
      break;
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

    default:
      frequency = HSI_VALUE;
 8002dd8:	4b03      	ldr	r3, [pc, #12]	@ (8002de8 <RCC_GetSystemClockFreq+0x48>)
 8002dda:	607b      	str	r3, [r7, #4]
      break;
 8002ddc:	bf00      	nop
  }

  return frequency;
 8002dde:	687b      	ldr	r3, [r7, #4]
}
 8002de0:	4618      	mov	r0, r3
 8002de2:	3708      	adds	r7, #8
 8002de4:	46bd      	mov	sp, r7
 8002de6:	bd80      	pop	{r7, pc}
 8002de8:	00f42400 	.word	0x00f42400
 8002dec:	007a1200 	.word	0x007a1200

08002df0 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 8002df0:	b580      	push	{r7, lr}
 8002df2:	b082      	sub	sp, #8
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8002df8:	f7ff ff4a 	bl	8002c90 <LL_RCC_GetAHBPrescaler>
 8002dfc:	4603      	mov	r3, r0
 8002dfe:	091b      	lsrs	r3, r3, #4
 8002e00:	f003 030f 	and.w	r3, r3, #15
 8002e04:	4a04      	ldr	r2, [pc, #16]	@ (8002e18 <RCC_GetHCLKClockFreq+0x28>)
 8002e06:	5cd3      	ldrb	r3, [r2, r3]
 8002e08:	461a      	mov	r2, r3
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	40d3      	lsrs	r3, r2
}
 8002e0e:	4618      	mov	r0, r3
 8002e10:	3708      	adds	r7, #8
 8002e12:	46bd      	mov	sp, r7
 8002e14:	bd80      	pop	{r7, pc}
 8002e16:	bf00      	nop
 8002e18:	080086f0 	.word	0x080086f0

08002e1c <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	b082      	sub	sp, #8
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8002e24:	f7ff ff42 	bl	8002cac <LL_RCC_GetAPB1Prescaler>
 8002e28:	4603      	mov	r3, r0
 8002e2a:	0a9b      	lsrs	r3, r3, #10
 8002e2c:	4a04      	ldr	r2, [pc, #16]	@ (8002e40 <RCC_GetPCLK1ClockFreq+0x24>)
 8002e2e:	5cd3      	ldrb	r3, [r2, r3]
 8002e30:	461a      	mov	r2, r3
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	40d3      	lsrs	r3, r2
}
 8002e36:	4618      	mov	r0, r3
 8002e38:	3708      	adds	r7, #8
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	bd80      	pop	{r7, pc}
 8002e3e:	bf00      	nop
 8002e40:	08008700 	.word	0x08008700

08002e44 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 8002e44:	b580      	push	{r7, lr}
 8002e46:	b082      	sub	sp, #8
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8002e4c:	f7ff ff3c 	bl	8002cc8 <LL_RCC_GetAPB2Prescaler>
 8002e50:	4603      	mov	r3, r0
 8002e52:	0b5b      	lsrs	r3, r3, #13
 8002e54:	4a04      	ldr	r2, [pc, #16]	@ (8002e68 <RCC_GetPCLK2ClockFreq+0x24>)
 8002e56:	5cd3      	ldrb	r3, [r2, r3]
 8002e58:	461a      	mov	r2, r3
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	40d3      	lsrs	r3, r2
}
 8002e5e:	4618      	mov	r0, r3
 8002e60:	3708      	adds	r7, #8
 8002e62:	46bd      	mov	sp, r7
 8002e64:	bd80      	pop	{r7, pc}
 8002e66:	bf00      	nop
 8002e68:	08008700 	.word	0x08008700

08002e6c <RCC_PLL_GetFreqDomain_SYS>:
  * @brief  Return PLL clock frequency used for system domain
  * @param  SYSCLK_Source System clock source
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(uint32_t SYSCLK_Source)
{
 8002e6c:	b590      	push	{r4, r7, lr}
 8002e6e:	b087      	sub	sp, #28
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	6078      	str	r0, [r7, #4]
  uint32_t pllinputfreq = 0U;
 8002e74:	2300      	movs	r3, #0
 8002e76:	617b      	str	r3, [r7, #20]
  uint32_t pllsource = 0U;
 8002e78:	2300      	movs	r3, #0
 8002e7a:	60fb      	str	r3, [r7, #12]
  uint32_t plloutputfreq = 0U;
 8002e7c:	2300      	movs	r3, #0
 8002e7e:	613b      	str	r3, [r7, #16]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
     SYSCLK = PLL_VCO / (PLLP or PLLR)
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 8002e80:	f7ff ff30 	bl	8002ce4 <LL_RCC_PLL_GetMainSource>
 8002e84:	60f8      	str	r0, [r7, #12]

  switch (pllsource)
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d004      	beq.n	8002e96 <RCC_PLL_GetFreqDomain_SYS+0x2a>
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002e92:	d003      	beq.n	8002e9c <RCC_PLL_GetFreqDomain_SYS+0x30>
 8002e94:	e005      	b.n	8002ea2 <RCC_PLL_GetFreqDomain_SYS+0x36>
  {
    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 8002e96:	4b12      	ldr	r3, [pc, #72]	@ (8002ee0 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 8002e98:	617b      	str	r3, [r7, #20]
      break;
 8002e9a:	e005      	b.n	8002ea8 <RCC_PLL_GetFreqDomain_SYS+0x3c>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 8002e9c:	4b11      	ldr	r3, [pc, #68]	@ (8002ee4 <RCC_PLL_GetFreqDomain_SYS+0x78>)
 8002e9e:	617b      	str	r3, [r7, #20]
      break;
 8002ea0:	e002      	b.n	8002ea8 <RCC_PLL_GetFreqDomain_SYS+0x3c>

    default:
      pllinputfreq = HSI_VALUE;
 8002ea2:	4b0f      	ldr	r3, [pc, #60]	@ (8002ee0 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 8002ea4:	617b      	str	r3, [r7, #20]
      break;
 8002ea6:	bf00      	nop
  }

  if (SYSCLK_Source == LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	2b08      	cmp	r3, #8
 8002eac:	d113      	bne.n	8002ed6 <RCC_PLL_GetFreqDomain_SYS+0x6a>
  {
    plloutputfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8002eae:	f7ff ff43 	bl	8002d38 <LL_RCC_PLL_GetDivider>
 8002eb2:	4602      	mov	r2, r0
 8002eb4:	697b      	ldr	r3, [r7, #20]
 8002eb6:	fbb3 f4f2 	udiv	r4, r3, r2
 8002eba:	f7ff ff21 	bl	8002d00 <LL_RCC_PLL_GetN>
 8002ebe:	4603      	mov	r3, r0
 8002ec0:	fb03 f404 	mul.w	r4, r3, r4
 8002ec4:	f7ff ff2a 	bl	8002d1c <LL_RCC_PLL_GetP>
 8002ec8:	4603      	mov	r3, r0
 8002eca:	0c1b      	lsrs	r3, r3, #16
 8002ecc:	3301      	adds	r3, #1
 8002ece:	005b      	lsls	r3, r3, #1
 8002ed0:	fbb4 f3f3 	udiv	r3, r4, r3
 8002ed4:	613b      	str	r3, [r7, #16]
    plloutputfreq = __LL_RCC_CALC_PLLRCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
                                               LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

  return plloutputfreq;
 8002ed6:	693b      	ldr	r3, [r7, #16]
}
 8002ed8:	4618      	mov	r0, r3
 8002eda:	371c      	adds	r7, #28
 8002edc:	46bd      	mov	sp, r7
 8002ede:	bd90      	pop	{r4, r7, pc}
 8002ee0:	00f42400 	.word	0x00f42400
 8002ee4:	007a1200 	.word	0x007a1200

08002ee8 <LL_USART_IsEnabled>:
{
 8002ee8:	b480      	push	{r7}
 8002eea:	b083      	sub	sp, #12
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	68db      	ldr	r3, [r3, #12]
 8002ef4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002ef8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002efc:	bf0c      	ite	eq
 8002efe:	2301      	moveq	r3, #1
 8002f00:	2300      	movne	r3, #0
 8002f02:	b2db      	uxtb	r3, r3
}
 8002f04:	4618      	mov	r0, r3
 8002f06:	370c      	adds	r7, #12
 8002f08:	46bd      	mov	sp, r7
 8002f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f0e:	4770      	bx	lr

08002f10 <LL_USART_SetStopBitsLength>:
{
 8002f10:	b480      	push	{r7}
 8002f12:	b083      	sub	sp, #12
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	6078      	str	r0, [r7, #4]
 8002f18:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	691b      	ldr	r3, [r3, #16]
 8002f1e:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002f22:	683b      	ldr	r3, [r7, #0]
 8002f24:	431a      	orrs	r2, r3
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	611a      	str	r2, [r3, #16]
}
 8002f2a:	bf00      	nop
 8002f2c:	370c      	adds	r7, #12
 8002f2e:	46bd      	mov	sp, r7
 8002f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f34:	4770      	bx	lr

08002f36 <LL_USART_SetHWFlowCtrl>:
{
 8002f36:	b480      	push	{r7}
 8002f38:	b083      	sub	sp, #12
 8002f3a:	af00      	add	r7, sp, #0
 8002f3c:	6078      	str	r0, [r7, #4]
 8002f3e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	695b      	ldr	r3, [r3, #20]
 8002f44:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002f48:	683b      	ldr	r3, [r7, #0]
 8002f4a:	431a      	orrs	r2, r3
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	615a      	str	r2, [r3, #20]
}
 8002f50:	bf00      	nop
 8002f52:	370c      	adds	r7, #12
 8002f54:	46bd      	mov	sp, r7
 8002f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f5a:	4770      	bx	lr

08002f5c <LL_USART_SetBaudRate>:
{
 8002f5c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002f60:	b0c0      	sub	sp, #256	@ 0x100
 8002f62:	af00      	add	r7, sp, #0
 8002f64:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8002f68:	f8c7 10f8 	str.w	r1, [r7, #248]	@ 0xf8
 8002f6c:	f8c7 20f4 	str.w	r2, [r7, #244]	@ 0xf4
 8002f70:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 8002f74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002f78:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002f7c:	f040 810c 	bne.w	8003198 <LL_USART_SetBaudRate+0x23c>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 8002f80:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8002f84:	2200      	movs	r2, #0
 8002f86:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8002f8a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8002f8e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8002f92:	4622      	mov	r2, r4
 8002f94:	462b      	mov	r3, r5
 8002f96:	1891      	adds	r1, r2, r2
 8002f98:	6639      	str	r1, [r7, #96]	@ 0x60
 8002f9a:	415b      	adcs	r3, r3
 8002f9c:	667b      	str	r3, [r7, #100]	@ 0x64
 8002f9e:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 8002fa2:	4621      	mov	r1, r4
 8002fa4:	eb12 0801 	adds.w	r8, r2, r1
 8002fa8:	4629      	mov	r1, r5
 8002faa:	eb43 0901 	adc.w	r9, r3, r1
 8002fae:	f04f 0200 	mov.w	r2, #0
 8002fb2:	f04f 0300 	mov.w	r3, #0
 8002fb6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002fba:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002fbe:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002fc2:	4690      	mov	r8, r2
 8002fc4:	4699      	mov	r9, r3
 8002fc6:	4623      	mov	r3, r4
 8002fc8:	eb18 0303 	adds.w	r3, r8, r3
 8002fcc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8002fd0:	462b      	mov	r3, r5
 8002fd2:	eb49 0303 	adc.w	r3, r9, r3
 8002fd6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8002fda:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8002fde:	2200      	movs	r2, #0
 8002fe0:	469a      	mov	sl, r3
 8002fe2:	4693      	mov	fp, r2
 8002fe4:	eb1a 030a 	adds.w	r3, sl, sl
 8002fe8:	65bb      	str	r3, [r7, #88]	@ 0x58
 8002fea:	eb4b 030b 	adc.w	r3, fp, fp
 8002fee:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002ff0:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002ff4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8002ff8:	f7fd f942 	bl	8000280 <__aeabi_uldivmod>
 8002ffc:	4602      	mov	r2, r0
 8002ffe:	460b      	mov	r3, r1
 8003000:	4b64      	ldr	r3, [pc, #400]	@ (8003194 <LL_USART_SetBaudRate+0x238>)
 8003002:	fba3 2302 	umull	r2, r3, r3, r2
 8003006:	095b      	lsrs	r3, r3, #5
 8003008:	b29b      	uxth	r3, r3
 800300a:	011b      	lsls	r3, r3, #4
 800300c:	b29c      	uxth	r4, r3
 800300e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8003012:	2200      	movs	r2, #0
 8003014:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003018:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800301c:	e9d7 8936 	ldrd	r8, r9, [r7, #216]	@ 0xd8
 8003020:	4642      	mov	r2, r8
 8003022:	464b      	mov	r3, r9
 8003024:	1891      	adds	r1, r2, r2
 8003026:	6539      	str	r1, [r7, #80]	@ 0x50
 8003028:	415b      	adcs	r3, r3
 800302a:	657b      	str	r3, [r7, #84]	@ 0x54
 800302c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003030:	4641      	mov	r1, r8
 8003032:	1851      	adds	r1, r2, r1
 8003034:	64b9      	str	r1, [r7, #72]	@ 0x48
 8003036:	4649      	mov	r1, r9
 8003038:	414b      	adcs	r3, r1
 800303a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800303c:	f04f 0200 	mov.w	r2, #0
 8003040:	f04f 0300 	mov.w	r3, #0
 8003044:	e9d7 ab12 	ldrd	sl, fp, [r7, #72]	@ 0x48
 8003048:	4659      	mov	r1, fp
 800304a:	00cb      	lsls	r3, r1, #3
 800304c:	4651      	mov	r1, sl
 800304e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003052:	4651      	mov	r1, sl
 8003054:	00ca      	lsls	r2, r1, #3
 8003056:	4610      	mov	r0, r2
 8003058:	4619      	mov	r1, r3
 800305a:	4603      	mov	r3, r0
 800305c:	4642      	mov	r2, r8
 800305e:	189b      	adds	r3, r3, r2
 8003060:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003064:	464b      	mov	r3, r9
 8003066:	460a      	mov	r2, r1
 8003068:	eb42 0303 	adc.w	r3, r2, r3
 800306c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8003070:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8003074:	2200      	movs	r2, #0
 8003076:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800307a:	f8c7 20cc 	str.w	r2, [r7, #204]	@ 0xcc
 800307e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8003082:	460b      	mov	r3, r1
 8003084:	18db      	adds	r3, r3, r3
 8003086:	643b      	str	r3, [r7, #64]	@ 0x40
 8003088:	4613      	mov	r3, r2
 800308a:	eb42 0303 	adc.w	r3, r2, r3
 800308e:	647b      	str	r3, [r7, #68]	@ 0x44
 8003090:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8003094:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	@ 0xd0
 8003098:	f7fd f8f2 	bl	8000280 <__aeabi_uldivmod>
 800309c:	4602      	mov	r2, r0
 800309e:	460b      	mov	r3, r1
 80030a0:	4611      	mov	r1, r2
 80030a2:	4b3c      	ldr	r3, [pc, #240]	@ (8003194 <LL_USART_SetBaudRate+0x238>)
 80030a4:	fba3 2301 	umull	r2, r3, r3, r1
 80030a8:	095b      	lsrs	r3, r3, #5
 80030aa:	2264      	movs	r2, #100	@ 0x64
 80030ac:	fb02 f303 	mul.w	r3, r2, r3
 80030b0:	1acb      	subs	r3, r1, r3
 80030b2:	00db      	lsls	r3, r3, #3
 80030b4:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80030b8:	4b36      	ldr	r3, [pc, #216]	@ (8003194 <LL_USART_SetBaudRate+0x238>)
 80030ba:	fba3 2302 	umull	r2, r3, r3, r2
 80030be:	095b      	lsrs	r3, r3, #5
 80030c0:	b29b      	uxth	r3, r3
 80030c2:	005b      	lsls	r3, r3, #1
 80030c4:	b29b      	uxth	r3, r3
 80030c6:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80030ca:	b29b      	uxth	r3, r3
 80030cc:	4423      	add	r3, r4
 80030ce:	b29c      	uxth	r4, r3
 80030d0:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80030d4:	2200      	movs	r2, #0
 80030d6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80030da:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80030de:	e9d7 8930 	ldrd	r8, r9, [r7, #192]	@ 0xc0
 80030e2:	4642      	mov	r2, r8
 80030e4:	464b      	mov	r3, r9
 80030e6:	1891      	adds	r1, r2, r2
 80030e8:	63b9      	str	r1, [r7, #56]	@ 0x38
 80030ea:	415b      	adcs	r3, r3
 80030ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80030ee:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80030f2:	4641      	mov	r1, r8
 80030f4:	1851      	adds	r1, r2, r1
 80030f6:	6339      	str	r1, [r7, #48]	@ 0x30
 80030f8:	4649      	mov	r1, r9
 80030fa:	414b      	adcs	r3, r1
 80030fc:	637b      	str	r3, [r7, #52]	@ 0x34
 80030fe:	f04f 0200 	mov.w	r2, #0
 8003102:	f04f 0300 	mov.w	r3, #0
 8003106:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800310a:	4659      	mov	r1, fp
 800310c:	00cb      	lsls	r3, r1, #3
 800310e:	4651      	mov	r1, sl
 8003110:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003114:	4651      	mov	r1, sl
 8003116:	00ca      	lsls	r2, r1, #3
 8003118:	4610      	mov	r0, r2
 800311a:	4619      	mov	r1, r3
 800311c:	4603      	mov	r3, r0
 800311e:	4642      	mov	r2, r8
 8003120:	189b      	adds	r3, r3, r2
 8003122:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003126:	464b      	mov	r3, r9
 8003128:	460a      	mov	r2, r1
 800312a:	eb42 0303 	adc.w	r3, r2, r3
 800312e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8003132:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8003136:	2200      	movs	r2, #0
 8003138:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800313c:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
 8003140:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8003144:	460b      	mov	r3, r1
 8003146:	18db      	adds	r3, r3, r3
 8003148:	62bb      	str	r3, [r7, #40]	@ 0x28
 800314a:	4613      	mov	r3, r2
 800314c:	eb42 0303 	adc.w	r3, r2, r3
 8003150:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003152:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003156:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	@ 0xb8
 800315a:	f7fd f891 	bl	8000280 <__aeabi_uldivmod>
 800315e:	4602      	mov	r2, r0
 8003160:	460b      	mov	r3, r1
 8003162:	4b0c      	ldr	r3, [pc, #48]	@ (8003194 <LL_USART_SetBaudRate+0x238>)
 8003164:	fba3 1302 	umull	r1, r3, r3, r2
 8003168:	095b      	lsrs	r3, r3, #5
 800316a:	2164      	movs	r1, #100	@ 0x64
 800316c:	fb01 f303 	mul.w	r3, r1, r3
 8003170:	1ad3      	subs	r3, r2, r3
 8003172:	00db      	lsls	r3, r3, #3
 8003174:	3332      	adds	r3, #50	@ 0x32
 8003176:	4a07      	ldr	r2, [pc, #28]	@ (8003194 <LL_USART_SetBaudRate+0x238>)
 8003178:	fba2 2303 	umull	r2, r3, r2, r3
 800317c:	095b      	lsrs	r3, r3, #5
 800317e:	b29b      	uxth	r3, r3
 8003180:	f003 0307 	and.w	r3, r3, #7
 8003184:	b29b      	uxth	r3, r3
 8003186:	4423      	add	r3, r4
 8003188:	b29b      	uxth	r3, r3
 800318a:	461a      	mov	r2, r3
 800318c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003190:	609a      	str	r2, [r3, #8]
}
 8003192:	e108      	b.n	80033a6 <LL_USART_SetBaudRate+0x44a>
 8003194:	51eb851f 	.word	0x51eb851f
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8003198:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800319c:	2200      	movs	r2, #0
 800319e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80031a2:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80031a6:	e9d7 892a 	ldrd	r8, r9, [r7, #168]	@ 0xa8
 80031aa:	4642      	mov	r2, r8
 80031ac:	464b      	mov	r3, r9
 80031ae:	1891      	adds	r1, r2, r2
 80031b0:	6239      	str	r1, [r7, #32]
 80031b2:	415b      	adcs	r3, r3
 80031b4:	627b      	str	r3, [r7, #36]	@ 0x24
 80031b6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80031ba:	4641      	mov	r1, r8
 80031bc:	1854      	adds	r4, r2, r1
 80031be:	4649      	mov	r1, r9
 80031c0:	eb43 0501 	adc.w	r5, r3, r1
 80031c4:	f04f 0200 	mov.w	r2, #0
 80031c8:	f04f 0300 	mov.w	r3, #0
 80031cc:	00eb      	lsls	r3, r5, #3
 80031ce:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80031d2:	00e2      	lsls	r2, r4, #3
 80031d4:	4614      	mov	r4, r2
 80031d6:	461d      	mov	r5, r3
 80031d8:	4643      	mov	r3, r8
 80031da:	18e3      	adds	r3, r4, r3
 80031dc:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80031e0:	464b      	mov	r3, r9
 80031e2:	eb45 0303 	adc.w	r3, r5, r3
 80031e6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80031ea:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80031ee:	2200      	movs	r2, #0
 80031f0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80031f4:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 80031f8:	f04f 0200 	mov.w	r2, #0
 80031fc:	f04f 0300 	mov.w	r3, #0
 8003200:	e9d7 4526 	ldrd	r4, r5, [r7, #152]	@ 0x98
 8003204:	4629      	mov	r1, r5
 8003206:	008b      	lsls	r3, r1, #2
 8003208:	4621      	mov	r1, r4
 800320a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800320e:	4621      	mov	r1, r4
 8003210:	008a      	lsls	r2, r1, #2
 8003212:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	@ 0xa0
 8003216:	f7fd f833 	bl	8000280 <__aeabi_uldivmod>
 800321a:	4602      	mov	r2, r0
 800321c:	460b      	mov	r3, r1
 800321e:	4b65      	ldr	r3, [pc, #404]	@ (80033b4 <LL_USART_SetBaudRate+0x458>)
 8003220:	fba3 2302 	umull	r2, r3, r3, r2
 8003224:	095b      	lsrs	r3, r3, #5
 8003226:	b29b      	uxth	r3, r3
 8003228:	011b      	lsls	r3, r3, #4
 800322a:	b29c      	uxth	r4, r3
 800322c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8003230:	2200      	movs	r2, #0
 8003232:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003236:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800323a:	e9d7 8924 	ldrd	r8, r9, [r7, #144]	@ 0x90
 800323e:	4642      	mov	r2, r8
 8003240:	464b      	mov	r3, r9
 8003242:	1891      	adds	r1, r2, r2
 8003244:	61b9      	str	r1, [r7, #24]
 8003246:	415b      	adcs	r3, r3
 8003248:	61fb      	str	r3, [r7, #28]
 800324a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800324e:	4641      	mov	r1, r8
 8003250:	1851      	adds	r1, r2, r1
 8003252:	6139      	str	r1, [r7, #16]
 8003254:	4649      	mov	r1, r9
 8003256:	414b      	adcs	r3, r1
 8003258:	617b      	str	r3, [r7, #20]
 800325a:	f04f 0200 	mov.w	r2, #0
 800325e:	f04f 0300 	mov.w	r3, #0
 8003262:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003266:	4659      	mov	r1, fp
 8003268:	00cb      	lsls	r3, r1, #3
 800326a:	4651      	mov	r1, sl
 800326c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003270:	4651      	mov	r1, sl
 8003272:	00ca      	lsls	r2, r1, #3
 8003274:	4610      	mov	r0, r2
 8003276:	4619      	mov	r1, r3
 8003278:	4603      	mov	r3, r0
 800327a:	4642      	mov	r2, r8
 800327c:	189b      	adds	r3, r3, r2
 800327e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003282:	464b      	mov	r3, r9
 8003284:	460a      	mov	r2, r1
 8003286:	eb42 0303 	adc.w	r3, r2, r3
 800328a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800328e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8003292:	2200      	movs	r2, #0
 8003294:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003298:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 800329c:	f04f 0200 	mov.w	r2, #0
 80032a0:	f04f 0300 	mov.w	r3, #0
 80032a4:	e9d7 8920 	ldrd	r8, r9, [r7, #128]	@ 0x80
 80032a8:	4649      	mov	r1, r9
 80032aa:	008b      	lsls	r3, r1, #2
 80032ac:	4641      	mov	r1, r8
 80032ae:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80032b2:	4641      	mov	r1, r8
 80032b4:	008a      	lsls	r2, r1, #2
 80032b6:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	@ 0x88
 80032ba:	f7fc ffe1 	bl	8000280 <__aeabi_uldivmod>
 80032be:	4602      	mov	r2, r0
 80032c0:	460b      	mov	r3, r1
 80032c2:	4611      	mov	r1, r2
 80032c4:	4b3b      	ldr	r3, [pc, #236]	@ (80033b4 <LL_USART_SetBaudRate+0x458>)
 80032c6:	fba3 2301 	umull	r2, r3, r3, r1
 80032ca:	095b      	lsrs	r3, r3, #5
 80032cc:	2264      	movs	r2, #100	@ 0x64
 80032ce:	fb02 f303 	mul.w	r3, r2, r3
 80032d2:	1acb      	subs	r3, r1, r3
 80032d4:	011b      	lsls	r3, r3, #4
 80032d6:	3332      	adds	r3, #50	@ 0x32
 80032d8:	4a36      	ldr	r2, [pc, #216]	@ (80033b4 <LL_USART_SetBaudRate+0x458>)
 80032da:	fba2 2303 	umull	r2, r3, r2, r3
 80032de:	095b      	lsrs	r3, r3, #5
 80032e0:	b29b      	uxth	r3, r3
 80032e2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80032e6:	b29b      	uxth	r3, r3
 80032e8:	4423      	add	r3, r4
 80032ea:	b29c      	uxth	r4, r3
 80032ec:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80032f0:	2200      	movs	r2, #0
 80032f2:	67bb      	str	r3, [r7, #120]	@ 0x78
 80032f4:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80032f6:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80032fa:	4642      	mov	r2, r8
 80032fc:	464b      	mov	r3, r9
 80032fe:	1891      	adds	r1, r2, r2
 8003300:	60b9      	str	r1, [r7, #8]
 8003302:	415b      	adcs	r3, r3
 8003304:	60fb      	str	r3, [r7, #12]
 8003306:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800330a:	4641      	mov	r1, r8
 800330c:	1851      	adds	r1, r2, r1
 800330e:	6039      	str	r1, [r7, #0]
 8003310:	4649      	mov	r1, r9
 8003312:	414b      	adcs	r3, r1
 8003314:	607b      	str	r3, [r7, #4]
 8003316:	f04f 0200 	mov.w	r2, #0
 800331a:	f04f 0300 	mov.w	r3, #0
 800331e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003322:	4659      	mov	r1, fp
 8003324:	00cb      	lsls	r3, r1, #3
 8003326:	4651      	mov	r1, sl
 8003328:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800332c:	4651      	mov	r1, sl
 800332e:	00ca      	lsls	r2, r1, #3
 8003330:	4610      	mov	r0, r2
 8003332:	4619      	mov	r1, r3
 8003334:	4603      	mov	r3, r0
 8003336:	4642      	mov	r2, r8
 8003338:	189b      	adds	r3, r3, r2
 800333a:	673b      	str	r3, [r7, #112]	@ 0x70
 800333c:	464b      	mov	r3, r9
 800333e:	460a      	mov	r2, r1
 8003340:	eb42 0303 	adc.w	r3, r2, r3
 8003344:	677b      	str	r3, [r7, #116]	@ 0x74
 8003346:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800334a:	2200      	movs	r2, #0
 800334c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800334e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003350:	f04f 0200 	mov.w	r2, #0
 8003354:	f04f 0300 	mov.w	r3, #0
 8003358:	e9d7 891a 	ldrd	r8, r9, [r7, #104]	@ 0x68
 800335c:	4649      	mov	r1, r9
 800335e:	008b      	lsls	r3, r1, #2
 8003360:	4641      	mov	r1, r8
 8003362:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003366:	4641      	mov	r1, r8
 8003368:	008a      	lsls	r2, r1, #2
 800336a:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 800336e:	f7fc ff87 	bl	8000280 <__aeabi_uldivmod>
 8003372:	4602      	mov	r2, r0
 8003374:	460b      	mov	r3, r1
 8003376:	4b0f      	ldr	r3, [pc, #60]	@ (80033b4 <LL_USART_SetBaudRate+0x458>)
 8003378:	fba3 1302 	umull	r1, r3, r3, r2
 800337c:	095b      	lsrs	r3, r3, #5
 800337e:	2164      	movs	r1, #100	@ 0x64
 8003380:	fb01 f303 	mul.w	r3, r1, r3
 8003384:	1ad3      	subs	r3, r2, r3
 8003386:	011b      	lsls	r3, r3, #4
 8003388:	3332      	adds	r3, #50	@ 0x32
 800338a:	4a0a      	ldr	r2, [pc, #40]	@ (80033b4 <LL_USART_SetBaudRate+0x458>)
 800338c:	fba2 2303 	umull	r2, r3, r2, r3
 8003390:	095b      	lsrs	r3, r3, #5
 8003392:	b29b      	uxth	r3, r3
 8003394:	f003 030f 	and.w	r3, r3, #15
 8003398:	b29b      	uxth	r3, r3
 800339a:	4423      	add	r3, r4
 800339c:	b29b      	uxth	r3, r3
 800339e:	461a      	mov	r2, r3
 80033a0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80033a4:	609a      	str	r2, [r3, #8]
}
 80033a6:	bf00      	nop
 80033a8:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80033ac:	46bd      	mov	sp, r7
 80033ae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80033b2:	bf00      	nop
 80033b4:	51eb851f 	.word	0x51eb851f

080033b8 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, const LL_USART_InitTypeDef *USART_InitStruct)
{
 80033b8:	b580      	push	{r7, lr}
 80033ba:	b088      	sub	sp, #32
 80033bc:	af00      	add	r7, sp, #0
 80033be:	6078      	str	r0, [r7, #4]
 80033c0:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 80033c2:	2301      	movs	r3, #1
 80033c4:	77fb      	strb	r3, [r7, #31]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 80033c6:	2300      	movs	r3, #0
 80033c8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 80033ca:	6878      	ldr	r0, [r7, #4]
 80033cc:	f7ff fd8c 	bl	8002ee8 <LL_USART_IsEnabled>
 80033d0:	4603      	mov	r3, r0
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d15e      	bne.n	8003494 <LL_USART_Init+0xdc>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	68db      	ldr	r3, [r3, #12]
 80033da:	f423 4316 	bic.w	r3, r3, #38400	@ 0x9600
 80033de:	f023 030c 	bic.w	r3, r3, #12
 80033e2:	683a      	ldr	r2, [r7, #0]
 80033e4:	6851      	ldr	r1, [r2, #4]
 80033e6:	683a      	ldr	r2, [r7, #0]
 80033e8:	68d2      	ldr	r2, [r2, #12]
 80033ea:	4311      	orrs	r1, r2
 80033ec:	683a      	ldr	r2, [r7, #0]
 80033ee:	6912      	ldr	r2, [r2, #16]
 80033f0:	4311      	orrs	r1, r2
 80033f2:	683a      	ldr	r2, [r7, #0]
 80033f4:	6992      	ldr	r2, [r2, #24]
 80033f6:	430a      	orrs	r2, r1
 80033f8:	431a      	orrs	r2, r3
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	60da      	str	r2, [r3, #12]
    /*---------------------------- USART CR2 Configuration -----------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 80033fe:	683b      	ldr	r3, [r7, #0]
 8003400:	689b      	ldr	r3, [r3, #8]
 8003402:	4619      	mov	r1, r3
 8003404:	6878      	ldr	r0, [r7, #4]
 8003406:	f7ff fd83 	bl	8002f10 <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration -----------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 800340a:	683b      	ldr	r3, [r7, #0]
 800340c:	695b      	ldr	r3, [r3, #20]
 800340e:	4619      	mov	r1, r3
 8003410:	6878      	ldr	r0, [r7, #4]
 8003412:	f7ff fd90 	bl	8002f36 <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration -----------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 8003416:	f107 0308 	add.w	r3, r7, #8
 800341a:	4618      	mov	r0, r3
 800341c:	f7ff fc9a 	bl	8002d54 <LL_RCC_GetSystemClocksFreq>
    if (USARTx == USART1)
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	4a1f      	ldr	r2, [pc, #124]	@ (80034a0 <LL_USART_Init+0xe8>)
 8003424:	4293      	cmp	r3, r2
 8003426:	d102      	bne.n	800342e <LL_USART_Init+0x76>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 8003428:	697b      	ldr	r3, [r7, #20]
 800342a:	61bb      	str	r3, [r7, #24]
 800342c:	e021      	b.n	8003472 <LL_USART_Init+0xba>
    }
    else if (USARTx == USART2)
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	4a1c      	ldr	r2, [pc, #112]	@ (80034a4 <LL_USART_Init+0xec>)
 8003432:	4293      	cmp	r3, r2
 8003434:	d102      	bne.n	800343c <LL_USART_Init+0x84>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8003436:	693b      	ldr	r3, [r7, #16]
 8003438:	61bb      	str	r3, [r7, #24]
 800343a:	e01a      	b.n	8003472 <LL_USART_Init+0xba>
    }
#if defined(USART3)
    else if (USARTx == USART3)
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	4a1a      	ldr	r2, [pc, #104]	@ (80034a8 <LL_USART_Init+0xf0>)
 8003440:	4293      	cmp	r3, r2
 8003442:	d102      	bne.n	800344a <LL_USART_Init+0x92>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8003444:	693b      	ldr	r3, [r7, #16]
 8003446:	61bb      	str	r3, [r7, #24]
 8003448:	e013      	b.n	8003472 <LL_USART_Init+0xba>
    }
#endif /* USART3 */
#if defined(USART6)
    else if (USARTx == USART6)
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	4a17      	ldr	r2, [pc, #92]	@ (80034ac <LL_USART_Init+0xf4>)
 800344e:	4293      	cmp	r3, r2
 8003450:	d102      	bne.n	8003458 <LL_USART_Init+0xa0>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 8003452:	697b      	ldr	r3, [r7, #20]
 8003454:	61bb      	str	r3, [r7, #24]
 8003456:	e00c      	b.n	8003472 <LL_USART_Init+0xba>
    }
#endif /* USART6 */
#if defined(UART4)
    else if (USARTx == UART4)
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	4a15      	ldr	r2, [pc, #84]	@ (80034b0 <LL_USART_Init+0xf8>)
 800345c:	4293      	cmp	r3, r2
 800345e:	d102      	bne.n	8003466 <LL_USART_Init+0xae>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8003460:	693b      	ldr	r3, [r7, #16]
 8003462:	61bb      	str	r3, [r7, #24]
 8003464:	e005      	b.n	8003472 <LL_USART_Init+0xba>
    }
#endif /* UART4 */
#if defined(UART5)
    else if (USARTx == UART5)
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	4a12      	ldr	r2, [pc, #72]	@ (80034b4 <LL_USART_Init+0xfc>)
 800346a:	4293      	cmp	r3, r2
 800346c:	d101      	bne.n	8003472 <LL_USART_Init+0xba>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 800346e:	693b      	ldr	r3, [r7, #16]
 8003470:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 8003472:	69bb      	ldr	r3, [r7, #24]
 8003474:	2b00      	cmp	r3, #0
 8003476:	d00d      	beq.n	8003494 <LL_USART_Init+0xdc>
        && (USART_InitStruct->BaudRate != 0U))
 8003478:	683b      	ldr	r3, [r7, #0]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	2b00      	cmp	r3, #0
 800347e:	d009      	beq.n	8003494 <LL_USART_Init+0xdc>
    {
      status = SUCCESS;
 8003480:	2300      	movs	r3, #0
 8003482:	77fb      	strb	r3, [r7, #31]
      LL_USART_SetBaudRate(USARTx,
                           periphclk,
                           USART_InitStruct->OverSampling,
 8003484:	683b      	ldr	r3, [r7, #0]
 8003486:	699a      	ldr	r2, [r3, #24]
                           USART_InitStruct->BaudRate);
 8003488:	683b      	ldr	r3, [r7, #0]
 800348a:	681b      	ldr	r3, [r3, #0]
      LL_USART_SetBaudRate(USARTx,
 800348c:	69b9      	ldr	r1, [r7, #24]
 800348e:	6878      	ldr	r0, [r7, #4]
 8003490:	f7ff fd64 	bl	8002f5c <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MIN(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 8003494:	7ffb      	ldrb	r3, [r7, #31]
}
 8003496:	4618      	mov	r0, r3
 8003498:	3720      	adds	r7, #32
 800349a:	46bd      	mov	sp, r7
 800349c:	bd80      	pop	{r7, pc}
 800349e:	bf00      	nop
 80034a0:	40011000 	.word	0x40011000
 80034a4:	40004400 	.word	0x40004400
 80034a8:	40004800 	.word	0x40004800
 80034ac:	40011400 	.word	0x40011400
 80034b0:	40004c00 	.word	0x40004c00
 80034b4:	40005000 	.word	0x40005000

080034b8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80034b8:	b084      	sub	sp, #16
 80034ba:	b580      	push	{r7, lr}
 80034bc:	b084      	sub	sp, #16
 80034be:	af00      	add	r7, sp, #0
 80034c0:	6078      	str	r0, [r7, #4]
 80034c2:	f107 001c 	add.w	r0, r7, #28
 80034c6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80034ca:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80034ce:	2b01      	cmp	r3, #1
 80034d0:	d123      	bne.n	800351a <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80034d6:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	68db      	ldr	r3, [r3, #12]
 80034e2:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 80034e6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80034ea:	687a      	ldr	r2, [r7, #4]
 80034ec:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	68db      	ldr	r3, [r3, #12]
 80034f2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80034fa:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80034fe:	2b01      	cmp	r3, #1
 8003500:	d105      	bne.n	800350e <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	68db      	ldr	r3, [r3, #12]
 8003506:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800350e:	6878      	ldr	r0, [r7, #4]
 8003510:	f001 fae8 	bl	8004ae4 <USB_CoreReset>
 8003514:	4603      	mov	r3, r0
 8003516:	73fb      	strb	r3, [r7, #15]
 8003518:	e01b      	b.n	8003552 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	68db      	ldr	r3, [r3, #12]
 800351e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003526:	6878      	ldr	r0, [r7, #4]
 8003528:	f001 fadc 	bl	8004ae4 <USB_CoreReset>
 800352c:	4603      	mov	r3, r0
 800352e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8003530:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8003534:	2b00      	cmp	r3, #0
 8003536:	d106      	bne.n	8003546 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800353c:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	639a      	str	r2, [r3, #56]	@ 0x38
 8003544:	e005      	b.n	8003552 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800354a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8003552:	7fbb      	ldrb	r3, [r7, #30]
 8003554:	2b01      	cmp	r3, #1
 8003556:	d10b      	bne.n	8003570 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	689b      	ldr	r3, [r3, #8]
 800355c:	f043 0206 	orr.w	r2, r3, #6
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	689b      	ldr	r3, [r3, #8]
 8003568:	f043 0220 	orr.w	r2, r3, #32
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8003570:	7bfb      	ldrb	r3, [r7, #15]
}
 8003572:	4618      	mov	r0, r3
 8003574:	3710      	adds	r7, #16
 8003576:	46bd      	mov	sp, r7
 8003578:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800357c:	b004      	add	sp, #16
 800357e:	4770      	bx	lr

08003580 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8003580:	b480      	push	{r7}
 8003582:	b087      	sub	sp, #28
 8003584:	af00      	add	r7, sp, #0
 8003586:	60f8      	str	r0, [r7, #12]
 8003588:	60b9      	str	r1, [r7, #8]
 800358a:	4613      	mov	r3, r2
 800358c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800358e:	79fb      	ldrb	r3, [r7, #7]
 8003590:	2b02      	cmp	r3, #2
 8003592:	d165      	bne.n	8003660 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8003594:	68bb      	ldr	r3, [r7, #8]
 8003596:	4a41      	ldr	r2, [pc, #260]	@ (800369c <USB_SetTurnaroundTime+0x11c>)
 8003598:	4293      	cmp	r3, r2
 800359a:	d906      	bls.n	80035aa <USB_SetTurnaroundTime+0x2a>
 800359c:	68bb      	ldr	r3, [r7, #8]
 800359e:	4a40      	ldr	r2, [pc, #256]	@ (80036a0 <USB_SetTurnaroundTime+0x120>)
 80035a0:	4293      	cmp	r3, r2
 80035a2:	d202      	bcs.n	80035aa <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80035a4:	230f      	movs	r3, #15
 80035a6:	617b      	str	r3, [r7, #20]
 80035a8:	e062      	b.n	8003670 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80035aa:	68bb      	ldr	r3, [r7, #8]
 80035ac:	4a3c      	ldr	r2, [pc, #240]	@ (80036a0 <USB_SetTurnaroundTime+0x120>)
 80035ae:	4293      	cmp	r3, r2
 80035b0:	d306      	bcc.n	80035c0 <USB_SetTurnaroundTime+0x40>
 80035b2:	68bb      	ldr	r3, [r7, #8]
 80035b4:	4a3b      	ldr	r2, [pc, #236]	@ (80036a4 <USB_SetTurnaroundTime+0x124>)
 80035b6:	4293      	cmp	r3, r2
 80035b8:	d202      	bcs.n	80035c0 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80035ba:	230e      	movs	r3, #14
 80035bc:	617b      	str	r3, [r7, #20]
 80035be:	e057      	b.n	8003670 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80035c0:	68bb      	ldr	r3, [r7, #8]
 80035c2:	4a38      	ldr	r2, [pc, #224]	@ (80036a4 <USB_SetTurnaroundTime+0x124>)
 80035c4:	4293      	cmp	r3, r2
 80035c6:	d306      	bcc.n	80035d6 <USB_SetTurnaroundTime+0x56>
 80035c8:	68bb      	ldr	r3, [r7, #8]
 80035ca:	4a37      	ldr	r2, [pc, #220]	@ (80036a8 <USB_SetTurnaroundTime+0x128>)
 80035cc:	4293      	cmp	r3, r2
 80035ce:	d202      	bcs.n	80035d6 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80035d0:	230d      	movs	r3, #13
 80035d2:	617b      	str	r3, [r7, #20]
 80035d4:	e04c      	b.n	8003670 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80035d6:	68bb      	ldr	r3, [r7, #8]
 80035d8:	4a33      	ldr	r2, [pc, #204]	@ (80036a8 <USB_SetTurnaroundTime+0x128>)
 80035da:	4293      	cmp	r3, r2
 80035dc:	d306      	bcc.n	80035ec <USB_SetTurnaroundTime+0x6c>
 80035de:	68bb      	ldr	r3, [r7, #8]
 80035e0:	4a32      	ldr	r2, [pc, #200]	@ (80036ac <USB_SetTurnaroundTime+0x12c>)
 80035e2:	4293      	cmp	r3, r2
 80035e4:	d802      	bhi.n	80035ec <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80035e6:	230c      	movs	r3, #12
 80035e8:	617b      	str	r3, [r7, #20]
 80035ea:	e041      	b.n	8003670 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80035ec:	68bb      	ldr	r3, [r7, #8]
 80035ee:	4a2f      	ldr	r2, [pc, #188]	@ (80036ac <USB_SetTurnaroundTime+0x12c>)
 80035f0:	4293      	cmp	r3, r2
 80035f2:	d906      	bls.n	8003602 <USB_SetTurnaroundTime+0x82>
 80035f4:	68bb      	ldr	r3, [r7, #8]
 80035f6:	4a2e      	ldr	r2, [pc, #184]	@ (80036b0 <USB_SetTurnaroundTime+0x130>)
 80035f8:	4293      	cmp	r3, r2
 80035fa:	d802      	bhi.n	8003602 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80035fc:	230b      	movs	r3, #11
 80035fe:	617b      	str	r3, [r7, #20]
 8003600:	e036      	b.n	8003670 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8003602:	68bb      	ldr	r3, [r7, #8]
 8003604:	4a2a      	ldr	r2, [pc, #168]	@ (80036b0 <USB_SetTurnaroundTime+0x130>)
 8003606:	4293      	cmp	r3, r2
 8003608:	d906      	bls.n	8003618 <USB_SetTurnaroundTime+0x98>
 800360a:	68bb      	ldr	r3, [r7, #8]
 800360c:	4a29      	ldr	r2, [pc, #164]	@ (80036b4 <USB_SetTurnaroundTime+0x134>)
 800360e:	4293      	cmp	r3, r2
 8003610:	d802      	bhi.n	8003618 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8003612:	230a      	movs	r3, #10
 8003614:	617b      	str	r3, [r7, #20]
 8003616:	e02b      	b.n	8003670 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8003618:	68bb      	ldr	r3, [r7, #8]
 800361a:	4a26      	ldr	r2, [pc, #152]	@ (80036b4 <USB_SetTurnaroundTime+0x134>)
 800361c:	4293      	cmp	r3, r2
 800361e:	d906      	bls.n	800362e <USB_SetTurnaroundTime+0xae>
 8003620:	68bb      	ldr	r3, [r7, #8]
 8003622:	4a25      	ldr	r2, [pc, #148]	@ (80036b8 <USB_SetTurnaroundTime+0x138>)
 8003624:	4293      	cmp	r3, r2
 8003626:	d202      	bcs.n	800362e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8003628:	2309      	movs	r3, #9
 800362a:	617b      	str	r3, [r7, #20]
 800362c:	e020      	b.n	8003670 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800362e:	68bb      	ldr	r3, [r7, #8]
 8003630:	4a21      	ldr	r2, [pc, #132]	@ (80036b8 <USB_SetTurnaroundTime+0x138>)
 8003632:	4293      	cmp	r3, r2
 8003634:	d306      	bcc.n	8003644 <USB_SetTurnaroundTime+0xc4>
 8003636:	68bb      	ldr	r3, [r7, #8]
 8003638:	4a20      	ldr	r2, [pc, #128]	@ (80036bc <USB_SetTurnaroundTime+0x13c>)
 800363a:	4293      	cmp	r3, r2
 800363c:	d802      	bhi.n	8003644 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800363e:	2308      	movs	r3, #8
 8003640:	617b      	str	r3, [r7, #20]
 8003642:	e015      	b.n	8003670 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8003644:	68bb      	ldr	r3, [r7, #8]
 8003646:	4a1d      	ldr	r2, [pc, #116]	@ (80036bc <USB_SetTurnaroundTime+0x13c>)
 8003648:	4293      	cmp	r3, r2
 800364a:	d906      	bls.n	800365a <USB_SetTurnaroundTime+0xda>
 800364c:	68bb      	ldr	r3, [r7, #8]
 800364e:	4a1c      	ldr	r2, [pc, #112]	@ (80036c0 <USB_SetTurnaroundTime+0x140>)
 8003650:	4293      	cmp	r3, r2
 8003652:	d202      	bcs.n	800365a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8003654:	2307      	movs	r3, #7
 8003656:	617b      	str	r3, [r7, #20]
 8003658:	e00a      	b.n	8003670 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800365a:	2306      	movs	r3, #6
 800365c:	617b      	str	r3, [r7, #20]
 800365e:	e007      	b.n	8003670 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8003660:	79fb      	ldrb	r3, [r7, #7]
 8003662:	2b00      	cmp	r3, #0
 8003664:	d102      	bne.n	800366c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8003666:	2309      	movs	r3, #9
 8003668:	617b      	str	r3, [r7, #20]
 800366a:	e001      	b.n	8003670 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800366c:	2309      	movs	r3, #9
 800366e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	68db      	ldr	r3, [r3, #12]
 8003674:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	68da      	ldr	r2, [r3, #12]
 8003680:	697b      	ldr	r3, [r7, #20]
 8003682:	029b      	lsls	r3, r3, #10
 8003684:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8003688:	431a      	orrs	r2, r3
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800368e:	2300      	movs	r3, #0
}
 8003690:	4618      	mov	r0, r3
 8003692:	371c      	adds	r7, #28
 8003694:	46bd      	mov	sp, r7
 8003696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800369a:	4770      	bx	lr
 800369c:	00d8acbf 	.word	0x00d8acbf
 80036a0:	00e4e1c0 	.word	0x00e4e1c0
 80036a4:	00f42400 	.word	0x00f42400
 80036a8:	01067380 	.word	0x01067380
 80036ac:	011a499f 	.word	0x011a499f
 80036b0:	01312cff 	.word	0x01312cff
 80036b4:	014ca43f 	.word	0x014ca43f
 80036b8:	016e3600 	.word	0x016e3600
 80036bc:	01a6ab1f 	.word	0x01a6ab1f
 80036c0:	01e84800 	.word	0x01e84800

080036c4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80036c4:	b480      	push	{r7}
 80036c6:	b083      	sub	sp, #12
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	689b      	ldr	r3, [r3, #8]
 80036d0:	f043 0201 	orr.w	r2, r3, #1
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80036d8:	2300      	movs	r3, #0
}
 80036da:	4618      	mov	r0, r3
 80036dc:	370c      	adds	r7, #12
 80036de:	46bd      	mov	sp, r7
 80036e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e4:	4770      	bx	lr

080036e6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80036e6:	b480      	push	{r7}
 80036e8:	b083      	sub	sp, #12
 80036ea:	af00      	add	r7, sp, #0
 80036ec:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	689b      	ldr	r3, [r3, #8]
 80036f2:	f023 0201 	bic.w	r2, r3, #1
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80036fa:	2300      	movs	r3, #0
}
 80036fc:	4618      	mov	r0, r3
 80036fe:	370c      	adds	r7, #12
 8003700:	46bd      	mov	sp, r7
 8003702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003706:	4770      	bx	lr

08003708 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8003708:	b580      	push	{r7, lr}
 800370a:	b084      	sub	sp, #16
 800370c:	af00      	add	r7, sp, #0
 800370e:	6078      	str	r0, [r7, #4]
 8003710:	460b      	mov	r3, r1
 8003712:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8003714:	2300      	movs	r3, #0
 8003716:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	68db      	ldr	r3, [r3, #12]
 800371c:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8003724:	78fb      	ldrb	r3, [r7, #3]
 8003726:	2b01      	cmp	r3, #1
 8003728:	d115      	bne.n	8003756 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	68db      	ldr	r3, [r3, #12]
 800372e:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8003736:	200a      	movs	r0, #10
 8003738:	f7fd fba0 	bl	8000e7c <HAL_Delay>
      ms += 10U;
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	330a      	adds	r3, #10
 8003740:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8003742:	6878      	ldr	r0, [r7, #4]
 8003744:	f001 f93f 	bl	80049c6 <USB_GetMode>
 8003748:	4603      	mov	r3, r0
 800374a:	2b01      	cmp	r3, #1
 800374c:	d01e      	beq.n	800378c <USB_SetCurrentMode+0x84>
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	2bc7      	cmp	r3, #199	@ 0xc7
 8003752:	d9f0      	bls.n	8003736 <USB_SetCurrentMode+0x2e>
 8003754:	e01a      	b.n	800378c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8003756:	78fb      	ldrb	r3, [r7, #3]
 8003758:	2b00      	cmp	r3, #0
 800375a:	d115      	bne.n	8003788 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	68db      	ldr	r3, [r3, #12]
 8003760:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8003768:	200a      	movs	r0, #10
 800376a:	f7fd fb87 	bl	8000e7c <HAL_Delay>
      ms += 10U;
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	330a      	adds	r3, #10
 8003772:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8003774:	6878      	ldr	r0, [r7, #4]
 8003776:	f001 f926 	bl	80049c6 <USB_GetMode>
 800377a:	4603      	mov	r3, r0
 800377c:	2b00      	cmp	r3, #0
 800377e:	d005      	beq.n	800378c <USB_SetCurrentMode+0x84>
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	2bc7      	cmp	r3, #199	@ 0xc7
 8003784:	d9f0      	bls.n	8003768 <USB_SetCurrentMode+0x60>
 8003786:	e001      	b.n	800378c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8003788:	2301      	movs	r3, #1
 800378a:	e005      	b.n	8003798 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	2bc8      	cmp	r3, #200	@ 0xc8
 8003790:	d101      	bne.n	8003796 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8003792:	2301      	movs	r3, #1
 8003794:	e000      	b.n	8003798 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8003796:	2300      	movs	r3, #0
}
 8003798:	4618      	mov	r0, r3
 800379a:	3710      	adds	r7, #16
 800379c:	46bd      	mov	sp, r7
 800379e:	bd80      	pop	{r7, pc}

080037a0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80037a0:	b084      	sub	sp, #16
 80037a2:	b580      	push	{r7, lr}
 80037a4:	b086      	sub	sp, #24
 80037a6:	af00      	add	r7, sp, #0
 80037a8:	6078      	str	r0, [r7, #4]
 80037aa:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80037ae:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80037b2:	2300      	movs	r3, #0
 80037b4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80037ba:	2300      	movs	r3, #0
 80037bc:	613b      	str	r3, [r7, #16]
 80037be:	e009      	b.n	80037d4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80037c0:	687a      	ldr	r2, [r7, #4]
 80037c2:	693b      	ldr	r3, [r7, #16]
 80037c4:	3340      	adds	r3, #64	@ 0x40
 80037c6:	009b      	lsls	r3, r3, #2
 80037c8:	4413      	add	r3, r2
 80037ca:	2200      	movs	r2, #0
 80037cc:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80037ce:	693b      	ldr	r3, [r7, #16]
 80037d0:	3301      	adds	r3, #1
 80037d2:	613b      	str	r3, [r7, #16]
 80037d4:	693b      	ldr	r3, [r7, #16]
 80037d6:	2b0e      	cmp	r3, #14
 80037d8:	d9f2      	bls.n	80037c0 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80037da:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d11c      	bne.n	800381c <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80037e8:	685b      	ldr	r3, [r3, #4]
 80037ea:	68fa      	ldr	r2, [r7, #12]
 80037ec:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80037f0:	f043 0302 	orr.w	r3, r3, #2
 80037f4:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80037fa:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003806:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003812:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	639a      	str	r2, [r3, #56]	@ 0x38
 800381a:	e00b      	b.n	8003834 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003820:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800382c:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800383a:	461a      	mov	r2, r3
 800383c:	2300      	movs	r3, #0
 800383e:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003840:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8003844:	2b01      	cmp	r3, #1
 8003846:	d10d      	bne.n	8003864 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8003848:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800384c:	2b00      	cmp	r3, #0
 800384e:	d104      	bne.n	800385a <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8003850:	2100      	movs	r1, #0
 8003852:	6878      	ldr	r0, [r7, #4]
 8003854:	f000 f968 	bl	8003b28 <USB_SetDevSpeed>
 8003858:	e008      	b.n	800386c <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800385a:	2101      	movs	r1, #1
 800385c:	6878      	ldr	r0, [r7, #4]
 800385e:	f000 f963 	bl	8003b28 <USB_SetDevSpeed>
 8003862:	e003      	b.n	800386c <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8003864:	2103      	movs	r1, #3
 8003866:	6878      	ldr	r0, [r7, #4]
 8003868:	f000 f95e 	bl	8003b28 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800386c:	2110      	movs	r1, #16
 800386e:	6878      	ldr	r0, [r7, #4]
 8003870:	f000 f8fa 	bl	8003a68 <USB_FlushTxFifo>
 8003874:	4603      	mov	r3, r0
 8003876:	2b00      	cmp	r3, #0
 8003878:	d001      	beq.n	800387e <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 800387a:	2301      	movs	r3, #1
 800387c:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800387e:	6878      	ldr	r0, [r7, #4]
 8003880:	f000 f924 	bl	8003acc <USB_FlushRxFifo>
 8003884:	4603      	mov	r3, r0
 8003886:	2b00      	cmp	r3, #0
 8003888:	d001      	beq.n	800388e <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 800388a:	2301      	movs	r3, #1
 800388c:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003894:	461a      	mov	r2, r3
 8003896:	2300      	movs	r3, #0
 8003898:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80038a0:	461a      	mov	r2, r3
 80038a2:	2300      	movs	r3, #0
 80038a4:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80038ac:	461a      	mov	r2, r3
 80038ae:	2300      	movs	r3, #0
 80038b0:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80038b2:	2300      	movs	r3, #0
 80038b4:	613b      	str	r3, [r7, #16]
 80038b6:	e043      	b.n	8003940 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80038b8:	693b      	ldr	r3, [r7, #16]
 80038ba:	015a      	lsls	r2, r3, #5
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	4413      	add	r3, r2
 80038c0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80038ca:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80038ce:	d118      	bne.n	8003902 <USB_DevInit+0x162>
    {
      if (i == 0U)
 80038d0:	693b      	ldr	r3, [r7, #16]
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d10a      	bne.n	80038ec <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80038d6:	693b      	ldr	r3, [r7, #16]
 80038d8:	015a      	lsls	r2, r3, #5
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	4413      	add	r3, r2
 80038de:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80038e2:	461a      	mov	r2, r3
 80038e4:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80038e8:	6013      	str	r3, [r2, #0]
 80038ea:	e013      	b.n	8003914 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80038ec:	693b      	ldr	r3, [r7, #16]
 80038ee:	015a      	lsls	r2, r3, #5
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	4413      	add	r3, r2
 80038f4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80038f8:	461a      	mov	r2, r3
 80038fa:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80038fe:	6013      	str	r3, [r2, #0]
 8003900:	e008      	b.n	8003914 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8003902:	693b      	ldr	r3, [r7, #16]
 8003904:	015a      	lsls	r2, r3, #5
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	4413      	add	r3, r2
 800390a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800390e:	461a      	mov	r2, r3
 8003910:	2300      	movs	r3, #0
 8003912:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8003914:	693b      	ldr	r3, [r7, #16]
 8003916:	015a      	lsls	r2, r3, #5
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	4413      	add	r3, r2
 800391c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003920:	461a      	mov	r2, r3
 8003922:	2300      	movs	r3, #0
 8003924:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8003926:	693b      	ldr	r3, [r7, #16]
 8003928:	015a      	lsls	r2, r3, #5
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	4413      	add	r3, r2
 800392e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003932:	461a      	mov	r2, r3
 8003934:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8003938:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800393a:	693b      	ldr	r3, [r7, #16]
 800393c:	3301      	adds	r3, #1
 800393e:	613b      	str	r3, [r7, #16]
 8003940:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8003944:	461a      	mov	r2, r3
 8003946:	693b      	ldr	r3, [r7, #16]
 8003948:	4293      	cmp	r3, r2
 800394a:	d3b5      	bcc.n	80038b8 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800394c:	2300      	movs	r3, #0
 800394e:	613b      	str	r3, [r7, #16]
 8003950:	e043      	b.n	80039da <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003952:	693b      	ldr	r3, [r7, #16]
 8003954:	015a      	lsls	r2, r3, #5
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	4413      	add	r3, r2
 800395a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003964:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003968:	d118      	bne.n	800399c <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 800396a:	693b      	ldr	r3, [r7, #16]
 800396c:	2b00      	cmp	r3, #0
 800396e:	d10a      	bne.n	8003986 <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8003970:	693b      	ldr	r3, [r7, #16]
 8003972:	015a      	lsls	r2, r3, #5
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	4413      	add	r3, r2
 8003978:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800397c:	461a      	mov	r2, r3
 800397e:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8003982:	6013      	str	r3, [r2, #0]
 8003984:	e013      	b.n	80039ae <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8003986:	693b      	ldr	r3, [r7, #16]
 8003988:	015a      	lsls	r2, r3, #5
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	4413      	add	r3, r2
 800398e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003992:	461a      	mov	r2, r3
 8003994:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8003998:	6013      	str	r3, [r2, #0]
 800399a:	e008      	b.n	80039ae <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800399c:	693b      	ldr	r3, [r7, #16]
 800399e:	015a      	lsls	r2, r3, #5
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	4413      	add	r3, r2
 80039a4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80039a8:	461a      	mov	r2, r3
 80039aa:	2300      	movs	r3, #0
 80039ac:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80039ae:	693b      	ldr	r3, [r7, #16]
 80039b0:	015a      	lsls	r2, r3, #5
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	4413      	add	r3, r2
 80039b6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80039ba:	461a      	mov	r2, r3
 80039bc:	2300      	movs	r3, #0
 80039be:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80039c0:	693b      	ldr	r3, [r7, #16]
 80039c2:	015a      	lsls	r2, r3, #5
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	4413      	add	r3, r2
 80039c8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80039cc:	461a      	mov	r2, r3
 80039ce:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80039d2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80039d4:	693b      	ldr	r3, [r7, #16]
 80039d6:	3301      	adds	r3, #1
 80039d8:	613b      	str	r3, [r7, #16]
 80039da:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80039de:	461a      	mov	r2, r3
 80039e0:	693b      	ldr	r3, [r7, #16]
 80039e2:	4293      	cmp	r3, r2
 80039e4:	d3b5      	bcc.n	8003952 <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80039ec:	691b      	ldr	r3, [r3, #16]
 80039ee:	68fa      	ldr	r2, [r7, #12]
 80039f0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80039f4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80039f8:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	2200      	movs	r2, #0
 80039fe:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8003a06:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8003a08:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d105      	bne.n	8003a1c <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	699b      	ldr	r3, [r3, #24]
 8003a14:	f043 0210 	orr.w	r2, r3, #16
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	699a      	ldr	r2, [r3, #24]
 8003a20:	4b10      	ldr	r3, [pc, #64]	@ (8003a64 <USB_DevInit+0x2c4>)
 8003a22:	4313      	orrs	r3, r2
 8003a24:	687a      	ldr	r2, [r7, #4]
 8003a26:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8003a28:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d005      	beq.n	8003a3c <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	699b      	ldr	r3, [r3, #24]
 8003a34:	f043 0208 	orr.w	r2, r3, #8
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8003a3c:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8003a40:	2b01      	cmp	r3, #1
 8003a42:	d107      	bne.n	8003a54 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	699b      	ldr	r3, [r3, #24]
 8003a48:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8003a4c:	f043 0304 	orr.w	r3, r3, #4
 8003a50:	687a      	ldr	r2, [r7, #4]
 8003a52:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8003a54:	7dfb      	ldrb	r3, [r7, #23]
}
 8003a56:	4618      	mov	r0, r3
 8003a58:	3718      	adds	r7, #24
 8003a5a:	46bd      	mov	sp, r7
 8003a5c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003a60:	b004      	add	sp, #16
 8003a62:	4770      	bx	lr
 8003a64:	803c3800 	.word	0x803c3800

08003a68 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8003a68:	b480      	push	{r7}
 8003a6a:	b085      	sub	sp, #20
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	6078      	str	r0, [r7, #4]
 8003a70:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8003a72:	2300      	movs	r3, #0
 8003a74:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	3301      	adds	r3, #1
 8003a7a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003a82:	d901      	bls.n	8003a88 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8003a84:	2303      	movs	r3, #3
 8003a86:	e01b      	b.n	8003ac0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	691b      	ldr	r3, [r3, #16]
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	daf2      	bge.n	8003a76 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8003a90:	2300      	movs	r3, #0
 8003a92:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003a94:	683b      	ldr	r3, [r7, #0]
 8003a96:	019b      	lsls	r3, r3, #6
 8003a98:	f043 0220 	orr.w	r2, r3, #32
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	3301      	adds	r3, #1
 8003aa4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003aac:	d901      	bls.n	8003ab2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8003aae:	2303      	movs	r3, #3
 8003ab0:	e006      	b.n	8003ac0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	691b      	ldr	r3, [r3, #16]
 8003ab6:	f003 0320 	and.w	r3, r3, #32
 8003aba:	2b20      	cmp	r3, #32
 8003abc:	d0f0      	beq.n	8003aa0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8003abe:	2300      	movs	r3, #0
}
 8003ac0:	4618      	mov	r0, r3
 8003ac2:	3714      	adds	r7, #20
 8003ac4:	46bd      	mov	sp, r7
 8003ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aca:	4770      	bx	lr

08003acc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8003acc:	b480      	push	{r7}
 8003ace:	b085      	sub	sp, #20
 8003ad0:	af00      	add	r7, sp, #0
 8003ad2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003ad4:	2300      	movs	r3, #0
 8003ad6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	3301      	adds	r3, #1
 8003adc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003ae4:	d901      	bls.n	8003aea <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8003ae6:	2303      	movs	r3, #3
 8003ae8:	e018      	b.n	8003b1c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	691b      	ldr	r3, [r3, #16]
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	daf2      	bge.n	8003ad8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8003af2:	2300      	movs	r3, #0
 8003af4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	2210      	movs	r2, #16
 8003afa:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	3301      	adds	r3, #1
 8003b00:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003b08:	d901      	bls.n	8003b0e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8003b0a:	2303      	movs	r3, #3
 8003b0c:	e006      	b.n	8003b1c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	691b      	ldr	r3, [r3, #16]
 8003b12:	f003 0310 	and.w	r3, r3, #16
 8003b16:	2b10      	cmp	r3, #16
 8003b18:	d0f0      	beq.n	8003afc <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8003b1a:	2300      	movs	r3, #0
}
 8003b1c:	4618      	mov	r0, r3
 8003b1e:	3714      	adds	r7, #20
 8003b20:	46bd      	mov	sp, r7
 8003b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b26:	4770      	bx	lr

08003b28 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8003b28:	b480      	push	{r7}
 8003b2a:	b085      	sub	sp, #20
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	6078      	str	r0, [r7, #4]
 8003b30:	460b      	mov	r3, r1
 8003b32:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003b3e:	681a      	ldr	r2, [r3, #0]
 8003b40:	78fb      	ldrb	r3, [r7, #3]
 8003b42:	68f9      	ldr	r1, [r7, #12]
 8003b44:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003b48:	4313      	orrs	r3, r2
 8003b4a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8003b4c:	2300      	movs	r3, #0
}
 8003b4e:	4618      	mov	r0, r3
 8003b50:	3714      	adds	r7, #20
 8003b52:	46bd      	mov	sp, r7
 8003b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b58:	4770      	bx	lr

08003b5a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8003b5a:	b480      	push	{r7}
 8003b5c:	b087      	sub	sp, #28
 8003b5e:	af00      	add	r7, sp, #0
 8003b60:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8003b66:	693b      	ldr	r3, [r7, #16]
 8003b68:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003b6c:	689b      	ldr	r3, [r3, #8]
 8003b6e:	f003 0306 	and.w	r3, r3, #6
 8003b72:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d102      	bne.n	8003b80 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8003b7a:	2300      	movs	r3, #0
 8003b7c:	75fb      	strb	r3, [r7, #23]
 8003b7e:	e00a      	b.n	8003b96 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	2b02      	cmp	r3, #2
 8003b84:	d002      	beq.n	8003b8c <USB_GetDevSpeed+0x32>
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	2b06      	cmp	r3, #6
 8003b8a:	d102      	bne.n	8003b92 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8003b8c:	2302      	movs	r3, #2
 8003b8e:	75fb      	strb	r3, [r7, #23]
 8003b90:	e001      	b.n	8003b96 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8003b92:	230f      	movs	r3, #15
 8003b94:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8003b96:	7dfb      	ldrb	r3, [r7, #23]
}
 8003b98:	4618      	mov	r0, r3
 8003b9a:	371c      	adds	r7, #28
 8003b9c:	46bd      	mov	sp, r7
 8003b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba2:	4770      	bx	lr

08003ba4 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8003ba4:	b480      	push	{r7}
 8003ba6:	b085      	sub	sp, #20
 8003ba8:	af00      	add	r7, sp, #0
 8003baa:	6078      	str	r0, [r7, #4]
 8003bac:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003bb2:	683b      	ldr	r3, [r7, #0]
 8003bb4:	781b      	ldrb	r3, [r3, #0]
 8003bb6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8003bb8:	683b      	ldr	r3, [r7, #0]
 8003bba:	785b      	ldrb	r3, [r3, #1]
 8003bbc:	2b01      	cmp	r3, #1
 8003bbe:	d13a      	bne.n	8003c36 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003bc6:	69da      	ldr	r2, [r3, #28]
 8003bc8:	683b      	ldr	r3, [r7, #0]
 8003bca:	781b      	ldrb	r3, [r3, #0]
 8003bcc:	f003 030f 	and.w	r3, r3, #15
 8003bd0:	2101      	movs	r1, #1
 8003bd2:	fa01 f303 	lsl.w	r3, r1, r3
 8003bd6:	b29b      	uxth	r3, r3
 8003bd8:	68f9      	ldr	r1, [r7, #12]
 8003bda:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003bde:	4313      	orrs	r3, r2
 8003be0:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8003be2:	68bb      	ldr	r3, [r7, #8]
 8003be4:	015a      	lsls	r2, r3, #5
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	4413      	add	r3, r2
 8003bea:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d155      	bne.n	8003ca4 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003bf8:	68bb      	ldr	r3, [r7, #8]
 8003bfa:	015a      	lsls	r2, r3, #5
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	4413      	add	r3, r2
 8003c00:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003c04:	681a      	ldr	r2, [r3, #0]
 8003c06:	683b      	ldr	r3, [r7, #0]
 8003c08:	689b      	ldr	r3, [r3, #8]
 8003c0a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8003c0e:	683b      	ldr	r3, [r7, #0]
 8003c10:	791b      	ldrb	r3, [r3, #4]
 8003c12:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003c14:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8003c16:	68bb      	ldr	r3, [r7, #8]
 8003c18:	059b      	lsls	r3, r3, #22
 8003c1a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003c1c:	4313      	orrs	r3, r2
 8003c1e:	68ba      	ldr	r2, [r7, #8]
 8003c20:	0151      	lsls	r1, r2, #5
 8003c22:	68fa      	ldr	r2, [r7, #12]
 8003c24:	440a      	add	r2, r1
 8003c26:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003c2a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003c2e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003c32:	6013      	str	r3, [r2, #0]
 8003c34:	e036      	b.n	8003ca4 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003c3c:	69da      	ldr	r2, [r3, #28]
 8003c3e:	683b      	ldr	r3, [r7, #0]
 8003c40:	781b      	ldrb	r3, [r3, #0]
 8003c42:	f003 030f 	and.w	r3, r3, #15
 8003c46:	2101      	movs	r1, #1
 8003c48:	fa01 f303 	lsl.w	r3, r1, r3
 8003c4c:	041b      	lsls	r3, r3, #16
 8003c4e:	68f9      	ldr	r1, [r7, #12]
 8003c50:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003c54:	4313      	orrs	r3, r2
 8003c56:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8003c58:	68bb      	ldr	r3, [r7, #8]
 8003c5a:	015a      	lsls	r2, r3, #5
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	4413      	add	r3, r2
 8003c60:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d11a      	bne.n	8003ca4 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8003c6e:	68bb      	ldr	r3, [r7, #8]
 8003c70:	015a      	lsls	r2, r3, #5
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	4413      	add	r3, r2
 8003c76:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003c7a:	681a      	ldr	r2, [r3, #0]
 8003c7c:	683b      	ldr	r3, [r7, #0]
 8003c7e:	689b      	ldr	r3, [r3, #8]
 8003c80:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8003c84:	683b      	ldr	r3, [r7, #0]
 8003c86:	791b      	ldrb	r3, [r3, #4]
 8003c88:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8003c8a:	430b      	orrs	r3, r1
 8003c8c:	4313      	orrs	r3, r2
 8003c8e:	68ba      	ldr	r2, [r7, #8]
 8003c90:	0151      	lsls	r1, r2, #5
 8003c92:	68fa      	ldr	r2, [r7, #12]
 8003c94:	440a      	add	r2, r1
 8003c96:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003c9a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003c9e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003ca2:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8003ca4:	2300      	movs	r3, #0
}
 8003ca6:	4618      	mov	r0, r3
 8003ca8:	3714      	adds	r7, #20
 8003caa:	46bd      	mov	sp, r7
 8003cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb0:	4770      	bx	lr
	...

08003cb4 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8003cb4:	b480      	push	{r7}
 8003cb6:	b085      	sub	sp, #20
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	6078      	str	r0, [r7, #4]
 8003cbc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003cc2:	683b      	ldr	r3, [r7, #0]
 8003cc4:	781b      	ldrb	r3, [r3, #0]
 8003cc6:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8003cc8:	683b      	ldr	r3, [r7, #0]
 8003cca:	785b      	ldrb	r3, [r3, #1]
 8003ccc:	2b01      	cmp	r3, #1
 8003cce:	d161      	bne.n	8003d94 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003cd0:	68bb      	ldr	r3, [r7, #8]
 8003cd2:	015a      	lsls	r2, r3, #5
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	4413      	add	r3, r2
 8003cd8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003ce2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003ce6:	d11f      	bne.n	8003d28 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8003ce8:	68bb      	ldr	r3, [r7, #8]
 8003cea:	015a      	lsls	r2, r3, #5
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	4413      	add	r3, r2
 8003cf0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	68ba      	ldr	r2, [r7, #8]
 8003cf8:	0151      	lsls	r1, r2, #5
 8003cfa:	68fa      	ldr	r2, [r7, #12]
 8003cfc:	440a      	add	r2, r1
 8003cfe:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003d02:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8003d06:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8003d08:	68bb      	ldr	r3, [r7, #8]
 8003d0a:	015a      	lsls	r2, r3, #5
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	4413      	add	r3, r2
 8003d10:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	68ba      	ldr	r2, [r7, #8]
 8003d18:	0151      	lsls	r1, r2, #5
 8003d1a:	68fa      	ldr	r2, [r7, #12]
 8003d1c:	440a      	add	r2, r1
 8003d1e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003d22:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8003d26:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003d2e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003d30:	683b      	ldr	r3, [r7, #0]
 8003d32:	781b      	ldrb	r3, [r3, #0]
 8003d34:	f003 030f 	and.w	r3, r3, #15
 8003d38:	2101      	movs	r1, #1
 8003d3a:	fa01 f303 	lsl.w	r3, r1, r3
 8003d3e:	b29b      	uxth	r3, r3
 8003d40:	43db      	mvns	r3, r3
 8003d42:	68f9      	ldr	r1, [r7, #12]
 8003d44:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003d48:	4013      	ands	r3, r2
 8003d4a:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003d52:	69da      	ldr	r2, [r3, #28]
 8003d54:	683b      	ldr	r3, [r7, #0]
 8003d56:	781b      	ldrb	r3, [r3, #0]
 8003d58:	f003 030f 	and.w	r3, r3, #15
 8003d5c:	2101      	movs	r1, #1
 8003d5e:	fa01 f303 	lsl.w	r3, r1, r3
 8003d62:	b29b      	uxth	r3, r3
 8003d64:	43db      	mvns	r3, r3
 8003d66:	68f9      	ldr	r1, [r7, #12]
 8003d68:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003d6c:	4013      	ands	r3, r2
 8003d6e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8003d70:	68bb      	ldr	r3, [r7, #8]
 8003d72:	015a      	lsls	r2, r3, #5
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	4413      	add	r3, r2
 8003d78:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003d7c:	681a      	ldr	r2, [r3, #0]
 8003d7e:	68bb      	ldr	r3, [r7, #8]
 8003d80:	0159      	lsls	r1, r3, #5
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	440b      	add	r3, r1
 8003d86:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003d8a:	4619      	mov	r1, r3
 8003d8c:	4b35      	ldr	r3, [pc, #212]	@ (8003e64 <USB_DeactivateEndpoint+0x1b0>)
 8003d8e:	4013      	ands	r3, r2
 8003d90:	600b      	str	r3, [r1, #0]
 8003d92:	e060      	b.n	8003e56 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003d94:	68bb      	ldr	r3, [r7, #8]
 8003d96:	015a      	lsls	r2, r3, #5
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	4413      	add	r3, r2
 8003d9c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003da6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003daa:	d11f      	bne.n	8003dec <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003dac:	68bb      	ldr	r3, [r7, #8]
 8003dae:	015a      	lsls	r2, r3, #5
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	4413      	add	r3, r2
 8003db4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	68ba      	ldr	r2, [r7, #8]
 8003dbc:	0151      	lsls	r1, r2, #5
 8003dbe:	68fa      	ldr	r2, [r7, #12]
 8003dc0:	440a      	add	r2, r1
 8003dc2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003dc6:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8003dca:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8003dcc:	68bb      	ldr	r3, [r7, #8]
 8003dce:	015a      	lsls	r2, r3, #5
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	4413      	add	r3, r2
 8003dd4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	68ba      	ldr	r2, [r7, #8]
 8003ddc:	0151      	lsls	r1, r2, #5
 8003dde:	68fa      	ldr	r2, [r7, #12]
 8003de0:	440a      	add	r2, r1
 8003de2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003de6:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8003dea:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003df2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003df4:	683b      	ldr	r3, [r7, #0]
 8003df6:	781b      	ldrb	r3, [r3, #0]
 8003df8:	f003 030f 	and.w	r3, r3, #15
 8003dfc:	2101      	movs	r1, #1
 8003dfe:	fa01 f303 	lsl.w	r3, r1, r3
 8003e02:	041b      	lsls	r3, r3, #16
 8003e04:	43db      	mvns	r3, r3
 8003e06:	68f9      	ldr	r1, [r7, #12]
 8003e08:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003e0c:	4013      	ands	r3, r2
 8003e0e:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003e16:	69da      	ldr	r2, [r3, #28]
 8003e18:	683b      	ldr	r3, [r7, #0]
 8003e1a:	781b      	ldrb	r3, [r3, #0]
 8003e1c:	f003 030f 	and.w	r3, r3, #15
 8003e20:	2101      	movs	r1, #1
 8003e22:	fa01 f303 	lsl.w	r3, r1, r3
 8003e26:	041b      	lsls	r3, r3, #16
 8003e28:	43db      	mvns	r3, r3
 8003e2a:	68f9      	ldr	r1, [r7, #12]
 8003e2c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003e30:	4013      	ands	r3, r2
 8003e32:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8003e34:	68bb      	ldr	r3, [r7, #8]
 8003e36:	015a      	lsls	r2, r3, #5
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	4413      	add	r3, r2
 8003e3c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003e40:	681a      	ldr	r2, [r3, #0]
 8003e42:	68bb      	ldr	r3, [r7, #8]
 8003e44:	0159      	lsls	r1, r3, #5
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	440b      	add	r3, r1
 8003e4a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003e4e:	4619      	mov	r1, r3
 8003e50:	4b05      	ldr	r3, [pc, #20]	@ (8003e68 <USB_DeactivateEndpoint+0x1b4>)
 8003e52:	4013      	ands	r3, r2
 8003e54:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8003e56:	2300      	movs	r3, #0
}
 8003e58:	4618      	mov	r0, r3
 8003e5a:	3714      	adds	r7, #20
 8003e5c:	46bd      	mov	sp, r7
 8003e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e62:	4770      	bx	lr
 8003e64:	ec337800 	.word	0xec337800
 8003e68:	eff37800 	.word	0xeff37800

08003e6c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8003e6c:	b580      	push	{r7, lr}
 8003e6e:	b08a      	sub	sp, #40	@ 0x28
 8003e70:	af02      	add	r7, sp, #8
 8003e72:	60f8      	str	r0, [r7, #12]
 8003e74:	60b9      	str	r1, [r7, #8]
 8003e76:	4613      	mov	r3, r2
 8003e78:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8003e7e:	68bb      	ldr	r3, [r7, #8]
 8003e80:	781b      	ldrb	r3, [r3, #0]
 8003e82:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8003e84:	68bb      	ldr	r3, [r7, #8]
 8003e86:	785b      	ldrb	r3, [r3, #1]
 8003e88:	2b01      	cmp	r3, #1
 8003e8a:	f040 817f 	bne.w	800418c <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8003e8e:	68bb      	ldr	r3, [r7, #8]
 8003e90:	691b      	ldr	r3, [r3, #16]
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d132      	bne.n	8003efc <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003e96:	69bb      	ldr	r3, [r7, #24]
 8003e98:	015a      	lsls	r2, r3, #5
 8003e9a:	69fb      	ldr	r3, [r7, #28]
 8003e9c:	4413      	add	r3, r2
 8003e9e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003ea2:	691b      	ldr	r3, [r3, #16]
 8003ea4:	69ba      	ldr	r2, [r7, #24]
 8003ea6:	0151      	lsls	r1, r2, #5
 8003ea8:	69fa      	ldr	r2, [r7, #28]
 8003eaa:	440a      	add	r2, r1
 8003eac:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003eb0:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8003eb4:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8003eb8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8003eba:	69bb      	ldr	r3, [r7, #24]
 8003ebc:	015a      	lsls	r2, r3, #5
 8003ebe:	69fb      	ldr	r3, [r7, #28]
 8003ec0:	4413      	add	r3, r2
 8003ec2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003ec6:	691b      	ldr	r3, [r3, #16]
 8003ec8:	69ba      	ldr	r2, [r7, #24]
 8003eca:	0151      	lsls	r1, r2, #5
 8003ecc:	69fa      	ldr	r2, [r7, #28]
 8003ece:	440a      	add	r2, r1
 8003ed0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003ed4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8003ed8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003eda:	69bb      	ldr	r3, [r7, #24]
 8003edc:	015a      	lsls	r2, r3, #5
 8003ede:	69fb      	ldr	r3, [r7, #28]
 8003ee0:	4413      	add	r3, r2
 8003ee2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003ee6:	691b      	ldr	r3, [r3, #16]
 8003ee8:	69ba      	ldr	r2, [r7, #24]
 8003eea:	0151      	lsls	r1, r2, #5
 8003eec:	69fa      	ldr	r2, [r7, #28]
 8003eee:	440a      	add	r2, r1
 8003ef0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003ef4:	0cdb      	lsrs	r3, r3, #19
 8003ef6:	04db      	lsls	r3, r3, #19
 8003ef8:	6113      	str	r3, [r2, #16]
 8003efa:	e097      	b.n	800402c <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003efc:	69bb      	ldr	r3, [r7, #24]
 8003efe:	015a      	lsls	r2, r3, #5
 8003f00:	69fb      	ldr	r3, [r7, #28]
 8003f02:	4413      	add	r3, r2
 8003f04:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003f08:	691b      	ldr	r3, [r3, #16]
 8003f0a:	69ba      	ldr	r2, [r7, #24]
 8003f0c:	0151      	lsls	r1, r2, #5
 8003f0e:	69fa      	ldr	r2, [r7, #28]
 8003f10:	440a      	add	r2, r1
 8003f12:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003f16:	0cdb      	lsrs	r3, r3, #19
 8003f18:	04db      	lsls	r3, r3, #19
 8003f1a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003f1c:	69bb      	ldr	r3, [r7, #24]
 8003f1e:	015a      	lsls	r2, r3, #5
 8003f20:	69fb      	ldr	r3, [r7, #28]
 8003f22:	4413      	add	r3, r2
 8003f24:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003f28:	691b      	ldr	r3, [r3, #16]
 8003f2a:	69ba      	ldr	r2, [r7, #24]
 8003f2c:	0151      	lsls	r1, r2, #5
 8003f2e:	69fa      	ldr	r2, [r7, #28]
 8003f30:	440a      	add	r2, r1
 8003f32:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003f36:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8003f3a:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8003f3e:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8003f40:	69bb      	ldr	r3, [r7, #24]
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d11a      	bne.n	8003f7c <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8003f46:	68bb      	ldr	r3, [r7, #8]
 8003f48:	691a      	ldr	r2, [r3, #16]
 8003f4a:	68bb      	ldr	r3, [r7, #8]
 8003f4c:	689b      	ldr	r3, [r3, #8]
 8003f4e:	429a      	cmp	r2, r3
 8003f50:	d903      	bls.n	8003f5a <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8003f52:	68bb      	ldr	r3, [r7, #8]
 8003f54:	689a      	ldr	r2, [r3, #8]
 8003f56:	68bb      	ldr	r3, [r7, #8]
 8003f58:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8003f5a:	69bb      	ldr	r3, [r7, #24]
 8003f5c:	015a      	lsls	r2, r3, #5
 8003f5e:	69fb      	ldr	r3, [r7, #28]
 8003f60:	4413      	add	r3, r2
 8003f62:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003f66:	691b      	ldr	r3, [r3, #16]
 8003f68:	69ba      	ldr	r2, [r7, #24]
 8003f6a:	0151      	lsls	r1, r2, #5
 8003f6c:	69fa      	ldr	r2, [r7, #28]
 8003f6e:	440a      	add	r2, r1
 8003f70:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003f74:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8003f78:	6113      	str	r3, [r2, #16]
 8003f7a:	e044      	b.n	8004006 <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8003f7c:	68bb      	ldr	r3, [r7, #8]
 8003f7e:	691a      	ldr	r2, [r3, #16]
 8003f80:	68bb      	ldr	r3, [r7, #8]
 8003f82:	689b      	ldr	r3, [r3, #8]
 8003f84:	4413      	add	r3, r2
 8003f86:	1e5a      	subs	r2, r3, #1
 8003f88:	68bb      	ldr	r3, [r7, #8]
 8003f8a:	689b      	ldr	r3, [r3, #8]
 8003f8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f90:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (pktcnt << 19));
 8003f92:	69bb      	ldr	r3, [r7, #24]
 8003f94:	015a      	lsls	r2, r3, #5
 8003f96:	69fb      	ldr	r3, [r7, #28]
 8003f98:	4413      	add	r3, r2
 8003f9a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003f9e:	691a      	ldr	r2, [r3, #16]
 8003fa0:	8afb      	ldrh	r3, [r7, #22]
 8003fa2:	04d9      	lsls	r1, r3, #19
 8003fa4:	4ba4      	ldr	r3, [pc, #656]	@ (8004238 <USB_EPStartXfer+0x3cc>)
 8003fa6:	400b      	ands	r3, r1
 8003fa8:	69b9      	ldr	r1, [r7, #24]
 8003faa:	0148      	lsls	r0, r1, #5
 8003fac:	69f9      	ldr	r1, [r7, #28]
 8003fae:	4401      	add	r1, r0
 8003fb0:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8003fb4:	4313      	orrs	r3, r2
 8003fb6:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 8003fb8:	68bb      	ldr	r3, [r7, #8]
 8003fba:	791b      	ldrb	r3, [r3, #4]
 8003fbc:	2b01      	cmp	r3, #1
 8003fbe:	d122      	bne.n	8004006 <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8003fc0:	69bb      	ldr	r3, [r7, #24]
 8003fc2:	015a      	lsls	r2, r3, #5
 8003fc4:	69fb      	ldr	r3, [r7, #28]
 8003fc6:	4413      	add	r3, r2
 8003fc8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003fcc:	691b      	ldr	r3, [r3, #16]
 8003fce:	69ba      	ldr	r2, [r7, #24]
 8003fd0:	0151      	lsls	r1, r2, #5
 8003fd2:	69fa      	ldr	r2, [r7, #28]
 8003fd4:	440a      	add	r2, r1
 8003fd6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003fda:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8003fde:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (pktcnt << 29));
 8003fe0:	69bb      	ldr	r3, [r7, #24]
 8003fe2:	015a      	lsls	r2, r3, #5
 8003fe4:	69fb      	ldr	r3, [r7, #28]
 8003fe6:	4413      	add	r3, r2
 8003fe8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003fec:	691a      	ldr	r2, [r3, #16]
 8003fee:	8afb      	ldrh	r3, [r7, #22]
 8003ff0:	075b      	lsls	r3, r3, #29
 8003ff2:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 8003ff6:	69b9      	ldr	r1, [r7, #24]
 8003ff8:	0148      	lsls	r0, r1, #5
 8003ffa:	69f9      	ldr	r1, [r7, #28]
 8003ffc:	4401      	add	r1, r0
 8003ffe:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8004002:	4313      	orrs	r3, r2
 8004004:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004006:	69bb      	ldr	r3, [r7, #24]
 8004008:	015a      	lsls	r2, r3, #5
 800400a:	69fb      	ldr	r3, [r7, #28]
 800400c:	4413      	add	r3, r2
 800400e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004012:	691a      	ldr	r2, [r3, #16]
 8004014:	68bb      	ldr	r3, [r7, #8]
 8004016:	691b      	ldr	r3, [r3, #16]
 8004018:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800401c:	69b9      	ldr	r1, [r7, #24]
 800401e:	0148      	lsls	r0, r1, #5
 8004020:	69f9      	ldr	r1, [r7, #28]
 8004022:	4401      	add	r1, r0
 8004024:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8004028:	4313      	orrs	r3, r2
 800402a:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800402c:	79fb      	ldrb	r3, [r7, #7]
 800402e:	2b01      	cmp	r3, #1
 8004030:	d14b      	bne.n	80040ca <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004032:	68bb      	ldr	r3, [r7, #8]
 8004034:	69db      	ldr	r3, [r3, #28]
 8004036:	2b00      	cmp	r3, #0
 8004038:	d009      	beq.n	800404e <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800403a:	69bb      	ldr	r3, [r7, #24]
 800403c:	015a      	lsls	r2, r3, #5
 800403e:	69fb      	ldr	r3, [r7, #28]
 8004040:	4413      	add	r3, r2
 8004042:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004046:	461a      	mov	r2, r3
 8004048:	68bb      	ldr	r3, [r7, #8]
 800404a:	69db      	ldr	r3, [r3, #28]
 800404c:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800404e:	68bb      	ldr	r3, [r7, #8]
 8004050:	791b      	ldrb	r3, [r3, #4]
 8004052:	2b01      	cmp	r3, #1
 8004054:	d128      	bne.n	80040a8 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004056:	69fb      	ldr	r3, [r7, #28]
 8004058:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800405c:	689b      	ldr	r3, [r3, #8]
 800405e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004062:	2b00      	cmp	r3, #0
 8004064:	d110      	bne.n	8004088 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004066:	69bb      	ldr	r3, [r7, #24]
 8004068:	015a      	lsls	r2, r3, #5
 800406a:	69fb      	ldr	r3, [r7, #28]
 800406c:	4413      	add	r3, r2
 800406e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	69ba      	ldr	r2, [r7, #24]
 8004076:	0151      	lsls	r1, r2, #5
 8004078:	69fa      	ldr	r2, [r7, #28]
 800407a:	440a      	add	r2, r1
 800407c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004080:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8004084:	6013      	str	r3, [r2, #0]
 8004086:	e00f      	b.n	80040a8 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004088:	69bb      	ldr	r3, [r7, #24]
 800408a:	015a      	lsls	r2, r3, #5
 800408c:	69fb      	ldr	r3, [r7, #28]
 800408e:	4413      	add	r3, r2
 8004090:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	69ba      	ldr	r2, [r7, #24]
 8004098:	0151      	lsls	r1, r2, #5
 800409a:	69fa      	ldr	r2, [r7, #28]
 800409c:	440a      	add	r2, r1
 800409e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80040a2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80040a6:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80040a8:	69bb      	ldr	r3, [r7, #24]
 80040aa:	015a      	lsls	r2, r3, #5
 80040ac:	69fb      	ldr	r3, [r7, #28]
 80040ae:	4413      	add	r3, r2
 80040b0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	69ba      	ldr	r2, [r7, #24]
 80040b8:	0151      	lsls	r1, r2, #5
 80040ba:	69fa      	ldr	r2, [r7, #28]
 80040bc:	440a      	add	r2, r1
 80040be:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80040c2:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80040c6:	6013      	str	r3, [r2, #0]
 80040c8:	e166      	b.n	8004398 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80040ca:	69bb      	ldr	r3, [r7, #24]
 80040cc:	015a      	lsls	r2, r3, #5
 80040ce:	69fb      	ldr	r3, [r7, #28]
 80040d0:	4413      	add	r3, r2
 80040d2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	69ba      	ldr	r2, [r7, #24]
 80040da:	0151      	lsls	r1, r2, #5
 80040dc:	69fa      	ldr	r2, [r7, #28]
 80040de:	440a      	add	r2, r1
 80040e0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80040e4:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80040e8:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80040ea:	68bb      	ldr	r3, [r7, #8]
 80040ec:	791b      	ldrb	r3, [r3, #4]
 80040ee:	2b01      	cmp	r3, #1
 80040f0:	d015      	beq.n	800411e <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80040f2:	68bb      	ldr	r3, [r7, #8]
 80040f4:	691b      	ldr	r3, [r3, #16]
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	f000 814e 	beq.w	8004398 <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80040fc:	69fb      	ldr	r3, [r7, #28]
 80040fe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004102:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004104:	68bb      	ldr	r3, [r7, #8]
 8004106:	781b      	ldrb	r3, [r3, #0]
 8004108:	f003 030f 	and.w	r3, r3, #15
 800410c:	2101      	movs	r1, #1
 800410e:	fa01 f303 	lsl.w	r3, r1, r3
 8004112:	69f9      	ldr	r1, [r7, #28]
 8004114:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004118:	4313      	orrs	r3, r2
 800411a:	634b      	str	r3, [r1, #52]	@ 0x34
 800411c:	e13c      	b.n	8004398 <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800411e:	69fb      	ldr	r3, [r7, #28]
 8004120:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004124:	689b      	ldr	r3, [r3, #8]
 8004126:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800412a:	2b00      	cmp	r3, #0
 800412c:	d110      	bne.n	8004150 <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800412e:	69bb      	ldr	r3, [r7, #24]
 8004130:	015a      	lsls	r2, r3, #5
 8004132:	69fb      	ldr	r3, [r7, #28]
 8004134:	4413      	add	r3, r2
 8004136:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	69ba      	ldr	r2, [r7, #24]
 800413e:	0151      	lsls	r1, r2, #5
 8004140:	69fa      	ldr	r2, [r7, #28]
 8004142:	440a      	add	r2, r1
 8004144:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004148:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800414c:	6013      	str	r3, [r2, #0]
 800414e:	e00f      	b.n	8004170 <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004150:	69bb      	ldr	r3, [r7, #24]
 8004152:	015a      	lsls	r2, r3, #5
 8004154:	69fb      	ldr	r3, [r7, #28]
 8004156:	4413      	add	r3, r2
 8004158:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	69ba      	ldr	r2, [r7, #24]
 8004160:	0151      	lsls	r1, r2, #5
 8004162:	69fa      	ldr	r2, [r7, #28]
 8004164:	440a      	add	r2, r1
 8004166:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800416a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800416e:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8004170:	68bb      	ldr	r3, [r7, #8]
 8004172:	68d9      	ldr	r1, [r3, #12]
 8004174:	68bb      	ldr	r3, [r7, #8]
 8004176:	781a      	ldrb	r2, [r3, #0]
 8004178:	68bb      	ldr	r3, [r7, #8]
 800417a:	691b      	ldr	r3, [r3, #16]
 800417c:	b298      	uxth	r0, r3
 800417e:	79fb      	ldrb	r3, [r7, #7]
 8004180:	9300      	str	r3, [sp, #0]
 8004182:	4603      	mov	r3, r0
 8004184:	68f8      	ldr	r0, [r7, #12]
 8004186:	f000 f9b9 	bl	80044fc <USB_WritePacket>
 800418a:	e105      	b.n	8004398 <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800418c:	69bb      	ldr	r3, [r7, #24]
 800418e:	015a      	lsls	r2, r3, #5
 8004190:	69fb      	ldr	r3, [r7, #28]
 8004192:	4413      	add	r3, r2
 8004194:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004198:	691b      	ldr	r3, [r3, #16]
 800419a:	69ba      	ldr	r2, [r7, #24]
 800419c:	0151      	lsls	r1, r2, #5
 800419e:	69fa      	ldr	r2, [r7, #28]
 80041a0:	440a      	add	r2, r1
 80041a2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80041a6:	0cdb      	lsrs	r3, r3, #19
 80041a8:	04db      	lsls	r3, r3, #19
 80041aa:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80041ac:	69bb      	ldr	r3, [r7, #24]
 80041ae:	015a      	lsls	r2, r3, #5
 80041b0:	69fb      	ldr	r3, [r7, #28]
 80041b2:	4413      	add	r3, r2
 80041b4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80041b8:	691b      	ldr	r3, [r3, #16]
 80041ba:	69ba      	ldr	r2, [r7, #24]
 80041bc:	0151      	lsls	r1, r2, #5
 80041be:	69fa      	ldr	r2, [r7, #28]
 80041c0:	440a      	add	r2, r1
 80041c2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80041c6:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 80041ca:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 80041ce:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 80041d0:	69bb      	ldr	r3, [r7, #24]
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d132      	bne.n	800423c <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 80041d6:	68bb      	ldr	r3, [r7, #8]
 80041d8:	691b      	ldr	r3, [r3, #16]
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d003      	beq.n	80041e6 <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 80041de:	68bb      	ldr	r3, [r7, #8]
 80041e0:	689a      	ldr	r2, [r3, #8]
 80041e2:	68bb      	ldr	r3, [r7, #8]
 80041e4:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 80041e6:	68bb      	ldr	r3, [r7, #8]
 80041e8:	689a      	ldr	r2, [r3, #8]
 80041ea:	68bb      	ldr	r3, [r7, #8]
 80041ec:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 80041ee:	69bb      	ldr	r3, [r7, #24]
 80041f0:	015a      	lsls	r2, r3, #5
 80041f2:	69fb      	ldr	r3, [r7, #28]
 80041f4:	4413      	add	r3, r2
 80041f6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80041fa:	691a      	ldr	r2, [r3, #16]
 80041fc:	68bb      	ldr	r3, [r7, #8]
 80041fe:	6a1b      	ldr	r3, [r3, #32]
 8004200:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004204:	69b9      	ldr	r1, [r7, #24]
 8004206:	0148      	lsls	r0, r1, #5
 8004208:	69f9      	ldr	r1, [r7, #28]
 800420a:	4401      	add	r1, r0
 800420c:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8004210:	4313      	orrs	r3, r2
 8004212:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004214:	69bb      	ldr	r3, [r7, #24]
 8004216:	015a      	lsls	r2, r3, #5
 8004218:	69fb      	ldr	r3, [r7, #28]
 800421a:	4413      	add	r3, r2
 800421c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004220:	691b      	ldr	r3, [r3, #16]
 8004222:	69ba      	ldr	r2, [r7, #24]
 8004224:	0151      	lsls	r1, r2, #5
 8004226:	69fa      	ldr	r2, [r7, #28]
 8004228:	440a      	add	r2, r1
 800422a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800422e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004232:	6113      	str	r3, [r2, #16]
 8004234:	e062      	b.n	80042fc <USB_EPStartXfer+0x490>
 8004236:	bf00      	nop
 8004238:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 800423c:	68bb      	ldr	r3, [r7, #8]
 800423e:	691b      	ldr	r3, [r3, #16]
 8004240:	2b00      	cmp	r3, #0
 8004242:	d123      	bne.n	800428c <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8004244:	69bb      	ldr	r3, [r7, #24]
 8004246:	015a      	lsls	r2, r3, #5
 8004248:	69fb      	ldr	r3, [r7, #28]
 800424a:	4413      	add	r3, r2
 800424c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004250:	691a      	ldr	r2, [r3, #16]
 8004252:	68bb      	ldr	r3, [r7, #8]
 8004254:	689b      	ldr	r3, [r3, #8]
 8004256:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800425a:	69b9      	ldr	r1, [r7, #24]
 800425c:	0148      	lsls	r0, r1, #5
 800425e:	69f9      	ldr	r1, [r7, #28]
 8004260:	4401      	add	r1, r0
 8004262:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8004266:	4313      	orrs	r3, r2
 8004268:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800426a:	69bb      	ldr	r3, [r7, #24]
 800426c:	015a      	lsls	r2, r3, #5
 800426e:	69fb      	ldr	r3, [r7, #28]
 8004270:	4413      	add	r3, r2
 8004272:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004276:	691b      	ldr	r3, [r3, #16]
 8004278:	69ba      	ldr	r2, [r7, #24]
 800427a:	0151      	lsls	r1, r2, #5
 800427c:	69fa      	ldr	r2, [r7, #28]
 800427e:	440a      	add	r2, r1
 8004280:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004284:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004288:	6113      	str	r3, [r2, #16]
 800428a:	e037      	b.n	80042fc <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800428c:	68bb      	ldr	r3, [r7, #8]
 800428e:	691a      	ldr	r2, [r3, #16]
 8004290:	68bb      	ldr	r3, [r7, #8]
 8004292:	689b      	ldr	r3, [r3, #8]
 8004294:	4413      	add	r3, r2
 8004296:	1e5a      	subs	r2, r3, #1
 8004298:	68bb      	ldr	r3, [r7, #8]
 800429a:	689b      	ldr	r3, [r3, #8]
 800429c:	fbb2 f3f3 	udiv	r3, r2, r3
 80042a0:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 80042a2:	68bb      	ldr	r3, [r7, #8]
 80042a4:	689b      	ldr	r3, [r3, #8]
 80042a6:	8afa      	ldrh	r2, [r7, #22]
 80042a8:	fb03 f202 	mul.w	r2, r3, r2
 80042ac:	68bb      	ldr	r3, [r7, #8]
 80042ae:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80042b0:	69bb      	ldr	r3, [r7, #24]
 80042b2:	015a      	lsls	r2, r3, #5
 80042b4:	69fb      	ldr	r3, [r7, #28]
 80042b6:	4413      	add	r3, r2
 80042b8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80042bc:	691a      	ldr	r2, [r3, #16]
 80042be:	8afb      	ldrh	r3, [r7, #22]
 80042c0:	04d9      	lsls	r1, r3, #19
 80042c2:	4b38      	ldr	r3, [pc, #224]	@ (80043a4 <USB_EPStartXfer+0x538>)
 80042c4:	400b      	ands	r3, r1
 80042c6:	69b9      	ldr	r1, [r7, #24]
 80042c8:	0148      	lsls	r0, r1, #5
 80042ca:	69f9      	ldr	r1, [r7, #28]
 80042cc:	4401      	add	r1, r0
 80042ce:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80042d2:	4313      	orrs	r3, r2
 80042d4:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 80042d6:	69bb      	ldr	r3, [r7, #24]
 80042d8:	015a      	lsls	r2, r3, #5
 80042da:	69fb      	ldr	r3, [r7, #28]
 80042dc:	4413      	add	r3, r2
 80042de:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80042e2:	691a      	ldr	r2, [r3, #16]
 80042e4:	68bb      	ldr	r3, [r7, #8]
 80042e6:	6a1b      	ldr	r3, [r3, #32]
 80042e8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80042ec:	69b9      	ldr	r1, [r7, #24]
 80042ee:	0148      	lsls	r0, r1, #5
 80042f0:	69f9      	ldr	r1, [r7, #28]
 80042f2:	4401      	add	r1, r0
 80042f4:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80042f8:	4313      	orrs	r3, r2
 80042fa:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 80042fc:	79fb      	ldrb	r3, [r7, #7]
 80042fe:	2b01      	cmp	r3, #1
 8004300:	d10d      	bne.n	800431e <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8004302:	68bb      	ldr	r3, [r7, #8]
 8004304:	68db      	ldr	r3, [r3, #12]
 8004306:	2b00      	cmp	r3, #0
 8004308:	d009      	beq.n	800431e <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800430a:	68bb      	ldr	r3, [r7, #8]
 800430c:	68d9      	ldr	r1, [r3, #12]
 800430e:	69bb      	ldr	r3, [r7, #24]
 8004310:	015a      	lsls	r2, r3, #5
 8004312:	69fb      	ldr	r3, [r7, #28]
 8004314:	4413      	add	r3, r2
 8004316:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800431a:	460a      	mov	r2, r1
 800431c:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800431e:	68bb      	ldr	r3, [r7, #8]
 8004320:	791b      	ldrb	r3, [r3, #4]
 8004322:	2b01      	cmp	r3, #1
 8004324:	d128      	bne.n	8004378 <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004326:	69fb      	ldr	r3, [r7, #28]
 8004328:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800432c:	689b      	ldr	r3, [r3, #8]
 800432e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004332:	2b00      	cmp	r3, #0
 8004334:	d110      	bne.n	8004358 <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8004336:	69bb      	ldr	r3, [r7, #24]
 8004338:	015a      	lsls	r2, r3, #5
 800433a:	69fb      	ldr	r3, [r7, #28]
 800433c:	4413      	add	r3, r2
 800433e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	69ba      	ldr	r2, [r7, #24]
 8004346:	0151      	lsls	r1, r2, #5
 8004348:	69fa      	ldr	r2, [r7, #28]
 800434a:	440a      	add	r2, r1
 800434c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004350:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8004354:	6013      	str	r3, [r2, #0]
 8004356:	e00f      	b.n	8004378 <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8004358:	69bb      	ldr	r3, [r7, #24]
 800435a:	015a      	lsls	r2, r3, #5
 800435c:	69fb      	ldr	r3, [r7, #28]
 800435e:	4413      	add	r3, r2
 8004360:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	69ba      	ldr	r2, [r7, #24]
 8004368:	0151      	lsls	r1, r2, #5
 800436a:	69fa      	ldr	r2, [r7, #28]
 800436c:	440a      	add	r2, r1
 800436e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004372:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004376:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004378:	69bb      	ldr	r3, [r7, #24]
 800437a:	015a      	lsls	r2, r3, #5
 800437c:	69fb      	ldr	r3, [r7, #28]
 800437e:	4413      	add	r3, r2
 8004380:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	69ba      	ldr	r2, [r7, #24]
 8004388:	0151      	lsls	r1, r2, #5
 800438a:	69fa      	ldr	r2, [r7, #28]
 800438c:	440a      	add	r2, r1
 800438e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004392:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8004396:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004398:	2300      	movs	r3, #0
}
 800439a:	4618      	mov	r0, r3
 800439c:	3720      	adds	r7, #32
 800439e:	46bd      	mov	sp, r7
 80043a0:	bd80      	pop	{r7, pc}
 80043a2:	bf00      	nop
 80043a4:	1ff80000 	.word	0x1ff80000

080043a8 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80043a8:	b480      	push	{r7}
 80043aa:	b087      	sub	sp, #28
 80043ac:	af00      	add	r7, sp, #0
 80043ae:	6078      	str	r0, [r7, #4]
 80043b0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80043b2:	2300      	movs	r3, #0
 80043b4:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80043b6:	2300      	movs	r3, #0
 80043b8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80043be:	683b      	ldr	r3, [r7, #0]
 80043c0:	785b      	ldrb	r3, [r3, #1]
 80043c2:	2b01      	cmp	r3, #1
 80043c4:	d14a      	bne.n	800445c <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80043c6:	683b      	ldr	r3, [r7, #0]
 80043c8:	781b      	ldrb	r3, [r3, #0]
 80043ca:	015a      	lsls	r2, r3, #5
 80043cc:	693b      	ldr	r3, [r7, #16]
 80043ce:	4413      	add	r3, r2
 80043d0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80043da:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80043de:	f040 8086 	bne.w	80044ee <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 80043e2:	683b      	ldr	r3, [r7, #0]
 80043e4:	781b      	ldrb	r3, [r3, #0]
 80043e6:	015a      	lsls	r2, r3, #5
 80043e8:	693b      	ldr	r3, [r7, #16]
 80043ea:	4413      	add	r3, r2
 80043ec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	683a      	ldr	r2, [r7, #0]
 80043f4:	7812      	ldrb	r2, [r2, #0]
 80043f6:	0151      	lsls	r1, r2, #5
 80043f8:	693a      	ldr	r2, [r7, #16]
 80043fa:	440a      	add	r2, r1
 80043fc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004400:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8004404:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8004406:	683b      	ldr	r3, [r7, #0]
 8004408:	781b      	ldrb	r3, [r3, #0]
 800440a:	015a      	lsls	r2, r3, #5
 800440c:	693b      	ldr	r3, [r7, #16]
 800440e:	4413      	add	r3, r2
 8004410:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	683a      	ldr	r2, [r7, #0]
 8004418:	7812      	ldrb	r2, [r2, #0]
 800441a:	0151      	lsls	r1, r2, #5
 800441c:	693a      	ldr	r2, [r7, #16]
 800441e:	440a      	add	r2, r1
 8004420:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004424:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004428:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	3301      	adds	r3, #1
 800442e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	f242 7210 	movw	r2, #10000	@ 0x2710
 8004436:	4293      	cmp	r3, r2
 8004438:	d902      	bls.n	8004440 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800443a:	2301      	movs	r3, #1
 800443c:	75fb      	strb	r3, [r7, #23]
          break;
 800443e:	e056      	b.n	80044ee <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8004440:	683b      	ldr	r3, [r7, #0]
 8004442:	781b      	ldrb	r3, [r3, #0]
 8004444:	015a      	lsls	r2, r3, #5
 8004446:	693b      	ldr	r3, [r7, #16]
 8004448:	4413      	add	r3, r2
 800444a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004454:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004458:	d0e7      	beq.n	800442a <USB_EPStopXfer+0x82>
 800445a:	e048      	b.n	80044ee <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800445c:	683b      	ldr	r3, [r7, #0]
 800445e:	781b      	ldrb	r3, [r3, #0]
 8004460:	015a      	lsls	r2, r3, #5
 8004462:	693b      	ldr	r3, [r7, #16]
 8004464:	4413      	add	r3, r2
 8004466:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004470:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004474:	d13b      	bne.n	80044ee <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8004476:	683b      	ldr	r3, [r7, #0]
 8004478:	781b      	ldrb	r3, [r3, #0]
 800447a:	015a      	lsls	r2, r3, #5
 800447c:	693b      	ldr	r3, [r7, #16]
 800447e:	4413      	add	r3, r2
 8004480:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	683a      	ldr	r2, [r7, #0]
 8004488:	7812      	ldrb	r2, [r2, #0]
 800448a:	0151      	lsls	r1, r2, #5
 800448c:	693a      	ldr	r2, [r7, #16]
 800448e:	440a      	add	r2, r1
 8004490:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004494:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8004498:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800449a:	683b      	ldr	r3, [r7, #0]
 800449c:	781b      	ldrb	r3, [r3, #0]
 800449e:	015a      	lsls	r2, r3, #5
 80044a0:	693b      	ldr	r3, [r7, #16]
 80044a2:	4413      	add	r3, r2
 80044a4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	683a      	ldr	r2, [r7, #0]
 80044ac:	7812      	ldrb	r2, [r2, #0]
 80044ae:	0151      	lsls	r1, r2, #5
 80044b0:	693a      	ldr	r2, [r7, #16]
 80044b2:	440a      	add	r2, r1
 80044b4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80044b8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80044bc:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	3301      	adds	r3, #1
 80044c2:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	f242 7210 	movw	r2, #10000	@ 0x2710
 80044ca:	4293      	cmp	r3, r2
 80044cc:	d902      	bls.n	80044d4 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 80044ce:	2301      	movs	r3, #1
 80044d0:	75fb      	strb	r3, [r7, #23]
          break;
 80044d2:	e00c      	b.n	80044ee <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 80044d4:	683b      	ldr	r3, [r7, #0]
 80044d6:	781b      	ldrb	r3, [r3, #0]
 80044d8:	015a      	lsls	r2, r3, #5
 80044da:	693b      	ldr	r3, [r7, #16]
 80044dc:	4413      	add	r3, r2
 80044de:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80044e8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80044ec:	d0e7      	beq.n	80044be <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 80044ee:	7dfb      	ldrb	r3, [r7, #23]
}
 80044f0:	4618      	mov	r0, r3
 80044f2:	371c      	adds	r7, #28
 80044f4:	46bd      	mov	sp, r7
 80044f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044fa:	4770      	bx	lr

080044fc <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80044fc:	b480      	push	{r7}
 80044fe:	b089      	sub	sp, #36	@ 0x24
 8004500:	af00      	add	r7, sp, #0
 8004502:	60f8      	str	r0, [r7, #12]
 8004504:	60b9      	str	r1, [r7, #8]
 8004506:	4611      	mov	r1, r2
 8004508:	461a      	mov	r2, r3
 800450a:	460b      	mov	r3, r1
 800450c:	71fb      	strb	r3, [r7, #7]
 800450e:	4613      	mov	r3, r2
 8004510:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8004516:	68bb      	ldr	r3, [r7, #8]
 8004518:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800451a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800451e:	2b00      	cmp	r3, #0
 8004520:	d123      	bne.n	800456a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8004522:	88bb      	ldrh	r3, [r7, #4]
 8004524:	3303      	adds	r3, #3
 8004526:	089b      	lsrs	r3, r3, #2
 8004528:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800452a:	2300      	movs	r3, #0
 800452c:	61bb      	str	r3, [r7, #24]
 800452e:	e018      	b.n	8004562 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8004530:	79fb      	ldrb	r3, [r7, #7]
 8004532:	031a      	lsls	r2, r3, #12
 8004534:	697b      	ldr	r3, [r7, #20]
 8004536:	4413      	add	r3, r2
 8004538:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800453c:	461a      	mov	r2, r3
 800453e:	69fb      	ldr	r3, [r7, #28]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	6013      	str	r3, [r2, #0]
      pSrc++;
 8004544:	69fb      	ldr	r3, [r7, #28]
 8004546:	3301      	adds	r3, #1
 8004548:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800454a:	69fb      	ldr	r3, [r7, #28]
 800454c:	3301      	adds	r3, #1
 800454e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004550:	69fb      	ldr	r3, [r7, #28]
 8004552:	3301      	adds	r3, #1
 8004554:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004556:	69fb      	ldr	r3, [r7, #28]
 8004558:	3301      	adds	r3, #1
 800455a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800455c:	69bb      	ldr	r3, [r7, #24]
 800455e:	3301      	adds	r3, #1
 8004560:	61bb      	str	r3, [r7, #24]
 8004562:	69ba      	ldr	r2, [r7, #24]
 8004564:	693b      	ldr	r3, [r7, #16]
 8004566:	429a      	cmp	r2, r3
 8004568:	d3e2      	bcc.n	8004530 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800456a:	2300      	movs	r3, #0
}
 800456c:	4618      	mov	r0, r3
 800456e:	3724      	adds	r7, #36	@ 0x24
 8004570:	46bd      	mov	sp, r7
 8004572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004576:	4770      	bx	lr

08004578 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8004578:	b480      	push	{r7}
 800457a:	b08b      	sub	sp, #44	@ 0x2c
 800457c:	af00      	add	r7, sp, #0
 800457e:	60f8      	str	r0, [r7, #12]
 8004580:	60b9      	str	r1, [r7, #8]
 8004582:	4613      	mov	r3, r2
 8004584:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800458a:	68bb      	ldr	r3, [r7, #8]
 800458c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800458e:	88fb      	ldrh	r3, [r7, #6]
 8004590:	089b      	lsrs	r3, r3, #2
 8004592:	b29b      	uxth	r3, r3
 8004594:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8004596:	88fb      	ldrh	r3, [r7, #6]
 8004598:	f003 0303 	and.w	r3, r3, #3
 800459c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800459e:	2300      	movs	r3, #0
 80045a0:	623b      	str	r3, [r7, #32]
 80045a2:	e014      	b.n	80045ce <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80045a4:	69bb      	ldr	r3, [r7, #24]
 80045a6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80045aa:	681a      	ldr	r2, [r3, #0]
 80045ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045ae:	601a      	str	r2, [r3, #0]
    pDest++;
 80045b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045b2:	3301      	adds	r3, #1
 80045b4:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80045b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045b8:	3301      	adds	r3, #1
 80045ba:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80045bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045be:	3301      	adds	r3, #1
 80045c0:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80045c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045c4:	3301      	adds	r3, #1
 80045c6:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 80045c8:	6a3b      	ldr	r3, [r7, #32]
 80045ca:	3301      	adds	r3, #1
 80045cc:	623b      	str	r3, [r7, #32]
 80045ce:	6a3a      	ldr	r2, [r7, #32]
 80045d0:	697b      	ldr	r3, [r7, #20]
 80045d2:	429a      	cmp	r2, r3
 80045d4:	d3e6      	bcc.n	80045a4 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80045d6:	8bfb      	ldrh	r3, [r7, #30]
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d01e      	beq.n	800461a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80045dc:	2300      	movs	r3, #0
 80045de:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80045e0:	69bb      	ldr	r3, [r7, #24]
 80045e2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80045e6:	461a      	mov	r2, r3
 80045e8:	f107 0310 	add.w	r3, r7, #16
 80045ec:	6812      	ldr	r2, [r2, #0]
 80045ee:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80045f0:	693a      	ldr	r2, [r7, #16]
 80045f2:	6a3b      	ldr	r3, [r7, #32]
 80045f4:	b2db      	uxtb	r3, r3
 80045f6:	00db      	lsls	r3, r3, #3
 80045f8:	fa22 f303 	lsr.w	r3, r2, r3
 80045fc:	b2da      	uxtb	r2, r3
 80045fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004600:	701a      	strb	r2, [r3, #0]
      i++;
 8004602:	6a3b      	ldr	r3, [r7, #32]
 8004604:	3301      	adds	r3, #1
 8004606:	623b      	str	r3, [r7, #32]
      pDest++;
 8004608:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800460a:	3301      	adds	r3, #1
 800460c:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800460e:	8bfb      	ldrh	r3, [r7, #30]
 8004610:	3b01      	subs	r3, #1
 8004612:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8004614:	8bfb      	ldrh	r3, [r7, #30]
 8004616:	2b00      	cmp	r3, #0
 8004618:	d1ea      	bne.n	80045f0 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800461a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800461c:	4618      	mov	r0, r3
 800461e:	372c      	adds	r7, #44	@ 0x2c
 8004620:	46bd      	mov	sp, r7
 8004622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004626:	4770      	bx	lr

08004628 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8004628:	b480      	push	{r7}
 800462a:	b085      	sub	sp, #20
 800462c:	af00      	add	r7, sp, #0
 800462e:	6078      	str	r0, [r7, #4]
 8004630:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004636:	683b      	ldr	r3, [r7, #0]
 8004638:	781b      	ldrb	r3, [r3, #0]
 800463a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800463c:	683b      	ldr	r3, [r7, #0]
 800463e:	785b      	ldrb	r3, [r3, #1]
 8004640:	2b01      	cmp	r3, #1
 8004642:	d12c      	bne.n	800469e <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004644:	68bb      	ldr	r3, [r7, #8]
 8004646:	015a      	lsls	r2, r3, #5
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	4413      	add	r3, r2
 800464c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	2b00      	cmp	r3, #0
 8004654:	db12      	blt.n	800467c <USB_EPSetStall+0x54>
 8004656:	68bb      	ldr	r3, [r7, #8]
 8004658:	2b00      	cmp	r3, #0
 800465a:	d00f      	beq.n	800467c <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800465c:	68bb      	ldr	r3, [r7, #8]
 800465e:	015a      	lsls	r2, r3, #5
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	4413      	add	r3, r2
 8004664:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	68ba      	ldr	r2, [r7, #8]
 800466c:	0151      	lsls	r1, r2, #5
 800466e:	68fa      	ldr	r2, [r7, #12]
 8004670:	440a      	add	r2, r1
 8004672:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004676:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800467a:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800467c:	68bb      	ldr	r3, [r7, #8]
 800467e:	015a      	lsls	r2, r3, #5
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	4413      	add	r3, r2
 8004684:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	68ba      	ldr	r2, [r7, #8]
 800468c:	0151      	lsls	r1, r2, #5
 800468e:	68fa      	ldr	r2, [r7, #12]
 8004690:	440a      	add	r2, r1
 8004692:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004696:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800469a:	6013      	str	r3, [r2, #0]
 800469c:	e02b      	b.n	80046f6 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800469e:	68bb      	ldr	r3, [r7, #8]
 80046a0:	015a      	lsls	r2, r3, #5
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	4413      	add	r3, r2
 80046a6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	db12      	blt.n	80046d6 <USB_EPSetStall+0xae>
 80046b0:	68bb      	ldr	r3, [r7, #8]
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d00f      	beq.n	80046d6 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80046b6:	68bb      	ldr	r3, [r7, #8]
 80046b8:	015a      	lsls	r2, r3, #5
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	4413      	add	r3, r2
 80046be:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	68ba      	ldr	r2, [r7, #8]
 80046c6:	0151      	lsls	r1, r2, #5
 80046c8:	68fa      	ldr	r2, [r7, #12]
 80046ca:	440a      	add	r2, r1
 80046cc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80046d0:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80046d4:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80046d6:	68bb      	ldr	r3, [r7, #8]
 80046d8:	015a      	lsls	r2, r3, #5
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	4413      	add	r3, r2
 80046de:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	68ba      	ldr	r2, [r7, #8]
 80046e6:	0151      	lsls	r1, r2, #5
 80046e8:	68fa      	ldr	r2, [r7, #12]
 80046ea:	440a      	add	r2, r1
 80046ec:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80046f0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80046f4:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80046f6:	2300      	movs	r3, #0
}
 80046f8:	4618      	mov	r0, r3
 80046fa:	3714      	adds	r7, #20
 80046fc:	46bd      	mov	sp, r7
 80046fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004702:	4770      	bx	lr

08004704 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8004704:	b480      	push	{r7}
 8004706:	b085      	sub	sp, #20
 8004708:	af00      	add	r7, sp, #0
 800470a:	6078      	str	r0, [r7, #4]
 800470c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004712:	683b      	ldr	r3, [r7, #0]
 8004714:	781b      	ldrb	r3, [r3, #0]
 8004716:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004718:	683b      	ldr	r3, [r7, #0]
 800471a:	785b      	ldrb	r3, [r3, #1]
 800471c:	2b01      	cmp	r3, #1
 800471e:	d128      	bne.n	8004772 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004720:	68bb      	ldr	r3, [r7, #8]
 8004722:	015a      	lsls	r2, r3, #5
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	4413      	add	r3, r2
 8004728:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	68ba      	ldr	r2, [r7, #8]
 8004730:	0151      	lsls	r1, r2, #5
 8004732:	68fa      	ldr	r2, [r7, #12]
 8004734:	440a      	add	r2, r1
 8004736:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800473a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800473e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004740:	683b      	ldr	r3, [r7, #0]
 8004742:	791b      	ldrb	r3, [r3, #4]
 8004744:	2b03      	cmp	r3, #3
 8004746:	d003      	beq.n	8004750 <USB_EPClearStall+0x4c>
 8004748:	683b      	ldr	r3, [r7, #0]
 800474a:	791b      	ldrb	r3, [r3, #4]
 800474c:	2b02      	cmp	r3, #2
 800474e:	d138      	bne.n	80047c2 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004750:	68bb      	ldr	r3, [r7, #8]
 8004752:	015a      	lsls	r2, r3, #5
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	4413      	add	r3, r2
 8004758:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	68ba      	ldr	r2, [r7, #8]
 8004760:	0151      	lsls	r1, r2, #5
 8004762:	68fa      	ldr	r2, [r7, #12]
 8004764:	440a      	add	r2, r1
 8004766:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800476a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800476e:	6013      	str	r3, [r2, #0]
 8004770:	e027      	b.n	80047c2 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004772:	68bb      	ldr	r3, [r7, #8]
 8004774:	015a      	lsls	r2, r3, #5
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	4413      	add	r3, r2
 800477a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	68ba      	ldr	r2, [r7, #8]
 8004782:	0151      	lsls	r1, r2, #5
 8004784:	68fa      	ldr	r2, [r7, #12]
 8004786:	440a      	add	r2, r1
 8004788:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800478c:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8004790:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004792:	683b      	ldr	r3, [r7, #0]
 8004794:	791b      	ldrb	r3, [r3, #4]
 8004796:	2b03      	cmp	r3, #3
 8004798:	d003      	beq.n	80047a2 <USB_EPClearStall+0x9e>
 800479a:	683b      	ldr	r3, [r7, #0]
 800479c:	791b      	ldrb	r3, [r3, #4]
 800479e:	2b02      	cmp	r3, #2
 80047a0:	d10f      	bne.n	80047c2 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80047a2:	68bb      	ldr	r3, [r7, #8]
 80047a4:	015a      	lsls	r2, r3, #5
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	4413      	add	r3, r2
 80047aa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	68ba      	ldr	r2, [r7, #8]
 80047b2:	0151      	lsls	r1, r2, #5
 80047b4:	68fa      	ldr	r2, [r7, #12]
 80047b6:	440a      	add	r2, r1
 80047b8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80047bc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80047c0:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80047c2:	2300      	movs	r3, #0
}
 80047c4:	4618      	mov	r0, r3
 80047c6:	3714      	adds	r7, #20
 80047c8:	46bd      	mov	sp, r7
 80047ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ce:	4770      	bx	lr

080047d0 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80047d0:	b480      	push	{r7}
 80047d2:	b085      	sub	sp, #20
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	6078      	str	r0, [r7, #4]
 80047d8:	460b      	mov	r3, r1
 80047da:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	68fa      	ldr	r2, [r7, #12]
 80047ea:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80047ee:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 80047f2:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80047fa:	681a      	ldr	r2, [r3, #0]
 80047fc:	78fb      	ldrb	r3, [r7, #3]
 80047fe:	011b      	lsls	r3, r3, #4
 8004800:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8004804:	68f9      	ldr	r1, [r7, #12]
 8004806:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800480a:	4313      	orrs	r3, r2
 800480c:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800480e:	2300      	movs	r3, #0
}
 8004810:	4618      	mov	r0, r3
 8004812:	3714      	adds	r7, #20
 8004814:	46bd      	mov	sp, r7
 8004816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800481a:	4770      	bx	lr

0800481c <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800481c:	b480      	push	{r7}
 800481e:	b085      	sub	sp, #20
 8004820:	af00      	add	r7, sp, #0
 8004822:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	68fa      	ldr	r2, [r7, #12]
 8004832:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8004836:	f023 0303 	bic.w	r3, r3, #3
 800483a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004842:	685b      	ldr	r3, [r3, #4]
 8004844:	68fa      	ldr	r2, [r7, #12]
 8004846:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800484a:	f023 0302 	bic.w	r3, r3, #2
 800484e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004850:	2300      	movs	r3, #0
}
 8004852:	4618      	mov	r0, r3
 8004854:	3714      	adds	r7, #20
 8004856:	46bd      	mov	sp, r7
 8004858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800485c:	4770      	bx	lr

0800485e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800485e:	b480      	push	{r7}
 8004860:	b085      	sub	sp, #20
 8004862:	af00      	add	r7, sp, #0
 8004864:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	68fa      	ldr	r2, [r7, #12]
 8004874:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8004878:	f023 0303 	bic.w	r3, r3, #3
 800487c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004884:	685b      	ldr	r3, [r3, #4]
 8004886:	68fa      	ldr	r2, [r7, #12]
 8004888:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800488c:	f043 0302 	orr.w	r3, r3, #2
 8004890:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004892:	2300      	movs	r3, #0
}
 8004894:	4618      	mov	r0, r3
 8004896:	3714      	adds	r7, #20
 8004898:	46bd      	mov	sp, r7
 800489a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800489e:	4770      	bx	lr

080048a0 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 80048a0:	b480      	push	{r7}
 80048a2:	b085      	sub	sp, #20
 80048a4:	af00      	add	r7, sp, #0
 80048a6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	695b      	ldr	r3, [r3, #20]
 80048ac:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	699b      	ldr	r3, [r3, #24]
 80048b2:	68fa      	ldr	r2, [r7, #12]
 80048b4:	4013      	ands	r3, r2
 80048b6:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80048b8:	68fb      	ldr	r3, [r7, #12]
}
 80048ba:	4618      	mov	r0, r3
 80048bc:	3714      	adds	r7, #20
 80048be:	46bd      	mov	sp, r7
 80048c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c4:	4770      	bx	lr

080048c6 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80048c6:	b480      	push	{r7}
 80048c8:	b085      	sub	sp, #20
 80048ca:	af00      	add	r7, sp, #0
 80048cc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80048d8:	699b      	ldr	r3, [r3, #24]
 80048da:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80048e2:	69db      	ldr	r3, [r3, #28]
 80048e4:	68ba      	ldr	r2, [r7, #8]
 80048e6:	4013      	ands	r3, r2
 80048e8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80048ea:	68bb      	ldr	r3, [r7, #8]
 80048ec:	0c1b      	lsrs	r3, r3, #16
}
 80048ee:	4618      	mov	r0, r3
 80048f0:	3714      	adds	r7, #20
 80048f2:	46bd      	mov	sp, r7
 80048f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f8:	4770      	bx	lr

080048fa <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80048fa:	b480      	push	{r7}
 80048fc:	b085      	sub	sp, #20
 80048fe:	af00      	add	r7, sp, #0
 8004900:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800490c:	699b      	ldr	r3, [r3, #24]
 800490e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004916:	69db      	ldr	r3, [r3, #28]
 8004918:	68ba      	ldr	r2, [r7, #8]
 800491a:	4013      	ands	r3, r2
 800491c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800491e:	68bb      	ldr	r3, [r7, #8]
 8004920:	b29b      	uxth	r3, r3
}
 8004922:	4618      	mov	r0, r3
 8004924:	3714      	adds	r7, #20
 8004926:	46bd      	mov	sp, r7
 8004928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800492c:	4770      	bx	lr

0800492e <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800492e:	b480      	push	{r7}
 8004930:	b085      	sub	sp, #20
 8004932:	af00      	add	r7, sp, #0
 8004934:	6078      	str	r0, [r7, #4]
 8004936:	460b      	mov	r3, r1
 8004938:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800493e:	78fb      	ldrb	r3, [r7, #3]
 8004940:	015a      	lsls	r2, r3, #5
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	4413      	add	r3, r2
 8004946:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800494a:	689b      	ldr	r3, [r3, #8]
 800494c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004954:	695b      	ldr	r3, [r3, #20]
 8004956:	68ba      	ldr	r2, [r7, #8]
 8004958:	4013      	ands	r3, r2
 800495a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800495c:	68bb      	ldr	r3, [r7, #8]
}
 800495e:	4618      	mov	r0, r3
 8004960:	3714      	adds	r7, #20
 8004962:	46bd      	mov	sp, r7
 8004964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004968:	4770      	bx	lr

0800496a <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800496a:	b480      	push	{r7}
 800496c:	b087      	sub	sp, #28
 800496e:	af00      	add	r7, sp, #0
 8004970:	6078      	str	r0, [r7, #4]
 8004972:	460b      	mov	r3, r1
 8004974:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800497a:	697b      	ldr	r3, [r7, #20]
 800497c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004980:	691b      	ldr	r3, [r3, #16]
 8004982:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8004984:	697b      	ldr	r3, [r7, #20]
 8004986:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800498a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800498c:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800498e:	78fb      	ldrb	r3, [r7, #3]
 8004990:	f003 030f 	and.w	r3, r3, #15
 8004994:	68fa      	ldr	r2, [r7, #12]
 8004996:	fa22 f303 	lsr.w	r3, r2, r3
 800499a:	01db      	lsls	r3, r3, #7
 800499c:	b2db      	uxtb	r3, r3
 800499e:	693a      	ldr	r2, [r7, #16]
 80049a0:	4313      	orrs	r3, r2
 80049a2:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80049a4:	78fb      	ldrb	r3, [r7, #3]
 80049a6:	015a      	lsls	r2, r3, #5
 80049a8:	697b      	ldr	r3, [r7, #20]
 80049aa:	4413      	add	r3, r2
 80049ac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80049b0:	689b      	ldr	r3, [r3, #8]
 80049b2:	693a      	ldr	r2, [r7, #16]
 80049b4:	4013      	ands	r3, r2
 80049b6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80049b8:	68bb      	ldr	r3, [r7, #8]
}
 80049ba:	4618      	mov	r0, r3
 80049bc:	371c      	adds	r7, #28
 80049be:	46bd      	mov	sp, r7
 80049c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c4:	4770      	bx	lr

080049c6 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 80049c6:	b480      	push	{r7}
 80049c8:	b083      	sub	sp, #12
 80049ca:	af00      	add	r7, sp, #0
 80049cc:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	695b      	ldr	r3, [r3, #20]
 80049d2:	f003 0301 	and.w	r3, r3, #1
}
 80049d6:	4618      	mov	r0, r3
 80049d8:	370c      	adds	r7, #12
 80049da:	46bd      	mov	sp, r7
 80049dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e0:	4770      	bx	lr

080049e2 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 80049e2:	b480      	push	{r7}
 80049e4:	b085      	sub	sp, #20
 80049e6:	af00      	add	r7, sp, #0
 80049e8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	68fa      	ldr	r2, [r7, #12]
 80049f8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80049fc:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8004a00:	f023 0307 	bic.w	r3, r3, #7
 8004a04:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004a0c:	685b      	ldr	r3, [r3, #4]
 8004a0e:	68fa      	ldr	r2, [r7, #12]
 8004a10:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004a14:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004a18:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004a1a:	2300      	movs	r3, #0
}
 8004a1c:	4618      	mov	r0, r3
 8004a1e:	3714      	adds	r7, #20
 8004a20:	46bd      	mov	sp, r7
 8004a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a26:	4770      	bx	lr

08004a28 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8004a28:	b480      	push	{r7}
 8004a2a:	b087      	sub	sp, #28
 8004a2c:	af00      	add	r7, sp, #0
 8004a2e:	60f8      	str	r0, [r7, #12]
 8004a30:	460b      	mov	r3, r1
 8004a32:	607a      	str	r2, [r7, #4]
 8004a34:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	333c      	adds	r3, #60	@ 0x3c
 8004a3e:	3304      	adds	r3, #4
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8004a44:	693b      	ldr	r3, [r7, #16]
 8004a46:	4a26      	ldr	r2, [pc, #152]	@ (8004ae0 <USB_EP0_OutStart+0xb8>)
 8004a48:	4293      	cmp	r3, r2
 8004a4a:	d90a      	bls.n	8004a62 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004a4c:	697b      	ldr	r3, [r7, #20]
 8004a4e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004a58:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004a5c:	d101      	bne.n	8004a62 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8004a5e:	2300      	movs	r3, #0
 8004a60:	e037      	b.n	8004ad2 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8004a62:	697b      	ldr	r3, [r7, #20]
 8004a64:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004a68:	461a      	mov	r2, r3
 8004a6a:	2300      	movs	r3, #0
 8004a6c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004a6e:	697b      	ldr	r3, [r7, #20]
 8004a70:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004a74:	691b      	ldr	r3, [r3, #16]
 8004a76:	697a      	ldr	r2, [r7, #20]
 8004a78:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004a7c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004a80:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8004a82:	697b      	ldr	r3, [r7, #20]
 8004a84:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004a88:	691b      	ldr	r3, [r3, #16]
 8004a8a:	697a      	ldr	r2, [r7, #20]
 8004a8c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004a90:	f043 0318 	orr.w	r3, r3, #24
 8004a94:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8004a96:	697b      	ldr	r3, [r7, #20]
 8004a98:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004a9c:	691b      	ldr	r3, [r3, #16]
 8004a9e:	697a      	ldr	r2, [r7, #20]
 8004aa0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004aa4:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8004aa8:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8004aaa:	7afb      	ldrb	r3, [r7, #11]
 8004aac:	2b01      	cmp	r3, #1
 8004aae:	d10f      	bne.n	8004ad0 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8004ab0:	697b      	ldr	r3, [r7, #20]
 8004ab2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004ab6:	461a      	mov	r2, r3
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8004abc:	697b      	ldr	r3, [r7, #20]
 8004abe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	697a      	ldr	r2, [r7, #20]
 8004ac6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004aca:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 8004ace:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004ad0:	2300      	movs	r3, #0
}
 8004ad2:	4618      	mov	r0, r3
 8004ad4:	371c      	adds	r7, #28
 8004ad6:	46bd      	mov	sp, r7
 8004ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004adc:	4770      	bx	lr
 8004ade:	bf00      	nop
 8004ae0:	4f54300a 	.word	0x4f54300a

08004ae4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004ae4:	b480      	push	{r7}
 8004ae6:	b085      	sub	sp, #20
 8004ae8:	af00      	add	r7, sp, #0
 8004aea:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004aec:	2300      	movs	r3, #0
 8004aee:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	3301      	adds	r3, #1
 8004af4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004afc:	d901      	bls.n	8004b02 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004afe:	2303      	movs	r3, #3
 8004b00:	e01b      	b.n	8004b3a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	691b      	ldr	r3, [r3, #16]
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	daf2      	bge.n	8004af0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004b0a:	2300      	movs	r3, #0
 8004b0c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	691b      	ldr	r3, [r3, #16]
 8004b12:	f043 0201 	orr.w	r2, r3, #1
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	3301      	adds	r3, #1
 8004b1e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004b26:	d901      	bls.n	8004b2c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004b28:	2303      	movs	r3, #3
 8004b2a:	e006      	b.n	8004b3a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	691b      	ldr	r3, [r3, #16]
 8004b30:	f003 0301 	and.w	r3, r3, #1
 8004b34:	2b01      	cmp	r3, #1
 8004b36:	d0f0      	beq.n	8004b1a <USB_CoreReset+0x36>

  return HAL_OK;
 8004b38:	2300      	movs	r3, #0
}
 8004b3a:	4618      	mov	r0, r3
 8004b3c:	3714      	adds	r7, #20
 8004b3e:	46bd      	mov	sp, r7
 8004b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b44:	4770      	bx	lr
	...

08004b48 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 8004b48:	b480      	push	{r7}
 8004b4a:	b083      	sub	sp, #12
 8004b4c:	af00      	add	r7, sp, #0
 8004b4e:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8004b50:	4a04      	ldr	r2, [pc, #16]	@ (8004b64 <LL_SetSystemCoreClock+0x1c>)
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	6013      	str	r3, [r2, #0]
}
 8004b56:	bf00      	nop
 8004b58:	370c      	adds	r7, #12
 8004b5a:	46bd      	mov	sp, r7
 8004b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b60:	4770      	bx	lr
 8004b62:	bf00      	nop
 8004b64:	20000000 	.word	0x20000000

08004b68 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004b68:	b580      	push	{r7, lr}
 8004b6a:	b084      	sub	sp, #16
 8004b6c:	af00      	add	r7, sp, #0
 8004b6e:	6078      	str	r0, [r7, #4]
 8004b70:	460b      	mov	r3, r1
 8004b72:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8004b74:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8004b78:	f002 fc38 	bl	80073ec <USBD_static_malloc>
 8004b7c:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d109      	bne.n	8004b98 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	32b0      	adds	r2, #176	@ 0xb0
 8004b8e:	2100      	movs	r1, #0
 8004b90:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8004b94:	2302      	movs	r3, #2
 8004b96:	e0d4      	b.n	8004d42 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8004b98:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8004b9c:	2100      	movs	r1, #0
 8004b9e:	68f8      	ldr	r0, [r7, #12]
 8004ba0:	f003 f8ee 	bl	8007d80 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	32b0      	adds	r2, #176	@ 0xb0
 8004bae:	68f9      	ldr	r1, [r7, #12]
 8004bb0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	32b0      	adds	r2, #176	@ 0xb0
 8004bbe:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	7c1b      	ldrb	r3, [r3, #16]
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d138      	bne.n	8004c42 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8004bd0:	4b5e      	ldr	r3, [pc, #376]	@ (8004d4c <USBD_CDC_Init+0x1e4>)
 8004bd2:	7819      	ldrb	r1, [r3, #0]
 8004bd4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004bd8:	2202      	movs	r2, #2
 8004bda:	6878      	ldr	r0, [r7, #4]
 8004bdc:	f002 fae3 	bl	80071a6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8004be0:	4b5a      	ldr	r3, [pc, #360]	@ (8004d4c <USBD_CDC_Init+0x1e4>)
 8004be2:	781b      	ldrb	r3, [r3, #0]
 8004be4:	f003 020f 	and.w	r2, r3, #15
 8004be8:	6879      	ldr	r1, [r7, #4]
 8004bea:	4613      	mov	r3, r2
 8004bec:	009b      	lsls	r3, r3, #2
 8004bee:	4413      	add	r3, r2
 8004bf0:	009b      	lsls	r3, r3, #2
 8004bf2:	440b      	add	r3, r1
 8004bf4:	3324      	adds	r3, #36	@ 0x24
 8004bf6:	2201      	movs	r2, #1
 8004bf8:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8004bfa:	4b55      	ldr	r3, [pc, #340]	@ (8004d50 <USBD_CDC_Init+0x1e8>)
 8004bfc:	7819      	ldrb	r1, [r3, #0]
 8004bfe:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004c02:	2202      	movs	r2, #2
 8004c04:	6878      	ldr	r0, [r7, #4]
 8004c06:	f002 face 	bl	80071a6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8004c0a:	4b51      	ldr	r3, [pc, #324]	@ (8004d50 <USBD_CDC_Init+0x1e8>)
 8004c0c:	781b      	ldrb	r3, [r3, #0]
 8004c0e:	f003 020f 	and.w	r2, r3, #15
 8004c12:	6879      	ldr	r1, [r7, #4]
 8004c14:	4613      	mov	r3, r2
 8004c16:	009b      	lsls	r3, r3, #2
 8004c18:	4413      	add	r3, r2
 8004c1a:	009b      	lsls	r3, r3, #2
 8004c1c:	440b      	add	r3, r1
 8004c1e:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8004c22:	2201      	movs	r2, #1
 8004c24:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8004c26:	4b4b      	ldr	r3, [pc, #300]	@ (8004d54 <USBD_CDC_Init+0x1ec>)
 8004c28:	781b      	ldrb	r3, [r3, #0]
 8004c2a:	f003 020f 	and.w	r2, r3, #15
 8004c2e:	6879      	ldr	r1, [r7, #4]
 8004c30:	4613      	mov	r3, r2
 8004c32:	009b      	lsls	r3, r3, #2
 8004c34:	4413      	add	r3, r2
 8004c36:	009b      	lsls	r3, r3, #2
 8004c38:	440b      	add	r3, r1
 8004c3a:	3326      	adds	r3, #38	@ 0x26
 8004c3c:	2210      	movs	r2, #16
 8004c3e:	801a      	strh	r2, [r3, #0]
 8004c40:	e035      	b.n	8004cae <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8004c42:	4b42      	ldr	r3, [pc, #264]	@ (8004d4c <USBD_CDC_Init+0x1e4>)
 8004c44:	7819      	ldrb	r1, [r3, #0]
 8004c46:	2340      	movs	r3, #64	@ 0x40
 8004c48:	2202      	movs	r2, #2
 8004c4a:	6878      	ldr	r0, [r7, #4]
 8004c4c:	f002 faab 	bl	80071a6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8004c50:	4b3e      	ldr	r3, [pc, #248]	@ (8004d4c <USBD_CDC_Init+0x1e4>)
 8004c52:	781b      	ldrb	r3, [r3, #0]
 8004c54:	f003 020f 	and.w	r2, r3, #15
 8004c58:	6879      	ldr	r1, [r7, #4]
 8004c5a:	4613      	mov	r3, r2
 8004c5c:	009b      	lsls	r3, r3, #2
 8004c5e:	4413      	add	r3, r2
 8004c60:	009b      	lsls	r3, r3, #2
 8004c62:	440b      	add	r3, r1
 8004c64:	3324      	adds	r3, #36	@ 0x24
 8004c66:	2201      	movs	r2, #1
 8004c68:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8004c6a:	4b39      	ldr	r3, [pc, #228]	@ (8004d50 <USBD_CDC_Init+0x1e8>)
 8004c6c:	7819      	ldrb	r1, [r3, #0]
 8004c6e:	2340      	movs	r3, #64	@ 0x40
 8004c70:	2202      	movs	r2, #2
 8004c72:	6878      	ldr	r0, [r7, #4]
 8004c74:	f002 fa97 	bl	80071a6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8004c78:	4b35      	ldr	r3, [pc, #212]	@ (8004d50 <USBD_CDC_Init+0x1e8>)
 8004c7a:	781b      	ldrb	r3, [r3, #0]
 8004c7c:	f003 020f 	and.w	r2, r3, #15
 8004c80:	6879      	ldr	r1, [r7, #4]
 8004c82:	4613      	mov	r3, r2
 8004c84:	009b      	lsls	r3, r3, #2
 8004c86:	4413      	add	r3, r2
 8004c88:	009b      	lsls	r3, r3, #2
 8004c8a:	440b      	add	r3, r1
 8004c8c:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8004c90:	2201      	movs	r2, #1
 8004c92:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8004c94:	4b2f      	ldr	r3, [pc, #188]	@ (8004d54 <USBD_CDC_Init+0x1ec>)
 8004c96:	781b      	ldrb	r3, [r3, #0]
 8004c98:	f003 020f 	and.w	r2, r3, #15
 8004c9c:	6879      	ldr	r1, [r7, #4]
 8004c9e:	4613      	mov	r3, r2
 8004ca0:	009b      	lsls	r3, r3, #2
 8004ca2:	4413      	add	r3, r2
 8004ca4:	009b      	lsls	r3, r3, #2
 8004ca6:	440b      	add	r3, r1
 8004ca8:	3326      	adds	r3, #38	@ 0x26
 8004caa:	2210      	movs	r2, #16
 8004cac:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8004cae:	4b29      	ldr	r3, [pc, #164]	@ (8004d54 <USBD_CDC_Init+0x1ec>)
 8004cb0:	7819      	ldrb	r1, [r3, #0]
 8004cb2:	2308      	movs	r3, #8
 8004cb4:	2203      	movs	r2, #3
 8004cb6:	6878      	ldr	r0, [r7, #4]
 8004cb8:	f002 fa75 	bl	80071a6 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8004cbc:	4b25      	ldr	r3, [pc, #148]	@ (8004d54 <USBD_CDC_Init+0x1ec>)
 8004cbe:	781b      	ldrb	r3, [r3, #0]
 8004cc0:	f003 020f 	and.w	r2, r3, #15
 8004cc4:	6879      	ldr	r1, [r7, #4]
 8004cc6:	4613      	mov	r3, r2
 8004cc8:	009b      	lsls	r3, r3, #2
 8004cca:	4413      	add	r3, r2
 8004ccc:	009b      	lsls	r3, r3, #2
 8004cce:	440b      	add	r3, r1
 8004cd0:	3324      	adds	r3, #36	@ 0x24
 8004cd2:	2201      	movs	r2, #1
 8004cd4:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	2200      	movs	r2, #0
 8004cda:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8004ce4:	687a      	ldr	r2, [r7, #4]
 8004ce6:	33b0      	adds	r3, #176	@ 0xb0
 8004ce8:	009b      	lsls	r3, r3, #2
 8004cea:	4413      	add	r3, r2
 8004cec:	685b      	ldr	r3, [r3, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	2200      	movs	r2, #0
 8004cf6:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	2200      	movs	r2, #0
 8004cfe:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d101      	bne.n	8004d10 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8004d0c:	2302      	movs	r3, #2
 8004d0e:	e018      	b.n	8004d42 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	7c1b      	ldrb	r3, [r3, #16]
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d10a      	bne.n	8004d2e <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8004d18:	4b0d      	ldr	r3, [pc, #52]	@ (8004d50 <USBD_CDC_Init+0x1e8>)
 8004d1a:	7819      	ldrb	r1, [r3, #0]
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8004d22:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004d26:	6878      	ldr	r0, [r7, #4]
 8004d28:	f002 fb2c 	bl	8007384 <USBD_LL_PrepareReceive>
 8004d2c:	e008      	b.n	8004d40 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8004d2e:	4b08      	ldr	r3, [pc, #32]	@ (8004d50 <USBD_CDC_Init+0x1e8>)
 8004d30:	7819      	ldrb	r1, [r3, #0]
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8004d38:	2340      	movs	r3, #64	@ 0x40
 8004d3a:	6878      	ldr	r0, [r7, #4]
 8004d3c:	f002 fb22 	bl	8007384 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8004d40:	2300      	movs	r3, #0
}
 8004d42:	4618      	mov	r0, r3
 8004d44:	3710      	adds	r7, #16
 8004d46:	46bd      	mov	sp, r7
 8004d48:	bd80      	pop	{r7, pc}
 8004d4a:	bf00      	nop
 8004d4c:	20000093 	.word	0x20000093
 8004d50:	20000094 	.word	0x20000094
 8004d54:	20000095 	.word	0x20000095

08004d58 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004d58:	b580      	push	{r7, lr}
 8004d5a:	b082      	sub	sp, #8
 8004d5c:	af00      	add	r7, sp, #0
 8004d5e:	6078      	str	r0, [r7, #4]
 8004d60:	460b      	mov	r3, r1
 8004d62:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8004d64:	4b3a      	ldr	r3, [pc, #232]	@ (8004e50 <USBD_CDC_DeInit+0xf8>)
 8004d66:	781b      	ldrb	r3, [r3, #0]
 8004d68:	4619      	mov	r1, r3
 8004d6a:	6878      	ldr	r0, [r7, #4]
 8004d6c:	f002 fa41 	bl	80071f2 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8004d70:	4b37      	ldr	r3, [pc, #220]	@ (8004e50 <USBD_CDC_DeInit+0xf8>)
 8004d72:	781b      	ldrb	r3, [r3, #0]
 8004d74:	f003 020f 	and.w	r2, r3, #15
 8004d78:	6879      	ldr	r1, [r7, #4]
 8004d7a:	4613      	mov	r3, r2
 8004d7c:	009b      	lsls	r3, r3, #2
 8004d7e:	4413      	add	r3, r2
 8004d80:	009b      	lsls	r3, r3, #2
 8004d82:	440b      	add	r3, r1
 8004d84:	3324      	adds	r3, #36	@ 0x24
 8004d86:	2200      	movs	r2, #0
 8004d88:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8004d8a:	4b32      	ldr	r3, [pc, #200]	@ (8004e54 <USBD_CDC_DeInit+0xfc>)
 8004d8c:	781b      	ldrb	r3, [r3, #0]
 8004d8e:	4619      	mov	r1, r3
 8004d90:	6878      	ldr	r0, [r7, #4]
 8004d92:	f002 fa2e 	bl	80071f2 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8004d96:	4b2f      	ldr	r3, [pc, #188]	@ (8004e54 <USBD_CDC_DeInit+0xfc>)
 8004d98:	781b      	ldrb	r3, [r3, #0]
 8004d9a:	f003 020f 	and.w	r2, r3, #15
 8004d9e:	6879      	ldr	r1, [r7, #4]
 8004da0:	4613      	mov	r3, r2
 8004da2:	009b      	lsls	r3, r3, #2
 8004da4:	4413      	add	r3, r2
 8004da6:	009b      	lsls	r3, r3, #2
 8004da8:	440b      	add	r3, r1
 8004daa:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8004dae:	2200      	movs	r2, #0
 8004db0:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8004db2:	4b29      	ldr	r3, [pc, #164]	@ (8004e58 <USBD_CDC_DeInit+0x100>)
 8004db4:	781b      	ldrb	r3, [r3, #0]
 8004db6:	4619      	mov	r1, r3
 8004db8:	6878      	ldr	r0, [r7, #4]
 8004dba:	f002 fa1a 	bl	80071f2 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8004dbe:	4b26      	ldr	r3, [pc, #152]	@ (8004e58 <USBD_CDC_DeInit+0x100>)
 8004dc0:	781b      	ldrb	r3, [r3, #0]
 8004dc2:	f003 020f 	and.w	r2, r3, #15
 8004dc6:	6879      	ldr	r1, [r7, #4]
 8004dc8:	4613      	mov	r3, r2
 8004dca:	009b      	lsls	r3, r3, #2
 8004dcc:	4413      	add	r3, r2
 8004dce:	009b      	lsls	r3, r3, #2
 8004dd0:	440b      	add	r3, r1
 8004dd2:	3324      	adds	r3, #36	@ 0x24
 8004dd4:	2200      	movs	r2, #0
 8004dd6:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8004dd8:	4b1f      	ldr	r3, [pc, #124]	@ (8004e58 <USBD_CDC_DeInit+0x100>)
 8004dda:	781b      	ldrb	r3, [r3, #0]
 8004ddc:	f003 020f 	and.w	r2, r3, #15
 8004de0:	6879      	ldr	r1, [r7, #4]
 8004de2:	4613      	mov	r3, r2
 8004de4:	009b      	lsls	r3, r3, #2
 8004de6:	4413      	add	r3, r2
 8004de8:	009b      	lsls	r3, r3, #2
 8004dea:	440b      	add	r3, r1
 8004dec:	3326      	adds	r3, #38	@ 0x26
 8004dee:	2200      	movs	r2, #0
 8004df0:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	32b0      	adds	r2, #176	@ 0xb0
 8004dfc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d01f      	beq.n	8004e44 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8004e0a:	687a      	ldr	r2, [r7, #4]
 8004e0c:	33b0      	adds	r3, #176	@ 0xb0
 8004e0e:	009b      	lsls	r3, r3, #2
 8004e10:	4413      	add	r3, r2
 8004e12:	685b      	ldr	r3, [r3, #4]
 8004e14:	685b      	ldr	r3, [r3, #4]
 8004e16:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	32b0      	adds	r2, #176	@ 0xb0
 8004e22:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004e26:	4618      	mov	r0, r3
 8004e28:	f002 faee 	bl	8007408 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	32b0      	adds	r2, #176	@ 0xb0
 8004e36:	2100      	movs	r1, #0
 8004e38:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	2200      	movs	r2, #0
 8004e40:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8004e44:	2300      	movs	r3, #0
}
 8004e46:	4618      	mov	r0, r3
 8004e48:	3708      	adds	r7, #8
 8004e4a:	46bd      	mov	sp, r7
 8004e4c:	bd80      	pop	{r7, pc}
 8004e4e:	bf00      	nop
 8004e50:	20000093 	.word	0x20000093
 8004e54:	20000094 	.word	0x20000094
 8004e58:	20000095 	.word	0x20000095

08004e5c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8004e5c:	b580      	push	{r7, lr}
 8004e5e:	b086      	sub	sp, #24
 8004e60:	af00      	add	r7, sp, #0
 8004e62:	6078      	str	r0, [r7, #4]
 8004e64:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	32b0      	adds	r2, #176	@ 0xb0
 8004e70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004e74:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8004e76:	2300      	movs	r3, #0
 8004e78:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8004e7a:	2300      	movs	r3, #0
 8004e7c:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8004e7e:	2300      	movs	r3, #0
 8004e80:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8004e82:	693b      	ldr	r3, [r7, #16]
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d101      	bne.n	8004e8c <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8004e88:	2303      	movs	r3, #3
 8004e8a:	e0bf      	b.n	800500c <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004e8c:	683b      	ldr	r3, [r7, #0]
 8004e8e:	781b      	ldrb	r3, [r3, #0]
 8004e90:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d050      	beq.n	8004f3a <USBD_CDC_Setup+0xde>
 8004e98:	2b20      	cmp	r3, #32
 8004e9a:	f040 80af 	bne.w	8004ffc <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8004e9e:	683b      	ldr	r3, [r7, #0]
 8004ea0:	88db      	ldrh	r3, [r3, #6]
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d03a      	beq.n	8004f1c <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8004ea6:	683b      	ldr	r3, [r7, #0]
 8004ea8:	781b      	ldrb	r3, [r3, #0]
 8004eaa:	b25b      	sxtb	r3, r3
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	da1b      	bge.n	8004ee8 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8004eb6:	687a      	ldr	r2, [r7, #4]
 8004eb8:	33b0      	adds	r3, #176	@ 0xb0
 8004eba:	009b      	lsls	r3, r3, #2
 8004ebc:	4413      	add	r3, r2
 8004ebe:	685b      	ldr	r3, [r3, #4]
 8004ec0:	689b      	ldr	r3, [r3, #8]
 8004ec2:	683a      	ldr	r2, [r7, #0]
 8004ec4:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8004ec6:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8004ec8:	683a      	ldr	r2, [r7, #0]
 8004eca:	88d2      	ldrh	r2, [r2, #6]
 8004ecc:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8004ece:	683b      	ldr	r3, [r7, #0]
 8004ed0:	88db      	ldrh	r3, [r3, #6]
 8004ed2:	2b07      	cmp	r3, #7
 8004ed4:	bf28      	it	cs
 8004ed6:	2307      	movcs	r3, #7
 8004ed8:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8004eda:	693b      	ldr	r3, [r7, #16]
 8004edc:	89fa      	ldrh	r2, [r7, #14]
 8004ede:	4619      	mov	r1, r3
 8004ee0:	6878      	ldr	r0, [r7, #4]
 8004ee2:	f001 fd53 	bl	800698c <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8004ee6:	e090      	b.n	800500a <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8004ee8:	683b      	ldr	r3, [r7, #0]
 8004eea:	785a      	ldrb	r2, [r3, #1]
 8004eec:	693b      	ldr	r3, [r7, #16]
 8004eee:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8004ef2:	683b      	ldr	r3, [r7, #0]
 8004ef4:	88db      	ldrh	r3, [r3, #6]
 8004ef6:	2b3f      	cmp	r3, #63	@ 0x3f
 8004ef8:	d803      	bhi.n	8004f02 <USBD_CDC_Setup+0xa6>
 8004efa:	683b      	ldr	r3, [r7, #0]
 8004efc:	88db      	ldrh	r3, [r3, #6]
 8004efe:	b2da      	uxtb	r2, r3
 8004f00:	e000      	b.n	8004f04 <USBD_CDC_Setup+0xa8>
 8004f02:	2240      	movs	r2, #64	@ 0x40
 8004f04:	693b      	ldr	r3, [r7, #16]
 8004f06:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8004f0a:	6939      	ldr	r1, [r7, #16]
 8004f0c:	693b      	ldr	r3, [r7, #16]
 8004f0e:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 8004f12:	461a      	mov	r2, r3
 8004f14:	6878      	ldr	r0, [r7, #4]
 8004f16:	f001 fd65 	bl	80069e4 <USBD_CtlPrepareRx>
      break;
 8004f1a:	e076      	b.n	800500a <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8004f22:	687a      	ldr	r2, [r7, #4]
 8004f24:	33b0      	adds	r3, #176	@ 0xb0
 8004f26:	009b      	lsls	r3, r3, #2
 8004f28:	4413      	add	r3, r2
 8004f2a:	685b      	ldr	r3, [r3, #4]
 8004f2c:	689b      	ldr	r3, [r3, #8]
 8004f2e:	683a      	ldr	r2, [r7, #0]
 8004f30:	7850      	ldrb	r0, [r2, #1]
 8004f32:	2200      	movs	r2, #0
 8004f34:	6839      	ldr	r1, [r7, #0]
 8004f36:	4798      	blx	r3
      break;
 8004f38:	e067      	b.n	800500a <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8004f3a:	683b      	ldr	r3, [r7, #0]
 8004f3c:	785b      	ldrb	r3, [r3, #1]
 8004f3e:	2b0b      	cmp	r3, #11
 8004f40:	d851      	bhi.n	8004fe6 <USBD_CDC_Setup+0x18a>
 8004f42:	a201      	add	r2, pc, #4	@ (adr r2, 8004f48 <USBD_CDC_Setup+0xec>)
 8004f44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f48:	08004f79 	.word	0x08004f79
 8004f4c:	08004ff5 	.word	0x08004ff5
 8004f50:	08004fe7 	.word	0x08004fe7
 8004f54:	08004fe7 	.word	0x08004fe7
 8004f58:	08004fe7 	.word	0x08004fe7
 8004f5c:	08004fe7 	.word	0x08004fe7
 8004f60:	08004fe7 	.word	0x08004fe7
 8004f64:	08004fe7 	.word	0x08004fe7
 8004f68:	08004fe7 	.word	0x08004fe7
 8004f6c:	08004fe7 	.word	0x08004fe7
 8004f70:	08004fa3 	.word	0x08004fa3
 8004f74:	08004fcd 	.word	0x08004fcd
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8004f7e:	b2db      	uxtb	r3, r3
 8004f80:	2b03      	cmp	r3, #3
 8004f82:	d107      	bne.n	8004f94 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8004f84:	f107 030a 	add.w	r3, r7, #10
 8004f88:	2202      	movs	r2, #2
 8004f8a:	4619      	mov	r1, r3
 8004f8c:	6878      	ldr	r0, [r7, #4]
 8004f8e:	f001 fcfd 	bl	800698c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8004f92:	e032      	b.n	8004ffa <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8004f94:	6839      	ldr	r1, [r7, #0]
 8004f96:	6878      	ldr	r0, [r7, #4]
 8004f98:	f001 fc7b 	bl	8006892 <USBD_CtlError>
            ret = USBD_FAIL;
 8004f9c:	2303      	movs	r3, #3
 8004f9e:	75fb      	strb	r3, [r7, #23]
          break;
 8004fa0:	e02b      	b.n	8004ffa <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8004fa8:	b2db      	uxtb	r3, r3
 8004faa:	2b03      	cmp	r3, #3
 8004fac:	d107      	bne.n	8004fbe <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8004fae:	f107 030d 	add.w	r3, r7, #13
 8004fb2:	2201      	movs	r2, #1
 8004fb4:	4619      	mov	r1, r3
 8004fb6:	6878      	ldr	r0, [r7, #4]
 8004fb8:	f001 fce8 	bl	800698c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8004fbc:	e01d      	b.n	8004ffa <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8004fbe:	6839      	ldr	r1, [r7, #0]
 8004fc0:	6878      	ldr	r0, [r7, #4]
 8004fc2:	f001 fc66 	bl	8006892 <USBD_CtlError>
            ret = USBD_FAIL;
 8004fc6:	2303      	movs	r3, #3
 8004fc8:	75fb      	strb	r3, [r7, #23]
          break;
 8004fca:	e016      	b.n	8004ffa <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8004fd2:	b2db      	uxtb	r3, r3
 8004fd4:	2b03      	cmp	r3, #3
 8004fd6:	d00f      	beq.n	8004ff8 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8004fd8:	6839      	ldr	r1, [r7, #0]
 8004fda:	6878      	ldr	r0, [r7, #4]
 8004fdc:	f001 fc59 	bl	8006892 <USBD_CtlError>
            ret = USBD_FAIL;
 8004fe0:	2303      	movs	r3, #3
 8004fe2:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8004fe4:	e008      	b.n	8004ff8 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8004fe6:	6839      	ldr	r1, [r7, #0]
 8004fe8:	6878      	ldr	r0, [r7, #4]
 8004fea:	f001 fc52 	bl	8006892 <USBD_CtlError>
          ret = USBD_FAIL;
 8004fee:	2303      	movs	r3, #3
 8004ff0:	75fb      	strb	r3, [r7, #23]
          break;
 8004ff2:	e002      	b.n	8004ffa <USBD_CDC_Setup+0x19e>
          break;
 8004ff4:	bf00      	nop
 8004ff6:	e008      	b.n	800500a <USBD_CDC_Setup+0x1ae>
          break;
 8004ff8:	bf00      	nop
      }
      break;
 8004ffa:	e006      	b.n	800500a <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8004ffc:	6839      	ldr	r1, [r7, #0]
 8004ffe:	6878      	ldr	r0, [r7, #4]
 8005000:	f001 fc47 	bl	8006892 <USBD_CtlError>
      ret = USBD_FAIL;
 8005004:	2303      	movs	r3, #3
 8005006:	75fb      	strb	r3, [r7, #23]
      break;
 8005008:	bf00      	nop
  }

  return (uint8_t)ret;
 800500a:	7dfb      	ldrb	r3, [r7, #23]
}
 800500c:	4618      	mov	r0, r3
 800500e:	3718      	adds	r7, #24
 8005010:	46bd      	mov	sp, r7
 8005012:	bd80      	pop	{r7, pc}

08005014 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005014:	b580      	push	{r7, lr}
 8005016:	b084      	sub	sp, #16
 8005018:	af00      	add	r7, sp, #0
 800501a:	6078      	str	r0, [r7, #4]
 800501c:	460b      	mov	r3, r1
 800501e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8005026:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	32b0      	adds	r2, #176	@ 0xb0
 8005032:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005036:	2b00      	cmp	r3, #0
 8005038:	d101      	bne.n	800503e <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800503a:	2303      	movs	r3, #3
 800503c:	e065      	b.n	800510a <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	32b0      	adds	r2, #176	@ 0xb0
 8005048:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800504c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800504e:	78fb      	ldrb	r3, [r7, #3]
 8005050:	f003 020f 	and.w	r2, r3, #15
 8005054:	6879      	ldr	r1, [r7, #4]
 8005056:	4613      	mov	r3, r2
 8005058:	009b      	lsls	r3, r3, #2
 800505a:	4413      	add	r3, r2
 800505c:	009b      	lsls	r3, r3, #2
 800505e:	440b      	add	r3, r1
 8005060:	3318      	adds	r3, #24
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	2b00      	cmp	r3, #0
 8005066:	d02f      	beq.n	80050c8 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8005068:	78fb      	ldrb	r3, [r7, #3]
 800506a:	f003 020f 	and.w	r2, r3, #15
 800506e:	6879      	ldr	r1, [r7, #4]
 8005070:	4613      	mov	r3, r2
 8005072:	009b      	lsls	r3, r3, #2
 8005074:	4413      	add	r3, r2
 8005076:	009b      	lsls	r3, r3, #2
 8005078:	440b      	add	r3, r1
 800507a:	3318      	adds	r3, #24
 800507c:	681a      	ldr	r2, [r3, #0]
 800507e:	78fb      	ldrb	r3, [r7, #3]
 8005080:	f003 010f 	and.w	r1, r3, #15
 8005084:	68f8      	ldr	r0, [r7, #12]
 8005086:	460b      	mov	r3, r1
 8005088:	00db      	lsls	r3, r3, #3
 800508a:	440b      	add	r3, r1
 800508c:	009b      	lsls	r3, r3, #2
 800508e:	4403      	add	r3, r0
 8005090:	331c      	adds	r3, #28
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	fbb2 f1f3 	udiv	r1, r2, r3
 8005098:	fb01 f303 	mul.w	r3, r1, r3
 800509c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d112      	bne.n	80050c8 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 80050a2:	78fb      	ldrb	r3, [r7, #3]
 80050a4:	f003 020f 	and.w	r2, r3, #15
 80050a8:	6879      	ldr	r1, [r7, #4]
 80050aa:	4613      	mov	r3, r2
 80050ac:	009b      	lsls	r3, r3, #2
 80050ae:	4413      	add	r3, r2
 80050b0:	009b      	lsls	r3, r3, #2
 80050b2:	440b      	add	r3, r1
 80050b4:	3318      	adds	r3, #24
 80050b6:	2200      	movs	r2, #0
 80050b8:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80050ba:	78f9      	ldrb	r1, [r7, #3]
 80050bc:	2300      	movs	r3, #0
 80050be:	2200      	movs	r2, #0
 80050c0:	6878      	ldr	r0, [r7, #4]
 80050c2:	f002 f93e 	bl	8007342 <USBD_LL_Transmit>
 80050c6:	e01f      	b.n	8005108 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 80050c8:	68bb      	ldr	r3, [r7, #8]
 80050ca:	2200      	movs	r2, #0
 80050cc:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80050d6:	687a      	ldr	r2, [r7, #4]
 80050d8:	33b0      	adds	r3, #176	@ 0xb0
 80050da:	009b      	lsls	r3, r3, #2
 80050dc:	4413      	add	r3, r2
 80050de:	685b      	ldr	r3, [r3, #4]
 80050e0:	691b      	ldr	r3, [r3, #16]
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d010      	beq.n	8005108 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80050ec:	687a      	ldr	r2, [r7, #4]
 80050ee:	33b0      	adds	r3, #176	@ 0xb0
 80050f0:	009b      	lsls	r3, r3, #2
 80050f2:	4413      	add	r3, r2
 80050f4:	685b      	ldr	r3, [r3, #4]
 80050f6:	691b      	ldr	r3, [r3, #16]
 80050f8:	68ba      	ldr	r2, [r7, #8]
 80050fa:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 80050fe:	68ba      	ldr	r2, [r7, #8]
 8005100:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 8005104:	78fa      	ldrb	r2, [r7, #3]
 8005106:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8005108:	2300      	movs	r3, #0
}
 800510a:	4618      	mov	r0, r3
 800510c:	3710      	adds	r7, #16
 800510e:	46bd      	mov	sp, r7
 8005110:	bd80      	pop	{r7, pc}

08005112 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005112:	b580      	push	{r7, lr}
 8005114:	b084      	sub	sp, #16
 8005116:	af00      	add	r7, sp, #0
 8005118:	6078      	str	r0, [r7, #4]
 800511a:	460b      	mov	r3, r1
 800511c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	32b0      	adds	r2, #176	@ 0xb0
 8005128:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800512c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	32b0      	adds	r2, #176	@ 0xb0
 8005138:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800513c:	2b00      	cmp	r3, #0
 800513e:	d101      	bne.n	8005144 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8005140:	2303      	movs	r3, #3
 8005142:	e01a      	b.n	800517a <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8005144:	78fb      	ldrb	r3, [r7, #3]
 8005146:	4619      	mov	r1, r3
 8005148:	6878      	ldr	r0, [r7, #4]
 800514a:	f002 f93c 	bl	80073c6 <USBD_LL_GetRxDataSize>
 800514e:	4602      	mov	r2, r0
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800515c:	687a      	ldr	r2, [r7, #4]
 800515e:	33b0      	adds	r3, #176	@ 0xb0
 8005160:	009b      	lsls	r3, r3, #2
 8005162:	4413      	add	r3, r2
 8005164:	685b      	ldr	r3, [r3, #4]
 8005166:	68db      	ldr	r3, [r3, #12]
 8005168:	68fa      	ldr	r2, [r7, #12]
 800516a:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800516e:	68fa      	ldr	r2, [r7, #12]
 8005170:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8005174:	4611      	mov	r1, r2
 8005176:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8005178:	2300      	movs	r3, #0
}
 800517a:	4618      	mov	r0, r3
 800517c:	3710      	adds	r7, #16
 800517e:	46bd      	mov	sp, r7
 8005180:	bd80      	pop	{r7, pc}

08005182 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8005182:	b580      	push	{r7, lr}
 8005184:	b084      	sub	sp, #16
 8005186:	af00      	add	r7, sp, #0
 8005188:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	32b0      	adds	r2, #176	@ 0xb0
 8005194:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005198:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	2b00      	cmp	r3, #0
 800519e:	d101      	bne.n	80051a4 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80051a0:	2303      	movs	r3, #3
 80051a2:	e024      	b.n	80051ee <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80051aa:	687a      	ldr	r2, [r7, #4]
 80051ac:	33b0      	adds	r3, #176	@ 0xb0
 80051ae:	009b      	lsls	r3, r3, #2
 80051b0:	4413      	add	r3, r2
 80051b2:	685b      	ldr	r3, [r3, #4]
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d019      	beq.n	80051ec <USBD_CDC_EP0_RxReady+0x6a>
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 80051be:	2bff      	cmp	r3, #255	@ 0xff
 80051c0:	d014      	beq.n	80051ec <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80051c8:	687a      	ldr	r2, [r7, #4]
 80051ca:	33b0      	adds	r3, #176	@ 0xb0
 80051cc:	009b      	lsls	r3, r3, #2
 80051ce:	4413      	add	r3, r2
 80051d0:	685b      	ldr	r3, [r3, #4]
 80051d2:	689b      	ldr	r3, [r3, #8]
 80051d4:	68fa      	ldr	r2, [r7, #12]
 80051d6:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 80051da:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 80051dc:	68fa      	ldr	r2, [r7, #12]
 80051de:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80051e2:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	22ff      	movs	r2, #255	@ 0xff
 80051e8:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 80051ec:	2300      	movs	r3, #0
}
 80051ee:	4618      	mov	r0, r3
 80051f0:	3710      	adds	r7, #16
 80051f2:	46bd      	mov	sp, r7
 80051f4:	bd80      	pop	{r7, pc}
	...

080051f8 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80051f8:	b580      	push	{r7, lr}
 80051fa:	b086      	sub	sp, #24
 80051fc:	af00      	add	r7, sp, #0
 80051fe:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8005200:	2182      	movs	r1, #130	@ 0x82
 8005202:	4818      	ldr	r0, [pc, #96]	@ (8005264 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8005204:	f000 fd0f 	bl	8005c26 <USBD_GetEpDesc>
 8005208:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800520a:	2101      	movs	r1, #1
 800520c:	4815      	ldr	r0, [pc, #84]	@ (8005264 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800520e:	f000 fd0a 	bl	8005c26 <USBD_GetEpDesc>
 8005212:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8005214:	2181      	movs	r1, #129	@ 0x81
 8005216:	4813      	ldr	r0, [pc, #76]	@ (8005264 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8005218:	f000 fd05 	bl	8005c26 <USBD_GetEpDesc>
 800521c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800521e:	697b      	ldr	r3, [r7, #20]
 8005220:	2b00      	cmp	r3, #0
 8005222:	d002      	beq.n	800522a <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8005224:	697b      	ldr	r3, [r7, #20]
 8005226:	2210      	movs	r2, #16
 8005228:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800522a:	693b      	ldr	r3, [r7, #16]
 800522c:	2b00      	cmp	r3, #0
 800522e:	d006      	beq.n	800523e <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005230:	693b      	ldr	r3, [r7, #16]
 8005232:	2200      	movs	r2, #0
 8005234:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005238:	711a      	strb	r2, [r3, #4]
 800523a:	2200      	movs	r2, #0
 800523c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	2b00      	cmp	r3, #0
 8005242:	d006      	beq.n	8005252 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	2200      	movs	r2, #0
 8005248:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800524c:	711a      	strb	r2, [r3, #4]
 800524e:	2200      	movs	r2, #0
 8005250:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	2243      	movs	r2, #67	@ 0x43
 8005256:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8005258:	4b02      	ldr	r3, [pc, #8]	@ (8005264 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800525a:	4618      	mov	r0, r3
 800525c:	3718      	adds	r7, #24
 800525e:	46bd      	mov	sp, r7
 8005260:	bd80      	pop	{r7, pc}
 8005262:	bf00      	nop
 8005264:	20000050 	.word	0x20000050

08005268 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8005268:	b580      	push	{r7, lr}
 800526a:	b086      	sub	sp, #24
 800526c:	af00      	add	r7, sp, #0
 800526e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8005270:	2182      	movs	r1, #130	@ 0x82
 8005272:	4818      	ldr	r0, [pc, #96]	@ (80052d4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8005274:	f000 fcd7 	bl	8005c26 <USBD_GetEpDesc>
 8005278:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800527a:	2101      	movs	r1, #1
 800527c:	4815      	ldr	r0, [pc, #84]	@ (80052d4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800527e:	f000 fcd2 	bl	8005c26 <USBD_GetEpDesc>
 8005282:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8005284:	2181      	movs	r1, #129	@ 0x81
 8005286:	4813      	ldr	r0, [pc, #76]	@ (80052d4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8005288:	f000 fccd 	bl	8005c26 <USBD_GetEpDesc>
 800528c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800528e:	697b      	ldr	r3, [r7, #20]
 8005290:	2b00      	cmp	r3, #0
 8005292:	d002      	beq.n	800529a <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8005294:	697b      	ldr	r3, [r7, #20]
 8005296:	2210      	movs	r2, #16
 8005298:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800529a:	693b      	ldr	r3, [r7, #16]
 800529c:	2b00      	cmp	r3, #0
 800529e:	d006      	beq.n	80052ae <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80052a0:	693b      	ldr	r3, [r7, #16]
 80052a2:	2200      	movs	r2, #0
 80052a4:	711a      	strb	r2, [r3, #4]
 80052a6:	2200      	movs	r2, #0
 80052a8:	f042 0202 	orr.w	r2, r2, #2
 80052ac:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d006      	beq.n	80052c2 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	2200      	movs	r2, #0
 80052b8:	711a      	strb	r2, [r3, #4]
 80052ba:	2200      	movs	r2, #0
 80052bc:	f042 0202 	orr.w	r2, r2, #2
 80052c0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	2243      	movs	r2, #67	@ 0x43
 80052c6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80052c8:	4b02      	ldr	r3, [pc, #8]	@ (80052d4 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 80052ca:	4618      	mov	r0, r3
 80052cc:	3718      	adds	r7, #24
 80052ce:	46bd      	mov	sp, r7
 80052d0:	bd80      	pop	{r7, pc}
 80052d2:	bf00      	nop
 80052d4:	20000050 	.word	0x20000050

080052d8 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80052d8:	b580      	push	{r7, lr}
 80052da:	b086      	sub	sp, #24
 80052dc:	af00      	add	r7, sp, #0
 80052de:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80052e0:	2182      	movs	r1, #130	@ 0x82
 80052e2:	4818      	ldr	r0, [pc, #96]	@ (8005344 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80052e4:	f000 fc9f 	bl	8005c26 <USBD_GetEpDesc>
 80052e8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80052ea:	2101      	movs	r1, #1
 80052ec:	4815      	ldr	r0, [pc, #84]	@ (8005344 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80052ee:	f000 fc9a 	bl	8005c26 <USBD_GetEpDesc>
 80052f2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80052f4:	2181      	movs	r1, #129	@ 0x81
 80052f6:	4813      	ldr	r0, [pc, #76]	@ (8005344 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80052f8:	f000 fc95 	bl	8005c26 <USBD_GetEpDesc>
 80052fc:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80052fe:	697b      	ldr	r3, [r7, #20]
 8005300:	2b00      	cmp	r3, #0
 8005302:	d002      	beq.n	800530a <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8005304:	697b      	ldr	r3, [r7, #20]
 8005306:	2210      	movs	r2, #16
 8005308:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800530a:	693b      	ldr	r3, [r7, #16]
 800530c:	2b00      	cmp	r3, #0
 800530e:	d006      	beq.n	800531e <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005310:	693b      	ldr	r3, [r7, #16]
 8005312:	2200      	movs	r2, #0
 8005314:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005318:	711a      	strb	r2, [r3, #4]
 800531a:	2200      	movs	r2, #0
 800531c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	2b00      	cmp	r3, #0
 8005322:	d006      	beq.n	8005332 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	2200      	movs	r2, #0
 8005328:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800532c:	711a      	strb	r2, [r3, #4]
 800532e:	2200      	movs	r2, #0
 8005330:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	2243      	movs	r2, #67	@ 0x43
 8005336:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8005338:	4b02      	ldr	r3, [pc, #8]	@ (8005344 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800533a:	4618      	mov	r0, r3
 800533c:	3718      	adds	r7, #24
 800533e:	46bd      	mov	sp, r7
 8005340:	bd80      	pop	{r7, pc}
 8005342:	bf00      	nop
 8005344:	20000050 	.word	0x20000050

08005348 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8005348:	b480      	push	{r7}
 800534a:	b083      	sub	sp, #12
 800534c:	af00      	add	r7, sp, #0
 800534e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	220a      	movs	r2, #10
 8005354:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8005356:	4b03      	ldr	r3, [pc, #12]	@ (8005364 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8005358:	4618      	mov	r0, r3
 800535a:	370c      	adds	r7, #12
 800535c:	46bd      	mov	sp, r7
 800535e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005362:	4770      	bx	lr
 8005364:	2000000c 	.word	0x2000000c

08005368 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8005368:	b480      	push	{r7}
 800536a:	b083      	sub	sp, #12
 800536c:	af00      	add	r7, sp, #0
 800536e:	6078      	str	r0, [r7, #4]
 8005370:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8005372:	683b      	ldr	r3, [r7, #0]
 8005374:	2b00      	cmp	r3, #0
 8005376:	d101      	bne.n	800537c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8005378:	2303      	movs	r3, #3
 800537a:	e009      	b.n	8005390 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005382:	687a      	ldr	r2, [r7, #4]
 8005384:	33b0      	adds	r3, #176	@ 0xb0
 8005386:	009b      	lsls	r3, r3, #2
 8005388:	4413      	add	r3, r2
 800538a:	683a      	ldr	r2, [r7, #0]
 800538c:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800538e:	2300      	movs	r3, #0
}
 8005390:	4618      	mov	r0, r3
 8005392:	370c      	adds	r7, #12
 8005394:	46bd      	mov	sp, r7
 8005396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800539a:	4770      	bx	lr

0800539c <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800539c:	b480      	push	{r7}
 800539e:	b087      	sub	sp, #28
 80053a0:	af00      	add	r7, sp, #0
 80053a2:	60f8      	str	r0, [r7, #12]
 80053a4:	60b9      	str	r1, [r7, #8]
 80053a6:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	32b0      	adds	r2, #176	@ 0xb0
 80053b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80053b6:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 80053b8:	697b      	ldr	r3, [r7, #20]
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d101      	bne.n	80053c2 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 80053be:	2303      	movs	r3, #3
 80053c0:	e008      	b.n	80053d4 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 80053c2:	697b      	ldr	r3, [r7, #20]
 80053c4:	68ba      	ldr	r2, [r7, #8]
 80053c6:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 80053ca:	697b      	ldr	r3, [r7, #20]
 80053cc:	687a      	ldr	r2, [r7, #4]
 80053ce:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 80053d2:	2300      	movs	r3, #0
}
 80053d4:	4618      	mov	r0, r3
 80053d6:	371c      	adds	r7, #28
 80053d8:	46bd      	mov	sp, r7
 80053da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053de:	4770      	bx	lr

080053e0 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80053e0:	b480      	push	{r7}
 80053e2:	b085      	sub	sp, #20
 80053e4:	af00      	add	r7, sp, #0
 80053e6:	6078      	str	r0, [r7, #4]
 80053e8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	32b0      	adds	r2, #176	@ 0xb0
 80053f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80053f8:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d101      	bne.n	8005404 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8005400:	2303      	movs	r3, #3
 8005402:	e004      	b.n	800540e <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	683a      	ldr	r2, [r7, #0]
 8005408:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 800540c:	2300      	movs	r3, #0
}
 800540e:	4618      	mov	r0, r3
 8005410:	3714      	adds	r7, #20
 8005412:	46bd      	mov	sp, r7
 8005414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005418:	4770      	bx	lr
	...

0800541c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800541c:	b580      	push	{r7, lr}
 800541e:	b084      	sub	sp, #16
 8005420:	af00      	add	r7, sp, #0
 8005422:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	32b0      	adds	r2, #176	@ 0xb0
 800542e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005432:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	32b0      	adds	r2, #176	@ 0xb0
 800543e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005442:	2b00      	cmp	r3, #0
 8005444:	d101      	bne.n	800544a <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8005446:	2303      	movs	r3, #3
 8005448:	e018      	b.n	800547c <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	7c1b      	ldrb	r3, [r3, #16]
 800544e:	2b00      	cmp	r3, #0
 8005450:	d10a      	bne.n	8005468 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005452:	4b0c      	ldr	r3, [pc, #48]	@ (8005484 <USBD_CDC_ReceivePacket+0x68>)
 8005454:	7819      	ldrb	r1, [r3, #0]
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800545c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005460:	6878      	ldr	r0, [r7, #4]
 8005462:	f001 ff8f 	bl	8007384 <USBD_LL_PrepareReceive>
 8005466:	e008      	b.n	800547a <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005468:	4b06      	ldr	r3, [pc, #24]	@ (8005484 <USBD_CDC_ReceivePacket+0x68>)
 800546a:	7819      	ldrb	r1, [r3, #0]
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8005472:	2340      	movs	r3, #64	@ 0x40
 8005474:	6878      	ldr	r0, [r7, #4]
 8005476:	f001 ff85 	bl	8007384 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800547a:	2300      	movs	r3, #0
}
 800547c:	4618      	mov	r0, r3
 800547e:	3710      	adds	r7, #16
 8005480:	46bd      	mov	sp, r7
 8005482:	bd80      	pop	{r7, pc}
 8005484:	20000094 	.word	0x20000094

08005488 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8005488:	b580      	push	{r7, lr}
 800548a:	b086      	sub	sp, #24
 800548c:	af00      	add	r7, sp, #0
 800548e:	60f8      	str	r0, [r7, #12]
 8005490:	60b9      	str	r1, [r7, #8]
 8005492:	4613      	mov	r3, r2
 8005494:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	2b00      	cmp	r3, #0
 800549a:	d101      	bne.n	80054a0 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800549c:	2303      	movs	r3, #3
 800549e:	e01f      	b.n	80054e0 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	2200      	movs	r2, #0
 80054a4:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	2200      	movs	r2, #0
 80054ac:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	2200      	movs	r2, #0
 80054b4:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80054b8:	68bb      	ldr	r3, [r7, #8]
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d003      	beq.n	80054c6 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	68ba      	ldr	r2, [r7, #8]
 80054c2:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	2201      	movs	r2, #1
 80054ca:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	79fa      	ldrb	r2, [r7, #7]
 80054d2:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80054d4:	68f8      	ldr	r0, [r7, #12]
 80054d6:	f001 fdff 	bl	80070d8 <USBD_LL_Init>
 80054da:	4603      	mov	r3, r0
 80054dc:	75fb      	strb	r3, [r7, #23]

  return ret;
 80054de:	7dfb      	ldrb	r3, [r7, #23]
}
 80054e0:	4618      	mov	r0, r3
 80054e2:	3718      	adds	r7, #24
 80054e4:	46bd      	mov	sp, r7
 80054e6:	bd80      	pop	{r7, pc}

080054e8 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80054e8:	b580      	push	{r7, lr}
 80054ea:	b084      	sub	sp, #16
 80054ec:	af00      	add	r7, sp, #0
 80054ee:	6078      	str	r0, [r7, #4]
 80054f0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80054f2:	2300      	movs	r3, #0
 80054f4:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80054f6:	683b      	ldr	r3, [r7, #0]
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d101      	bne.n	8005500 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80054fc:	2303      	movs	r3, #3
 80054fe:	e025      	b.n	800554c <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	683a      	ldr	r2, [r7, #0]
 8005504:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	32ae      	adds	r2, #174	@ 0xae
 8005512:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005516:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005518:	2b00      	cmp	r3, #0
 800551a:	d00f      	beq.n	800553c <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	32ae      	adds	r2, #174	@ 0xae
 8005526:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800552a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800552c:	f107 020e 	add.w	r2, r7, #14
 8005530:	4610      	mov	r0, r2
 8005532:	4798      	blx	r3
 8005534:	4602      	mov	r2, r0
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8005542:	1c5a      	adds	r2, r3, #1
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 800554a:	2300      	movs	r3, #0
}
 800554c:	4618      	mov	r0, r3
 800554e:	3710      	adds	r7, #16
 8005550:	46bd      	mov	sp, r7
 8005552:	bd80      	pop	{r7, pc}

08005554 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8005554:	b580      	push	{r7, lr}
 8005556:	b082      	sub	sp, #8
 8005558:	af00      	add	r7, sp, #0
 800555a:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800555c:	6878      	ldr	r0, [r7, #4]
 800555e:	f001 fe07 	bl	8007170 <USBD_LL_Start>
 8005562:	4603      	mov	r3, r0
}
 8005564:	4618      	mov	r0, r3
 8005566:	3708      	adds	r7, #8
 8005568:	46bd      	mov	sp, r7
 800556a:	bd80      	pop	{r7, pc}

0800556c <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800556c:	b480      	push	{r7}
 800556e:	b083      	sub	sp, #12
 8005570:	af00      	add	r7, sp, #0
 8005572:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005574:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8005576:	4618      	mov	r0, r3
 8005578:	370c      	adds	r7, #12
 800557a:	46bd      	mov	sp, r7
 800557c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005580:	4770      	bx	lr

08005582 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005582:	b580      	push	{r7, lr}
 8005584:	b084      	sub	sp, #16
 8005586:	af00      	add	r7, sp, #0
 8005588:	6078      	str	r0, [r7, #4]
 800558a:	460b      	mov	r3, r1
 800558c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800558e:	2300      	movs	r3, #0
 8005590:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005598:	2b00      	cmp	r3, #0
 800559a:	d009      	beq.n	80055b0 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	78fa      	ldrb	r2, [r7, #3]
 80055a6:	4611      	mov	r1, r2
 80055a8:	6878      	ldr	r0, [r7, #4]
 80055aa:	4798      	blx	r3
 80055ac:	4603      	mov	r3, r0
 80055ae:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80055b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80055b2:	4618      	mov	r0, r3
 80055b4:	3710      	adds	r7, #16
 80055b6:	46bd      	mov	sp, r7
 80055b8:	bd80      	pop	{r7, pc}

080055ba <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80055ba:	b580      	push	{r7, lr}
 80055bc:	b084      	sub	sp, #16
 80055be:	af00      	add	r7, sp, #0
 80055c0:	6078      	str	r0, [r7, #4]
 80055c2:	460b      	mov	r3, r1
 80055c4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80055c6:	2300      	movs	r3, #0
 80055c8:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80055d0:	685b      	ldr	r3, [r3, #4]
 80055d2:	78fa      	ldrb	r2, [r7, #3]
 80055d4:	4611      	mov	r1, r2
 80055d6:	6878      	ldr	r0, [r7, #4]
 80055d8:	4798      	blx	r3
 80055da:	4603      	mov	r3, r0
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d001      	beq.n	80055e4 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 80055e0:	2303      	movs	r3, #3
 80055e2:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80055e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80055e6:	4618      	mov	r0, r3
 80055e8:	3710      	adds	r7, #16
 80055ea:	46bd      	mov	sp, r7
 80055ec:	bd80      	pop	{r7, pc}

080055ee <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80055ee:	b580      	push	{r7, lr}
 80055f0:	b084      	sub	sp, #16
 80055f2:	af00      	add	r7, sp, #0
 80055f4:	6078      	str	r0, [r7, #4]
 80055f6:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80055fe:	6839      	ldr	r1, [r7, #0]
 8005600:	4618      	mov	r0, r3
 8005602:	f001 f90c 	bl	800681e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	2201      	movs	r2, #1
 800560a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8005614:	461a      	mov	r2, r3
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8005622:	f003 031f 	and.w	r3, r3, #31
 8005626:	2b02      	cmp	r3, #2
 8005628:	d01a      	beq.n	8005660 <USBD_LL_SetupStage+0x72>
 800562a:	2b02      	cmp	r3, #2
 800562c:	d822      	bhi.n	8005674 <USBD_LL_SetupStage+0x86>
 800562e:	2b00      	cmp	r3, #0
 8005630:	d002      	beq.n	8005638 <USBD_LL_SetupStage+0x4a>
 8005632:	2b01      	cmp	r3, #1
 8005634:	d00a      	beq.n	800564c <USBD_LL_SetupStage+0x5e>
 8005636:	e01d      	b.n	8005674 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800563e:	4619      	mov	r1, r3
 8005640:	6878      	ldr	r0, [r7, #4]
 8005642:	f000 fb63 	bl	8005d0c <USBD_StdDevReq>
 8005646:	4603      	mov	r3, r0
 8005648:	73fb      	strb	r3, [r7, #15]
      break;
 800564a:	e020      	b.n	800568e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8005652:	4619      	mov	r1, r3
 8005654:	6878      	ldr	r0, [r7, #4]
 8005656:	f000 fbcb 	bl	8005df0 <USBD_StdItfReq>
 800565a:	4603      	mov	r3, r0
 800565c:	73fb      	strb	r3, [r7, #15]
      break;
 800565e:	e016      	b.n	800568e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8005666:	4619      	mov	r1, r3
 8005668:	6878      	ldr	r0, [r7, #4]
 800566a:	f000 fc2d 	bl	8005ec8 <USBD_StdEPReq>
 800566e:	4603      	mov	r3, r0
 8005670:	73fb      	strb	r3, [r7, #15]
      break;
 8005672:	e00c      	b.n	800568e <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800567a:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800567e:	b2db      	uxtb	r3, r3
 8005680:	4619      	mov	r1, r3
 8005682:	6878      	ldr	r0, [r7, #4]
 8005684:	f001 fdd4 	bl	8007230 <USBD_LL_StallEP>
 8005688:	4603      	mov	r3, r0
 800568a:	73fb      	strb	r3, [r7, #15]
      break;
 800568c:	bf00      	nop
  }

  return ret;
 800568e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005690:	4618      	mov	r0, r3
 8005692:	3710      	adds	r7, #16
 8005694:	46bd      	mov	sp, r7
 8005696:	bd80      	pop	{r7, pc}

08005698 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8005698:	b580      	push	{r7, lr}
 800569a:	b086      	sub	sp, #24
 800569c:	af00      	add	r7, sp, #0
 800569e:	60f8      	str	r0, [r7, #12]
 80056a0:	460b      	mov	r3, r1
 80056a2:	607a      	str	r2, [r7, #4]
 80056a4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 80056a6:	2300      	movs	r3, #0
 80056a8:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 80056aa:	7afb      	ldrb	r3, [r7, #11]
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d16e      	bne.n	800578e <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 80056b6:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80056be:	2b03      	cmp	r3, #3
 80056c0:	f040 8098 	bne.w	80057f4 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 80056c4:	693b      	ldr	r3, [r7, #16]
 80056c6:	689a      	ldr	r2, [r3, #8]
 80056c8:	693b      	ldr	r3, [r7, #16]
 80056ca:	68db      	ldr	r3, [r3, #12]
 80056cc:	429a      	cmp	r2, r3
 80056ce:	d913      	bls.n	80056f8 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 80056d0:	693b      	ldr	r3, [r7, #16]
 80056d2:	689a      	ldr	r2, [r3, #8]
 80056d4:	693b      	ldr	r3, [r7, #16]
 80056d6:	68db      	ldr	r3, [r3, #12]
 80056d8:	1ad2      	subs	r2, r2, r3
 80056da:	693b      	ldr	r3, [r7, #16]
 80056dc:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80056de:	693b      	ldr	r3, [r7, #16]
 80056e0:	68da      	ldr	r2, [r3, #12]
 80056e2:	693b      	ldr	r3, [r7, #16]
 80056e4:	689b      	ldr	r3, [r3, #8]
 80056e6:	4293      	cmp	r3, r2
 80056e8:	bf28      	it	cs
 80056ea:	4613      	movcs	r3, r2
 80056ec:	461a      	mov	r2, r3
 80056ee:	6879      	ldr	r1, [r7, #4]
 80056f0:	68f8      	ldr	r0, [r7, #12]
 80056f2:	f001 f994 	bl	8006a1e <USBD_CtlContinueRx>
 80056f6:	e07d      	b.n	80057f4 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80056fe:	f003 031f 	and.w	r3, r3, #31
 8005702:	2b02      	cmp	r3, #2
 8005704:	d014      	beq.n	8005730 <USBD_LL_DataOutStage+0x98>
 8005706:	2b02      	cmp	r3, #2
 8005708:	d81d      	bhi.n	8005746 <USBD_LL_DataOutStage+0xae>
 800570a:	2b00      	cmp	r3, #0
 800570c:	d002      	beq.n	8005714 <USBD_LL_DataOutStage+0x7c>
 800570e:	2b01      	cmp	r3, #1
 8005710:	d003      	beq.n	800571a <USBD_LL_DataOutStage+0x82>
 8005712:	e018      	b.n	8005746 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8005714:	2300      	movs	r3, #0
 8005716:	75bb      	strb	r3, [r7, #22]
            break;
 8005718:	e018      	b.n	800574c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8005720:	b2db      	uxtb	r3, r3
 8005722:	4619      	mov	r1, r3
 8005724:	68f8      	ldr	r0, [r7, #12]
 8005726:	f000 fa64 	bl	8005bf2 <USBD_CoreFindIF>
 800572a:	4603      	mov	r3, r0
 800572c:	75bb      	strb	r3, [r7, #22]
            break;
 800572e:	e00d      	b.n	800574c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8005736:	b2db      	uxtb	r3, r3
 8005738:	4619      	mov	r1, r3
 800573a:	68f8      	ldr	r0, [r7, #12]
 800573c:	f000 fa66 	bl	8005c0c <USBD_CoreFindEP>
 8005740:	4603      	mov	r3, r0
 8005742:	75bb      	strb	r3, [r7, #22]
            break;
 8005744:	e002      	b.n	800574c <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8005746:	2300      	movs	r3, #0
 8005748:	75bb      	strb	r3, [r7, #22]
            break;
 800574a:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800574c:	7dbb      	ldrb	r3, [r7, #22]
 800574e:	2b00      	cmp	r3, #0
 8005750:	d119      	bne.n	8005786 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005758:	b2db      	uxtb	r3, r3
 800575a:	2b03      	cmp	r3, #3
 800575c:	d113      	bne.n	8005786 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800575e:	7dba      	ldrb	r2, [r7, #22]
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	32ae      	adds	r2, #174	@ 0xae
 8005764:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005768:	691b      	ldr	r3, [r3, #16]
 800576a:	2b00      	cmp	r3, #0
 800576c:	d00b      	beq.n	8005786 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800576e:	7dba      	ldrb	r2, [r7, #22]
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8005776:	7dba      	ldrb	r2, [r7, #22]
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	32ae      	adds	r2, #174	@ 0xae
 800577c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005780:	691b      	ldr	r3, [r3, #16]
 8005782:	68f8      	ldr	r0, [r7, #12]
 8005784:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8005786:	68f8      	ldr	r0, [r7, #12]
 8005788:	f001 f95a 	bl	8006a40 <USBD_CtlSendStatus>
 800578c:	e032      	b.n	80057f4 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800578e:	7afb      	ldrb	r3, [r7, #11]
 8005790:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005794:	b2db      	uxtb	r3, r3
 8005796:	4619      	mov	r1, r3
 8005798:	68f8      	ldr	r0, [r7, #12]
 800579a:	f000 fa37 	bl	8005c0c <USBD_CoreFindEP>
 800579e:	4603      	mov	r3, r0
 80057a0:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80057a2:	7dbb      	ldrb	r3, [r7, #22]
 80057a4:	2bff      	cmp	r3, #255	@ 0xff
 80057a6:	d025      	beq.n	80057f4 <USBD_LL_DataOutStage+0x15c>
 80057a8:	7dbb      	ldrb	r3, [r7, #22]
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d122      	bne.n	80057f4 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80057b4:	b2db      	uxtb	r3, r3
 80057b6:	2b03      	cmp	r3, #3
 80057b8:	d117      	bne.n	80057ea <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 80057ba:	7dba      	ldrb	r2, [r7, #22]
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	32ae      	adds	r2, #174	@ 0xae
 80057c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80057c4:	699b      	ldr	r3, [r3, #24]
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d00f      	beq.n	80057ea <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 80057ca:	7dba      	ldrb	r2, [r7, #22]
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 80057d2:	7dba      	ldrb	r2, [r7, #22]
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	32ae      	adds	r2, #174	@ 0xae
 80057d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80057dc:	699b      	ldr	r3, [r3, #24]
 80057de:	7afa      	ldrb	r2, [r7, #11]
 80057e0:	4611      	mov	r1, r2
 80057e2:	68f8      	ldr	r0, [r7, #12]
 80057e4:	4798      	blx	r3
 80057e6:	4603      	mov	r3, r0
 80057e8:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 80057ea:	7dfb      	ldrb	r3, [r7, #23]
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d001      	beq.n	80057f4 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 80057f0:	7dfb      	ldrb	r3, [r7, #23]
 80057f2:	e000      	b.n	80057f6 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 80057f4:	2300      	movs	r3, #0
}
 80057f6:	4618      	mov	r0, r3
 80057f8:	3718      	adds	r7, #24
 80057fa:	46bd      	mov	sp, r7
 80057fc:	bd80      	pop	{r7, pc}

080057fe <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80057fe:	b580      	push	{r7, lr}
 8005800:	b086      	sub	sp, #24
 8005802:	af00      	add	r7, sp, #0
 8005804:	60f8      	str	r0, [r7, #12]
 8005806:	460b      	mov	r3, r1
 8005808:	607a      	str	r2, [r7, #4]
 800580a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800580c:	7afb      	ldrb	r3, [r7, #11]
 800580e:	2b00      	cmp	r3, #0
 8005810:	d16f      	bne.n	80058f2 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	3314      	adds	r3, #20
 8005816:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800581e:	2b02      	cmp	r3, #2
 8005820:	d15a      	bne.n	80058d8 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8005822:	693b      	ldr	r3, [r7, #16]
 8005824:	689a      	ldr	r2, [r3, #8]
 8005826:	693b      	ldr	r3, [r7, #16]
 8005828:	68db      	ldr	r3, [r3, #12]
 800582a:	429a      	cmp	r2, r3
 800582c:	d914      	bls.n	8005858 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800582e:	693b      	ldr	r3, [r7, #16]
 8005830:	689a      	ldr	r2, [r3, #8]
 8005832:	693b      	ldr	r3, [r7, #16]
 8005834:	68db      	ldr	r3, [r3, #12]
 8005836:	1ad2      	subs	r2, r2, r3
 8005838:	693b      	ldr	r3, [r7, #16]
 800583a:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800583c:	693b      	ldr	r3, [r7, #16]
 800583e:	689b      	ldr	r3, [r3, #8]
 8005840:	461a      	mov	r2, r3
 8005842:	6879      	ldr	r1, [r7, #4]
 8005844:	68f8      	ldr	r0, [r7, #12]
 8005846:	f001 f8bc 	bl	80069c2 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800584a:	2300      	movs	r3, #0
 800584c:	2200      	movs	r2, #0
 800584e:	2100      	movs	r1, #0
 8005850:	68f8      	ldr	r0, [r7, #12]
 8005852:	f001 fd97 	bl	8007384 <USBD_LL_PrepareReceive>
 8005856:	e03f      	b.n	80058d8 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8005858:	693b      	ldr	r3, [r7, #16]
 800585a:	68da      	ldr	r2, [r3, #12]
 800585c:	693b      	ldr	r3, [r7, #16]
 800585e:	689b      	ldr	r3, [r3, #8]
 8005860:	429a      	cmp	r2, r3
 8005862:	d11c      	bne.n	800589e <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8005864:	693b      	ldr	r3, [r7, #16]
 8005866:	685a      	ldr	r2, [r3, #4]
 8005868:	693b      	ldr	r3, [r7, #16]
 800586a:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800586c:	429a      	cmp	r2, r3
 800586e:	d316      	bcc.n	800589e <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8005870:	693b      	ldr	r3, [r7, #16]
 8005872:	685a      	ldr	r2, [r3, #4]
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800587a:	429a      	cmp	r2, r3
 800587c:	d20f      	bcs.n	800589e <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800587e:	2200      	movs	r2, #0
 8005880:	2100      	movs	r1, #0
 8005882:	68f8      	ldr	r0, [r7, #12]
 8005884:	f001 f89d 	bl	80069c2 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	2200      	movs	r2, #0
 800588c:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005890:	2300      	movs	r3, #0
 8005892:	2200      	movs	r2, #0
 8005894:	2100      	movs	r1, #0
 8005896:	68f8      	ldr	r0, [r7, #12]
 8005898:	f001 fd74 	bl	8007384 <USBD_LL_PrepareReceive>
 800589c:	e01c      	b.n	80058d8 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80058a4:	b2db      	uxtb	r3, r3
 80058a6:	2b03      	cmp	r3, #3
 80058a8:	d10f      	bne.n	80058ca <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80058b0:	68db      	ldr	r3, [r3, #12]
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d009      	beq.n	80058ca <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	2200      	movs	r2, #0
 80058ba:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80058c4:	68db      	ldr	r3, [r3, #12]
 80058c6:	68f8      	ldr	r0, [r7, #12]
 80058c8:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80058ca:	2180      	movs	r1, #128	@ 0x80
 80058cc:	68f8      	ldr	r0, [r7, #12]
 80058ce:	f001 fcaf 	bl	8007230 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80058d2:	68f8      	ldr	r0, [r7, #12]
 80058d4:	f001 f8c7 	bl	8006a66 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d03a      	beq.n	8005958 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 80058e2:	68f8      	ldr	r0, [r7, #12]
 80058e4:	f7ff fe42 	bl	800556c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	2200      	movs	r2, #0
 80058ec:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 80058f0:	e032      	b.n	8005958 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 80058f2:	7afb      	ldrb	r3, [r7, #11]
 80058f4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80058f8:	b2db      	uxtb	r3, r3
 80058fa:	4619      	mov	r1, r3
 80058fc:	68f8      	ldr	r0, [r7, #12]
 80058fe:	f000 f985 	bl	8005c0c <USBD_CoreFindEP>
 8005902:	4603      	mov	r3, r0
 8005904:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005906:	7dfb      	ldrb	r3, [r7, #23]
 8005908:	2bff      	cmp	r3, #255	@ 0xff
 800590a:	d025      	beq.n	8005958 <USBD_LL_DataInStage+0x15a>
 800590c:	7dfb      	ldrb	r3, [r7, #23]
 800590e:	2b00      	cmp	r3, #0
 8005910:	d122      	bne.n	8005958 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005918:	b2db      	uxtb	r3, r3
 800591a:	2b03      	cmp	r3, #3
 800591c:	d11c      	bne.n	8005958 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800591e:	7dfa      	ldrb	r2, [r7, #23]
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	32ae      	adds	r2, #174	@ 0xae
 8005924:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005928:	695b      	ldr	r3, [r3, #20]
 800592a:	2b00      	cmp	r3, #0
 800592c:	d014      	beq.n	8005958 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800592e:	7dfa      	ldrb	r2, [r7, #23]
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8005936:	7dfa      	ldrb	r2, [r7, #23]
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	32ae      	adds	r2, #174	@ 0xae
 800593c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005940:	695b      	ldr	r3, [r3, #20]
 8005942:	7afa      	ldrb	r2, [r7, #11]
 8005944:	4611      	mov	r1, r2
 8005946:	68f8      	ldr	r0, [r7, #12]
 8005948:	4798      	blx	r3
 800594a:	4603      	mov	r3, r0
 800594c:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800594e:	7dbb      	ldrb	r3, [r7, #22]
 8005950:	2b00      	cmp	r3, #0
 8005952:	d001      	beq.n	8005958 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8005954:	7dbb      	ldrb	r3, [r7, #22]
 8005956:	e000      	b.n	800595a <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8005958:	2300      	movs	r3, #0
}
 800595a:	4618      	mov	r0, r3
 800595c:	3718      	adds	r7, #24
 800595e:	46bd      	mov	sp, r7
 8005960:	bd80      	pop	{r7, pc}

08005962 <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8005962:	b580      	push	{r7, lr}
 8005964:	b084      	sub	sp, #16
 8005966:	af00      	add	r7, sp, #0
 8005968:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800596a:	2300      	movs	r3, #0
 800596c:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	2201      	movs	r2, #1
 8005972:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	2200      	movs	r2, #0
 800597a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	2200      	movs	r2, #0
 8005982:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	2200      	movs	r2, #0
 8005988:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	2200      	movs	r2, #0
 8005990:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800599a:	2b00      	cmp	r3, #0
 800599c:	d014      	beq.n	80059c8 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80059a4:	685b      	ldr	r3, [r3, #4]
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d00e      	beq.n	80059c8 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80059b0:	685b      	ldr	r3, [r3, #4]
 80059b2:	687a      	ldr	r2, [r7, #4]
 80059b4:	6852      	ldr	r2, [r2, #4]
 80059b6:	b2d2      	uxtb	r2, r2
 80059b8:	4611      	mov	r1, r2
 80059ba:	6878      	ldr	r0, [r7, #4]
 80059bc:	4798      	blx	r3
 80059be:	4603      	mov	r3, r0
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d001      	beq.n	80059c8 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 80059c4:	2303      	movs	r3, #3
 80059c6:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80059c8:	2340      	movs	r3, #64	@ 0x40
 80059ca:	2200      	movs	r2, #0
 80059cc:	2100      	movs	r1, #0
 80059ce:	6878      	ldr	r0, [r7, #4]
 80059d0:	f001 fbe9 	bl	80071a6 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	2201      	movs	r2, #1
 80059d8:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	2240      	movs	r2, #64	@ 0x40
 80059e0:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80059e4:	2340      	movs	r3, #64	@ 0x40
 80059e6:	2200      	movs	r2, #0
 80059e8:	2180      	movs	r1, #128	@ 0x80
 80059ea:	6878      	ldr	r0, [r7, #4]
 80059ec:	f001 fbdb 	bl	80071a6 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	2201      	movs	r2, #1
 80059f4:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	2240      	movs	r2, #64	@ 0x40
 80059fa:	621a      	str	r2, [r3, #32]

  return ret;
 80059fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80059fe:	4618      	mov	r0, r3
 8005a00:	3710      	adds	r7, #16
 8005a02:	46bd      	mov	sp, r7
 8005a04:	bd80      	pop	{r7, pc}

08005a06 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8005a06:	b480      	push	{r7}
 8005a08:	b083      	sub	sp, #12
 8005a0a:	af00      	add	r7, sp, #0
 8005a0c:	6078      	str	r0, [r7, #4]
 8005a0e:	460b      	mov	r3, r1
 8005a10:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	78fa      	ldrb	r2, [r7, #3]
 8005a16:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8005a18:	2300      	movs	r3, #0
}
 8005a1a:	4618      	mov	r0, r3
 8005a1c:	370c      	adds	r7, #12
 8005a1e:	46bd      	mov	sp, r7
 8005a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a24:	4770      	bx	lr

08005a26 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8005a26:	b480      	push	{r7}
 8005a28:	b083      	sub	sp, #12
 8005a2a:	af00      	add	r7, sp, #0
 8005a2c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005a34:	b2db      	uxtb	r3, r3
 8005a36:	2b04      	cmp	r3, #4
 8005a38:	d006      	beq.n	8005a48 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005a40:	b2da      	uxtb	r2, r3
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	2204      	movs	r2, #4
 8005a4c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8005a50:	2300      	movs	r3, #0
}
 8005a52:	4618      	mov	r0, r3
 8005a54:	370c      	adds	r7, #12
 8005a56:	46bd      	mov	sp, r7
 8005a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a5c:	4770      	bx	lr

08005a5e <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8005a5e:	b480      	push	{r7}
 8005a60:	b083      	sub	sp, #12
 8005a62:	af00      	add	r7, sp, #0
 8005a64:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005a6c:	b2db      	uxtb	r3, r3
 8005a6e:	2b04      	cmp	r3, #4
 8005a70:	d106      	bne.n	8005a80 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8005a78:	b2da      	uxtb	r2, r3
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8005a80:	2300      	movs	r3, #0
}
 8005a82:	4618      	mov	r0, r3
 8005a84:	370c      	adds	r7, #12
 8005a86:	46bd      	mov	sp, r7
 8005a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a8c:	4770      	bx	lr

08005a8e <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8005a8e:	b580      	push	{r7, lr}
 8005a90:	b082      	sub	sp, #8
 8005a92:	af00      	add	r7, sp, #0
 8005a94:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005a9c:	b2db      	uxtb	r3, r3
 8005a9e:	2b03      	cmp	r3, #3
 8005aa0:	d110      	bne.n	8005ac4 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d00b      	beq.n	8005ac4 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005ab2:	69db      	ldr	r3, [r3, #28]
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d005      	beq.n	8005ac4 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005abe:	69db      	ldr	r3, [r3, #28]
 8005ac0:	6878      	ldr	r0, [r7, #4]
 8005ac2:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8005ac4:	2300      	movs	r3, #0
}
 8005ac6:	4618      	mov	r0, r3
 8005ac8:	3708      	adds	r7, #8
 8005aca:	46bd      	mov	sp, r7
 8005acc:	bd80      	pop	{r7, pc}

08005ace <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8005ace:	b580      	push	{r7, lr}
 8005ad0:	b082      	sub	sp, #8
 8005ad2:	af00      	add	r7, sp, #0
 8005ad4:	6078      	str	r0, [r7, #4]
 8005ad6:	460b      	mov	r3, r1
 8005ad8:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	32ae      	adds	r2, #174	@ 0xae
 8005ae4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d101      	bne.n	8005af0 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8005aec:	2303      	movs	r3, #3
 8005aee:	e01c      	b.n	8005b2a <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005af6:	b2db      	uxtb	r3, r3
 8005af8:	2b03      	cmp	r3, #3
 8005afa:	d115      	bne.n	8005b28 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	32ae      	adds	r2, #174	@ 0xae
 8005b06:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b0a:	6a1b      	ldr	r3, [r3, #32]
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d00b      	beq.n	8005b28 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	32ae      	adds	r2, #174	@ 0xae
 8005b1a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b1e:	6a1b      	ldr	r3, [r3, #32]
 8005b20:	78fa      	ldrb	r2, [r7, #3]
 8005b22:	4611      	mov	r1, r2
 8005b24:	6878      	ldr	r0, [r7, #4]
 8005b26:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005b28:	2300      	movs	r3, #0
}
 8005b2a:	4618      	mov	r0, r3
 8005b2c:	3708      	adds	r7, #8
 8005b2e:	46bd      	mov	sp, r7
 8005b30:	bd80      	pop	{r7, pc}

08005b32 <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8005b32:	b580      	push	{r7, lr}
 8005b34:	b082      	sub	sp, #8
 8005b36:	af00      	add	r7, sp, #0
 8005b38:	6078      	str	r0, [r7, #4]
 8005b3a:	460b      	mov	r3, r1
 8005b3c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	32ae      	adds	r2, #174	@ 0xae
 8005b48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d101      	bne.n	8005b54 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8005b50:	2303      	movs	r3, #3
 8005b52:	e01c      	b.n	8005b8e <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005b5a:	b2db      	uxtb	r3, r3
 8005b5c:	2b03      	cmp	r3, #3
 8005b5e:	d115      	bne.n	8005b8c <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	32ae      	adds	r2, #174	@ 0xae
 8005b6a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d00b      	beq.n	8005b8c <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	32ae      	adds	r2, #174	@ 0xae
 8005b7e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b84:	78fa      	ldrb	r2, [r7, #3]
 8005b86:	4611      	mov	r1, r2
 8005b88:	6878      	ldr	r0, [r7, #4]
 8005b8a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005b8c:	2300      	movs	r3, #0
}
 8005b8e:	4618      	mov	r0, r3
 8005b90:	3708      	adds	r7, #8
 8005b92:	46bd      	mov	sp, r7
 8005b94:	bd80      	pop	{r7, pc}

08005b96 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8005b96:	b480      	push	{r7}
 8005b98:	b083      	sub	sp, #12
 8005b9a:	af00      	add	r7, sp, #0
 8005b9c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005b9e:	2300      	movs	r3, #0
}
 8005ba0:	4618      	mov	r0, r3
 8005ba2:	370c      	adds	r7, #12
 8005ba4:	46bd      	mov	sp, r7
 8005ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005baa:	4770      	bx	lr

08005bac <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8005bac:	b580      	push	{r7, lr}
 8005bae:	b084      	sub	sp, #16
 8005bb0:	af00      	add	r7, sp, #0
 8005bb2:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8005bb4:	2300      	movs	r3, #0
 8005bb6:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	2201      	movs	r2, #1
 8005bbc:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d00e      	beq.n	8005be8 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005bd0:	685b      	ldr	r3, [r3, #4]
 8005bd2:	687a      	ldr	r2, [r7, #4]
 8005bd4:	6852      	ldr	r2, [r2, #4]
 8005bd6:	b2d2      	uxtb	r2, r2
 8005bd8:	4611      	mov	r1, r2
 8005bda:	6878      	ldr	r0, [r7, #4]
 8005bdc:	4798      	blx	r3
 8005bde:	4603      	mov	r3, r0
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d001      	beq.n	8005be8 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8005be4:	2303      	movs	r3, #3
 8005be6:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8005be8:	7bfb      	ldrb	r3, [r7, #15]
}
 8005bea:	4618      	mov	r0, r3
 8005bec:	3710      	adds	r7, #16
 8005bee:	46bd      	mov	sp, r7
 8005bf0:	bd80      	pop	{r7, pc}

08005bf2 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8005bf2:	b480      	push	{r7}
 8005bf4:	b083      	sub	sp, #12
 8005bf6:	af00      	add	r7, sp, #0
 8005bf8:	6078      	str	r0, [r7, #4]
 8005bfa:	460b      	mov	r3, r1
 8005bfc:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8005bfe:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8005c00:	4618      	mov	r0, r3
 8005c02:	370c      	adds	r7, #12
 8005c04:	46bd      	mov	sp, r7
 8005c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c0a:	4770      	bx	lr

08005c0c <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8005c0c:	b480      	push	{r7}
 8005c0e:	b083      	sub	sp, #12
 8005c10:	af00      	add	r7, sp, #0
 8005c12:	6078      	str	r0, [r7, #4]
 8005c14:	460b      	mov	r3, r1
 8005c16:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8005c18:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8005c1a:	4618      	mov	r0, r3
 8005c1c:	370c      	adds	r7, #12
 8005c1e:	46bd      	mov	sp, r7
 8005c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c24:	4770      	bx	lr

08005c26 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8005c26:	b580      	push	{r7, lr}
 8005c28:	b086      	sub	sp, #24
 8005c2a:	af00      	add	r7, sp, #0
 8005c2c:	6078      	str	r0, [r7, #4]
 8005c2e:	460b      	mov	r3, r1
 8005c30:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8005c3a:	2300      	movs	r3, #0
 8005c3c:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	885b      	ldrh	r3, [r3, #2]
 8005c42:	b29b      	uxth	r3, r3
 8005c44:	68fa      	ldr	r2, [r7, #12]
 8005c46:	7812      	ldrb	r2, [r2, #0]
 8005c48:	4293      	cmp	r3, r2
 8005c4a:	d91f      	bls.n	8005c8c <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	781b      	ldrb	r3, [r3, #0]
 8005c50:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8005c52:	e013      	b.n	8005c7c <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8005c54:	f107 030a 	add.w	r3, r7, #10
 8005c58:	4619      	mov	r1, r3
 8005c5a:	6978      	ldr	r0, [r7, #20]
 8005c5c:	f000 f81b 	bl	8005c96 <USBD_GetNextDesc>
 8005c60:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8005c62:	697b      	ldr	r3, [r7, #20]
 8005c64:	785b      	ldrb	r3, [r3, #1]
 8005c66:	2b05      	cmp	r3, #5
 8005c68:	d108      	bne.n	8005c7c <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8005c6a:	697b      	ldr	r3, [r7, #20]
 8005c6c:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8005c6e:	693b      	ldr	r3, [r7, #16]
 8005c70:	789b      	ldrb	r3, [r3, #2]
 8005c72:	78fa      	ldrb	r2, [r7, #3]
 8005c74:	429a      	cmp	r2, r3
 8005c76:	d008      	beq.n	8005c8a <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8005c78:	2300      	movs	r3, #0
 8005c7a:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	885b      	ldrh	r3, [r3, #2]
 8005c80:	b29a      	uxth	r2, r3
 8005c82:	897b      	ldrh	r3, [r7, #10]
 8005c84:	429a      	cmp	r2, r3
 8005c86:	d8e5      	bhi.n	8005c54 <USBD_GetEpDesc+0x2e>
 8005c88:	e000      	b.n	8005c8c <USBD_GetEpDesc+0x66>
          break;
 8005c8a:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8005c8c:	693b      	ldr	r3, [r7, #16]
}
 8005c8e:	4618      	mov	r0, r3
 8005c90:	3718      	adds	r7, #24
 8005c92:	46bd      	mov	sp, r7
 8005c94:	bd80      	pop	{r7, pc}

08005c96 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8005c96:	b480      	push	{r7}
 8005c98:	b085      	sub	sp, #20
 8005c9a:	af00      	add	r7, sp, #0
 8005c9c:	6078      	str	r0, [r7, #4]
 8005c9e:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8005ca4:	683b      	ldr	r3, [r7, #0]
 8005ca6:	881b      	ldrh	r3, [r3, #0]
 8005ca8:	68fa      	ldr	r2, [r7, #12]
 8005caa:	7812      	ldrb	r2, [r2, #0]
 8005cac:	4413      	add	r3, r2
 8005cae:	b29a      	uxth	r2, r3
 8005cb0:	683b      	ldr	r3, [r7, #0]
 8005cb2:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	781b      	ldrb	r3, [r3, #0]
 8005cb8:	461a      	mov	r2, r3
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	4413      	add	r3, r2
 8005cbe:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8005cc0:	68fb      	ldr	r3, [r7, #12]
}
 8005cc2:	4618      	mov	r0, r3
 8005cc4:	3714      	adds	r7, #20
 8005cc6:	46bd      	mov	sp, r7
 8005cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ccc:	4770      	bx	lr

08005cce <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8005cce:	b480      	push	{r7}
 8005cd0:	b087      	sub	sp, #28
 8005cd2:	af00      	add	r7, sp, #0
 8005cd4:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8005cda:	697b      	ldr	r3, [r7, #20]
 8005cdc:	781b      	ldrb	r3, [r3, #0]
 8005cde:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8005ce0:	697b      	ldr	r3, [r7, #20]
 8005ce2:	3301      	adds	r3, #1
 8005ce4:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8005ce6:	697b      	ldr	r3, [r7, #20]
 8005ce8:	781b      	ldrb	r3, [r3, #0]
 8005cea:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8005cec:	8a3b      	ldrh	r3, [r7, #16]
 8005cee:	021b      	lsls	r3, r3, #8
 8005cf0:	b21a      	sxth	r2, r3
 8005cf2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8005cf6:	4313      	orrs	r3, r2
 8005cf8:	b21b      	sxth	r3, r3
 8005cfa:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8005cfc:	89fb      	ldrh	r3, [r7, #14]
}
 8005cfe:	4618      	mov	r0, r3
 8005d00:	371c      	adds	r7, #28
 8005d02:	46bd      	mov	sp, r7
 8005d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d08:	4770      	bx	lr
	...

08005d0c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005d0c:	b580      	push	{r7, lr}
 8005d0e:	b084      	sub	sp, #16
 8005d10:	af00      	add	r7, sp, #0
 8005d12:	6078      	str	r0, [r7, #4]
 8005d14:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005d16:	2300      	movs	r3, #0
 8005d18:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005d1a:	683b      	ldr	r3, [r7, #0]
 8005d1c:	781b      	ldrb	r3, [r3, #0]
 8005d1e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8005d22:	2b40      	cmp	r3, #64	@ 0x40
 8005d24:	d005      	beq.n	8005d32 <USBD_StdDevReq+0x26>
 8005d26:	2b40      	cmp	r3, #64	@ 0x40
 8005d28:	d857      	bhi.n	8005dda <USBD_StdDevReq+0xce>
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d00f      	beq.n	8005d4e <USBD_StdDevReq+0x42>
 8005d2e:	2b20      	cmp	r3, #32
 8005d30:	d153      	bne.n	8005dda <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	32ae      	adds	r2, #174	@ 0xae
 8005d3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005d40:	689b      	ldr	r3, [r3, #8]
 8005d42:	6839      	ldr	r1, [r7, #0]
 8005d44:	6878      	ldr	r0, [r7, #4]
 8005d46:	4798      	blx	r3
 8005d48:	4603      	mov	r3, r0
 8005d4a:	73fb      	strb	r3, [r7, #15]
      break;
 8005d4c:	e04a      	b.n	8005de4 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005d4e:	683b      	ldr	r3, [r7, #0]
 8005d50:	785b      	ldrb	r3, [r3, #1]
 8005d52:	2b09      	cmp	r3, #9
 8005d54:	d83b      	bhi.n	8005dce <USBD_StdDevReq+0xc2>
 8005d56:	a201      	add	r2, pc, #4	@ (adr r2, 8005d5c <USBD_StdDevReq+0x50>)
 8005d58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d5c:	08005db1 	.word	0x08005db1
 8005d60:	08005dc5 	.word	0x08005dc5
 8005d64:	08005dcf 	.word	0x08005dcf
 8005d68:	08005dbb 	.word	0x08005dbb
 8005d6c:	08005dcf 	.word	0x08005dcf
 8005d70:	08005d8f 	.word	0x08005d8f
 8005d74:	08005d85 	.word	0x08005d85
 8005d78:	08005dcf 	.word	0x08005dcf
 8005d7c:	08005da7 	.word	0x08005da7
 8005d80:	08005d99 	.word	0x08005d99
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8005d84:	6839      	ldr	r1, [r7, #0]
 8005d86:	6878      	ldr	r0, [r7, #4]
 8005d88:	f000 fa3c 	bl	8006204 <USBD_GetDescriptor>
          break;
 8005d8c:	e024      	b.n	8005dd8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8005d8e:	6839      	ldr	r1, [r7, #0]
 8005d90:	6878      	ldr	r0, [r7, #4]
 8005d92:	f000 fba1 	bl	80064d8 <USBD_SetAddress>
          break;
 8005d96:	e01f      	b.n	8005dd8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8005d98:	6839      	ldr	r1, [r7, #0]
 8005d9a:	6878      	ldr	r0, [r7, #4]
 8005d9c:	f000 fbe0 	bl	8006560 <USBD_SetConfig>
 8005da0:	4603      	mov	r3, r0
 8005da2:	73fb      	strb	r3, [r7, #15]
          break;
 8005da4:	e018      	b.n	8005dd8 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8005da6:	6839      	ldr	r1, [r7, #0]
 8005da8:	6878      	ldr	r0, [r7, #4]
 8005daa:	f000 fc83 	bl	80066b4 <USBD_GetConfig>
          break;
 8005dae:	e013      	b.n	8005dd8 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8005db0:	6839      	ldr	r1, [r7, #0]
 8005db2:	6878      	ldr	r0, [r7, #4]
 8005db4:	f000 fcb4 	bl	8006720 <USBD_GetStatus>
          break;
 8005db8:	e00e      	b.n	8005dd8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8005dba:	6839      	ldr	r1, [r7, #0]
 8005dbc:	6878      	ldr	r0, [r7, #4]
 8005dbe:	f000 fce3 	bl	8006788 <USBD_SetFeature>
          break;
 8005dc2:	e009      	b.n	8005dd8 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8005dc4:	6839      	ldr	r1, [r7, #0]
 8005dc6:	6878      	ldr	r0, [r7, #4]
 8005dc8:	f000 fd07 	bl	80067da <USBD_ClrFeature>
          break;
 8005dcc:	e004      	b.n	8005dd8 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8005dce:	6839      	ldr	r1, [r7, #0]
 8005dd0:	6878      	ldr	r0, [r7, #4]
 8005dd2:	f000 fd5e 	bl	8006892 <USBD_CtlError>
          break;
 8005dd6:	bf00      	nop
      }
      break;
 8005dd8:	e004      	b.n	8005de4 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8005dda:	6839      	ldr	r1, [r7, #0]
 8005ddc:	6878      	ldr	r0, [r7, #4]
 8005dde:	f000 fd58 	bl	8006892 <USBD_CtlError>
      break;
 8005de2:	bf00      	nop
  }

  return ret;
 8005de4:	7bfb      	ldrb	r3, [r7, #15]
}
 8005de6:	4618      	mov	r0, r3
 8005de8:	3710      	adds	r7, #16
 8005dea:	46bd      	mov	sp, r7
 8005dec:	bd80      	pop	{r7, pc}
 8005dee:	bf00      	nop

08005df0 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005df0:	b580      	push	{r7, lr}
 8005df2:	b084      	sub	sp, #16
 8005df4:	af00      	add	r7, sp, #0
 8005df6:	6078      	str	r0, [r7, #4]
 8005df8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005dfa:	2300      	movs	r3, #0
 8005dfc:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005dfe:	683b      	ldr	r3, [r7, #0]
 8005e00:	781b      	ldrb	r3, [r3, #0]
 8005e02:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8005e06:	2b40      	cmp	r3, #64	@ 0x40
 8005e08:	d005      	beq.n	8005e16 <USBD_StdItfReq+0x26>
 8005e0a:	2b40      	cmp	r3, #64	@ 0x40
 8005e0c:	d852      	bhi.n	8005eb4 <USBD_StdItfReq+0xc4>
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d001      	beq.n	8005e16 <USBD_StdItfReq+0x26>
 8005e12:	2b20      	cmp	r3, #32
 8005e14:	d14e      	bne.n	8005eb4 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005e1c:	b2db      	uxtb	r3, r3
 8005e1e:	3b01      	subs	r3, #1
 8005e20:	2b02      	cmp	r3, #2
 8005e22:	d840      	bhi.n	8005ea6 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8005e24:	683b      	ldr	r3, [r7, #0]
 8005e26:	889b      	ldrh	r3, [r3, #4]
 8005e28:	b2db      	uxtb	r3, r3
 8005e2a:	2b01      	cmp	r3, #1
 8005e2c:	d836      	bhi.n	8005e9c <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8005e2e:	683b      	ldr	r3, [r7, #0]
 8005e30:	889b      	ldrh	r3, [r3, #4]
 8005e32:	b2db      	uxtb	r3, r3
 8005e34:	4619      	mov	r1, r3
 8005e36:	6878      	ldr	r0, [r7, #4]
 8005e38:	f7ff fedb 	bl	8005bf2 <USBD_CoreFindIF>
 8005e3c:	4603      	mov	r3, r0
 8005e3e:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005e40:	7bbb      	ldrb	r3, [r7, #14]
 8005e42:	2bff      	cmp	r3, #255	@ 0xff
 8005e44:	d01d      	beq.n	8005e82 <USBD_StdItfReq+0x92>
 8005e46:	7bbb      	ldrb	r3, [r7, #14]
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d11a      	bne.n	8005e82 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8005e4c:	7bba      	ldrb	r2, [r7, #14]
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	32ae      	adds	r2, #174	@ 0xae
 8005e52:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e56:	689b      	ldr	r3, [r3, #8]
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d00f      	beq.n	8005e7c <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8005e5c:	7bba      	ldrb	r2, [r7, #14]
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8005e64:	7bba      	ldrb	r2, [r7, #14]
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	32ae      	adds	r2, #174	@ 0xae
 8005e6a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e6e:	689b      	ldr	r3, [r3, #8]
 8005e70:	6839      	ldr	r1, [r7, #0]
 8005e72:	6878      	ldr	r0, [r7, #4]
 8005e74:	4798      	blx	r3
 8005e76:	4603      	mov	r3, r0
 8005e78:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8005e7a:	e004      	b.n	8005e86 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8005e7c:	2303      	movs	r3, #3
 8005e7e:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8005e80:	e001      	b.n	8005e86 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8005e82:	2303      	movs	r3, #3
 8005e84:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8005e86:	683b      	ldr	r3, [r7, #0]
 8005e88:	88db      	ldrh	r3, [r3, #6]
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d110      	bne.n	8005eb0 <USBD_StdItfReq+0xc0>
 8005e8e:	7bfb      	ldrb	r3, [r7, #15]
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d10d      	bne.n	8005eb0 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8005e94:	6878      	ldr	r0, [r7, #4]
 8005e96:	f000 fdd3 	bl	8006a40 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8005e9a:	e009      	b.n	8005eb0 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8005e9c:	6839      	ldr	r1, [r7, #0]
 8005e9e:	6878      	ldr	r0, [r7, #4]
 8005ea0:	f000 fcf7 	bl	8006892 <USBD_CtlError>
          break;
 8005ea4:	e004      	b.n	8005eb0 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8005ea6:	6839      	ldr	r1, [r7, #0]
 8005ea8:	6878      	ldr	r0, [r7, #4]
 8005eaa:	f000 fcf2 	bl	8006892 <USBD_CtlError>
          break;
 8005eae:	e000      	b.n	8005eb2 <USBD_StdItfReq+0xc2>
          break;
 8005eb0:	bf00      	nop
      }
      break;
 8005eb2:	e004      	b.n	8005ebe <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8005eb4:	6839      	ldr	r1, [r7, #0]
 8005eb6:	6878      	ldr	r0, [r7, #4]
 8005eb8:	f000 fceb 	bl	8006892 <USBD_CtlError>
      break;
 8005ebc:	bf00      	nop
  }

  return ret;
 8005ebe:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ec0:	4618      	mov	r0, r3
 8005ec2:	3710      	adds	r7, #16
 8005ec4:	46bd      	mov	sp, r7
 8005ec6:	bd80      	pop	{r7, pc}

08005ec8 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005ec8:	b580      	push	{r7, lr}
 8005eca:	b084      	sub	sp, #16
 8005ecc:	af00      	add	r7, sp, #0
 8005ece:	6078      	str	r0, [r7, #4]
 8005ed0:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8005ed2:	2300      	movs	r3, #0
 8005ed4:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8005ed6:	683b      	ldr	r3, [r7, #0]
 8005ed8:	889b      	ldrh	r3, [r3, #4]
 8005eda:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005edc:	683b      	ldr	r3, [r7, #0]
 8005ede:	781b      	ldrb	r3, [r3, #0]
 8005ee0:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8005ee4:	2b40      	cmp	r3, #64	@ 0x40
 8005ee6:	d007      	beq.n	8005ef8 <USBD_StdEPReq+0x30>
 8005ee8:	2b40      	cmp	r3, #64	@ 0x40
 8005eea:	f200 817f 	bhi.w	80061ec <USBD_StdEPReq+0x324>
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d02a      	beq.n	8005f48 <USBD_StdEPReq+0x80>
 8005ef2:	2b20      	cmp	r3, #32
 8005ef4:	f040 817a 	bne.w	80061ec <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8005ef8:	7bbb      	ldrb	r3, [r7, #14]
 8005efa:	4619      	mov	r1, r3
 8005efc:	6878      	ldr	r0, [r7, #4]
 8005efe:	f7ff fe85 	bl	8005c0c <USBD_CoreFindEP>
 8005f02:	4603      	mov	r3, r0
 8005f04:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005f06:	7b7b      	ldrb	r3, [r7, #13]
 8005f08:	2bff      	cmp	r3, #255	@ 0xff
 8005f0a:	f000 8174 	beq.w	80061f6 <USBD_StdEPReq+0x32e>
 8005f0e:	7b7b      	ldrb	r3, [r7, #13]
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	f040 8170 	bne.w	80061f6 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8005f16:	7b7a      	ldrb	r2, [r7, #13]
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8005f1e:	7b7a      	ldrb	r2, [r7, #13]
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	32ae      	adds	r2, #174	@ 0xae
 8005f24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f28:	689b      	ldr	r3, [r3, #8]
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	f000 8163 	beq.w	80061f6 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8005f30:	7b7a      	ldrb	r2, [r7, #13]
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	32ae      	adds	r2, #174	@ 0xae
 8005f36:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f3a:	689b      	ldr	r3, [r3, #8]
 8005f3c:	6839      	ldr	r1, [r7, #0]
 8005f3e:	6878      	ldr	r0, [r7, #4]
 8005f40:	4798      	blx	r3
 8005f42:	4603      	mov	r3, r0
 8005f44:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005f46:	e156      	b.n	80061f6 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005f48:	683b      	ldr	r3, [r7, #0]
 8005f4a:	785b      	ldrb	r3, [r3, #1]
 8005f4c:	2b03      	cmp	r3, #3
 8005f4e:	d008      	beq.n	8005f62 <USBD_StdEPReq+0x9a>
 8005f50:	2b03      	cmp	r3, #3
 8005f52:	f300 8145 	bgt.w	80061e0 <USBD_StdEPReq+0x318>
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	f000 809b 	beq.w	8006092 <USBD_StdEPReq+0x1ca>
 8005f5c:	2b01      	cmp	r3, #1
 8005f5e:	d03c      	beq.n	8005fda <USBD_StdEPReq+0x112>
 8005f60:	e13e      	b.n	80061e0 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005f68:	b2db      	uxtb	r3, r3
 8005f6a:	2b02      	cmp	r3, #2
 8005f6c:	d002      	beq.n	8005f74 <USBD_StdEPReq+0xac>
 8005f6e:	2b03      	cmp	r3, #3
 8005f70:	d016      	beq.n	8005fa0 <USBD_StdEPReq+0xd8>
 8005f72:	e02c      	b.n	8005fce <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005f74:	7bbb      	ldrb	r3, [r7, #14]
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d00d      	beq.n	8005f96 <USBD_StdEPReq+0xce>
 8005f7a:	7bbb      	ldrb	r3, [r7, #14]
 8005f7c:	2b80      	cmp	r3, #128	@ 0x80
 8005f7e:	d00a      	beq.n	8005f96 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8005f80:	7bbb      	ldrb	r3, [r7, #14]
 8005f82:	4619      	mov	r1, r3
 8005f84:	6878      	ldr	r0, [r7, #4]
 8005f86:	f001 f953 	bl	8007230 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8005f8a:	2180      	movs	r1, #128	@ 0x80
 8005f8c:	6878      	ldr	r0, [r7, #4]
 8005f8e:	f001 f94f 	bl	8007230 <USBD_LL_StallEP>
 8005f92:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8005f94:	e020      	b.n	8005fd8 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8005f96:	6839      	ldr	r1, [r7, #0]
 8005f98:	6878      	ldr	r0, [r7, #4]
 8005f9a:	f000 fc7a 	bl	8006892 <USBD_CtlError>
              break;
 8005f9e:	e01b      	b.n	8005fd8 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8005fa0:	683b      	ldr	r3, [r7, #0]
 8005fa2:	885b      	ldrh	r3, [r3, #2]
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d10e      	bne.n	8005fc6 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8005fa8:	7bbb      	ldrb	r3, [r7, #14]
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d00b      	beq.n	8005fc6 <USBD_StdEPReq+0xfe>
 8005fae:	7bbb      	ldrb	r3, [r7, #14]
 8005fb0:	2b80      	cmp	r3, #128	@ 0x80
 8005fb2:	d008      	beq.n	8005fc6 <USBD_StdEPReq+0xfe>
 8005fb4:	683b      	ldr	r3, [r7, #0]
 8005fb6:	88db      	ldrh	r3, [r3, #6]
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d104      	bne.n	8005fc6 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8005fbc:	7bbb      	ldrb	r3, [r7, #14]
 8005fbe:	4619      	mov	r1, r3
 8005fc0:	6878      	ldr	r0, [r7, #4]
 8005fc2:	f001 f935 	bl	8007230 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8005fc6:	6878      	ldr	r0, [r7, #4]
 8005fc8:	f000 fd3a 	bl	8006a40 <USBD_CtlSendStatus>

              break;
 8005fcc:	e004      	b.n	8005fd8 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8005fce:	6839      	ldr	r1, [r7, #0]
 8005fd0:	6878      	ldr	r0, [r7, #4]
 8005fd2:	f000 fc5e 	bl	8006892 <USBD_CtlError>
              break;
 8005fd6:	bf00      	nop
          }
          break;
 8005fd8:	e107      	b.n	80061ea <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005fe0:	b2db      	uxtb	r3, r3
 8005fe2:	2b02      	cmp	r3, #2
 8005fe4:	d002      	beq.n	8005fec <USBD_StdEPReq+0x124>
 8005fe6:	2b03      	cmp	r3, #3
 8005fe8:	d016      	beq.n	8006018 <USBD_StdEPReq+0x150>
 8005fea:	e04b      	b.n	8006084 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005fec:	7bbb      	ldrb	r3, [r7, #14]
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d00d      	beq.n	800600e <USBD_StdEPReq+0x146>
 8005ff2:	7bbb      	ldrb	r3, [r7, #14]
 8005ff4:	2b80      	cmp	r3, #128	@ 0x80
 8005ff6:	d00a      	beq.n	800600e <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8005ff8:	7bbb      	ldrb	r3, [r7, #14]
 8005ffa:	4619      	mov	r1, r3
 8005ffc:	6878      	ldr	r0, [r7, #4]
 8005ffe:	f001 f917 	bl	8007230 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8006002:	2180      	movs	r1, #128	@ 0x80
 8006004:	6878      	ldr	r0, [r7, #4]
 8006006:	f001 f913 	bl	8007230 <USBD_LL_StallEP>
 800600a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800600c:	e040      	b.n	8006090 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800600e:	6839      	ldr	r1, [r7, #0]
 8006010:	6878      	ldr	r0, [r7, #4]
 8006012:	f000 fc3e 	bl	8006892 <USBD_CtlError>
              break;
 8006016:	e03b      	b.n	8006090 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006018:	683b      	ldr	r3, [r7, #0]
 800601a:	885b      	ldrh	r3, [r3, #2]
 800601c:	2b00      	cmp	r3, #0
 800601e:	d136      	bne.n	800608e <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8006020:	7bbb      	ldrb	r3, [r7, #14]
 8006022:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006026:	2b00      	cmp	r3, #0
 8006028:	d004      	beq.n	8006034 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800602a:	7bbb      	ldrb	r3, [r7, #14]
 800602c:	4619      	mov	r1, r3
 800602e:	6878      	ldr	r0, [r7, #4]
 8006030:	f001 f91d 	bl	800726e <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8006034:	6878      	ldr	r0, [r7, #4]
 8006036:	f000 fd03 	bl	8006a40 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800603a:	7bbb      	ldrb	r3, [r7, #14]
 800603c:	4619      	mov	r1, r3
 800603e:	6878      	ldr	r0, [r7, #4]
 8006040:	f7ff fde4 	bl	8005c0c <USBD_CoreFindEP>
 8006044:	4603      	mov	r3, r0
 8006046:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006048:	7b7b      	ldrb	r3, [r7, #13]
 800604a:	2bff      	cmp	r3, #255	@ 0xff
 800604c:	d01f      	beq.n	800608e <USBD_StdEPReq+0x1c6>
 800604e:	7b7b      	ldrb	r3, [r7, #13]
 8006050:	2b00      	cmp	r3, #0
 8006052:	d11c      	bne.n	800608e <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8006054:	7b7a      	ldrb	r2, [r7, #13]
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800605c:	7b7a      	ldrb	r2, [r7, #13]
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	32ae      	adds	r2, #174	@ 0xae
 8006062:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006066:	689b      	ldr	r3, [r3, #8]
 8006068:	2b00      	cmp	r3, #0
 800606a:	d010      	beq.n	800608e <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800606c:	7b7a      	ldrb	r2, [r7, #13]
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	32ae      	adds	r2, #174	@ 0xae
 8006072:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006076:	689b      	ldr	r3, [r3, #8]
 8006078:	6839      	ldr	r1, [r7, #0]
 800607a:	6878      	ldr	r0, [r7, #4]
 800607c:	4798      	blx	r3
 800607e:	4603      	mov	r3, r0
 8006080:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8006082:	e004      	b.n	800608e <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8006084:	6839      	ldr	r1, [r7, #0]
 8006086:	6878      	ldr	r0, [r7, #4]
 8006088:	f000 fc03 	bl	8006892 <USBD_CtlError>
              break;
 800608c:	e000      	b.n	8006090 <USBD_StdEPReq+0x1c8>
              break;
 800608e:	bf00      	nop
          }
          break;
 8006090:	e0ab      	b.n	80061ea <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006098:	b2db      	uxtb	r3, r3
 800609a:	2b02      	cmp	r3, #2
 800609c:	d002      	beq.n	80060a4 <USBD_StdEPReq+0x1dc>
 800609e:	2b03      	cmp	r3, #3
 80060a0:	d032      	beq.n	8006108 <USBD_StdEPReq+0x240>
 80060a2:	e097      	b.n	80061d4 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80060a4:	7bbb      	ldrb	r3, [r7, #14]
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d007      	beq.n	80060ba <USBD_StdEPReq+0x1f2>
 80060aa:	7bbb      	ldrb	r3, [r7, #14]
 80060ac:	2b80      	cmp	r3, #128	@ 0x80
 80060ae:	d004      	beq.n	80060ba <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 80060b0:	6839      	ldr	r1, [r7, #0]
 80060b2:	6878      	ldr	r0, [r7, #4]
 80060b4:	f000 fbed 	bl	8006892 <USBD_CtlError>
                break;
 80060b8:	e091      	b.n	80061de <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80060ba:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80060be:	2b00      	cmp	r3, #0
 80060c0:	da0b      	bge.n	80060da <USBD_StdEPReq+0x212>
 80060c2:	7bbb      	ldrb	r3, [r7, #14]
 80060c4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80060c8:	4613      	mov	r3, r2
 80060ca:	009b      	lsls	r3, r3, #2
 80060cc:	4413      	add	r3, r2
 80060ce:	009b      	lsls	r3, r3, #2
 80060d0:	3310      	adds	r3, #16
 80060d2:	687a      	ldr	r2, [r7, #4]
 80060d4:	4413      	add	r3, r2
 80060d6:	3304      	adds	r3, #4
 80060d8:	e00b      	b.n	80060f2 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80060da:	7bbb      	ldrb	r3, [r7, #14]
 80060dc:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80060e0:	4613      	mov	r3, r2
 80060e2:	009b      	lsls	r3, r3, #2
 80060e4:	4413      	add	r3, r2
 80060e6:	009b      	lsls	r3, r3, #2
 80060e8:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80060ec:	687a      	ldr	r2, [r7, #4]
 80060ee:	4413      	add	r3, r2
 80060f0:	3304      	adds	r3, #4
 80060f2:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80060f4:	68bb      	ldr	r3, [r7, #8]
 80060f6:	2200      	movs	r2, #0
 80060f8:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80060fa:	68bb      	ldr	r3, [r7, #8]
 80060fc:	2202      	movs	r2, #2
 80060fe:	4619      	mov	r1, r3
 8006100:	6878      	ldr	r0, [r7, #4]
 8006102:	f000 fc43 	bl	800698c <USBD_CtlSendData>
              break;
 8006106:	e06a      	b.n	80061de <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8006108:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800610c:	2b00      	cmp	r3, #0
 800610e:	da11      	bge.n	8006134 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8006110:	7bbb      	ldrb	r3, [r7, #14]
 8006112:	f003 020f 	and.w	r2, r3, #15
 8006116:	6879      	ldr	r1, [r7, #4]
 8006118:	4613      	mov	r3, r2
 800611a:	009b      	lsls	r3, r3, #2
 800611c:	4413      	add	r3, r2
 800611e:	009b      	lsls	r3, r3, #2
 8006120:	440b      	add	r3, r1
 8006122:	3324      	adds	r3, #36	@ 0x24
 8006124:	881b      	ldrh	r3, [r3, #0]
 8006126:	2b00      	cmp	r3, #0
 8006128:	d117      	bne.n	800615a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800612a:	6839      	ldr	r1, [r7, #0]
 800612c:	6878      	ldr	r0, [r7, #4]
 800612e:	f000 fbb0 	bl	8006892 <USBD_CtlError>
                  break;
 8006132:	e054      	b.n	80061de <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8006134:	7bbb      	ldrb	r3, [r7, #14]
 8006136:	f003 020f 	and.w	r2, r3, #15
 800613a:	6879      	ldr	r1, [r7, #4]
 800613c:	4613      	mov	r3, r2
 800613e:	009b      	lsls	r3, r3, #2
 8006140:	4413      	add	r3, r2
 8006142:	009b      	lsls	r3, r3, #2
 8006144:	440b      	add	r3, r1
 8006146:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800614a:	881b      	ldrh	r3, [r3, #0]
 800614c:	2b00      	cmp	r3, #0
 800614e:	d104      	bne.n	800615a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8006150:	6839      	ldr	r1, [r7, #0]
 8006152:	6878      	ldr	r0, [r7, #4]
 8006154:	f000 fb9d 	bl	8006892 <USBD_CtlError>
                  break;
 8006158:	e041      	b.n	80061de <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800615a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800615e:	2b00      	cmp	r3, #0
 8006160:	da0b      	bge.n	800617a <USBD_StdEPReq+0x2b2>
 8006162:	7bbb      	ldrb	r3, [r7, #14]
 8006164:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006168:	4613      	mov	r3, r2
 800616a:	009b      	lsls	r3, r3, #2
 800616c:	4413      	add	r3, r2
 800616e:	009b      	lsls	r3, r3, #2
 8006170:	3310      	adds	r3, #16
 8006172:	687a      	ldr	r2, [r7, #4]
 8006174:	4413      	add	r3, r2
 8006176:	3304      	adds	r3, #4
 8006178:	e00b      	b.n	8006192 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800617a:	7bbb      	ldrb	r3, [r7, #14]
 800617c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006180:	4613      	mov	r3, r2
 8006182:	009b      	lsls	r3, r3, #2
 8006184:	4413      	add	r3, r2
 8006186:	009b      	lsls	r3, r3, #2
 8006188:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800618c:	687a      	ldr	r2, [r7, #4]
 800618e:	4413      	add	r3, r2
 8006190:	3304      	adds	r3, #4
 8006192:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8006194:	7bbb      	ldrb	r3, [r7, #14]
 8006196:	2b00      	cmp	r3, #0
 8006198:	d002      	beq.n	80061a0 <USBD_StdEPReq+0x2d8>
 800619a:	7bbb      	ldrb	r3, [r7, #14]
 800619c:	2b80      	cmp	r3, #128	@ 0x80
 800619e:	d103      	bne.n	80061a8 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 80061a0:	68bb      	ldr	r3, [r7, #8]
 80061a2:	2200      	movs	r2, #0
 80061a4:	601a      	str	r2, [r3, #0]
 80061a6:	e00e      	b.n	80061c6 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80061a8:	7bbb      	ldrb	r3, [r7, #14]
 80061aa:	4619      	mov	r1, r3
 80061ac:	6878      	ldr	r0, [r7, #4]
 80061ae:	f001 f87d 	bl	80072ac <USBD_LL_IsStallEP>
 80061b2:	4603      	mov	r3, r0
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d003      	beq.n	80061c0 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 80061b8:	68bb      	ldr	r3, [r7, #8]
 80061ba:	2201      	movs	r2, #1
 80061bc:	601a      	str	r2, [r3, #0]
 80061be:	e002      	b.n	80061c6 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 80061c0:	68bb      	ldr	r3, [r7, #8]
 80061c2:	2200      	movs	r2, #0
 80061c4:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80061c6:	68bb      	ldr	r3, [r7, #8]
 80061c8:	2202      	movs	r2, #2
 80061ca:	4619      	mov	r1, r3
 80061cc:	6878      	ldr	r0, [r7, #4]
 80061ce:	f000 fbdd 	bl	800698c <USBD_CtlSendData>
              break;
 80061d2:	e004      	b.n	80061de <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 80061d4:	6839      	ldr	r1, [r7, #0]
 80061d6:	6878      	ldr	r0, [r7, #4]
 80061d8:	f000 fb5b 	bl	8006892 <USBD_CtlError>
              break;
 80061dc:	bf00      	nop
          }
          break;
 80061de:	e004      	b.n	80061ea <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 80061e0:	6839      	ldr	r1, [r7, #0]
 80061e2:	6878      	ldr	r0, [r7, #4]
 80061e4:	f000 fb55 	bl	8006892 <USBD_CtlError>
          break;
 80061e8:	bf00      	nop
      }
      break;
 80061ea:	e005      	b.n	80061f8 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 80061ec:	6839      	ldr	r1, [r7, #0]
 80061ee:	6878      	ldr	r0, [r7, #4]
 80061f0:	f000 fb4f 	bl	8006892 <USBD_CtlError>
      break;
 80061f4:	e000      	b.n	80061f8 <USBD_StdEPReq+0x330>
      break;
 80061f6:	bf00      	nop
  }

  return ret;
 80061f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80061fa:	4618      	mov	r0, r3
 80061fc:	3710      	adds	r7, #16
 80061fe:	46bd      	mov	sp, r7
 8006200:	bd80      	pop	{r7, pc}
	...

08006204 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006204:	b580      	push	{r7, lr}
 8006206:	b084      	sub	sp, #16
 8006208:	af00      	add	r7, sp, #0
 800620a:	6078      	str	r0, [r7, #4]
 800620c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800620e:	2300      	movs	r3, #0
 8006210:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8006212:	2300      	movs	r3, #0
 8006214:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8006216:	2300      	movs	r3, #0
 8006218:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800621a:	683b      	ldr	r3, [r7, #0]
 800621c:	885b      	ldrh	r3, [r3, #2]
 800621e:	0a1b      	lsrs	r3, r3, #8
 8006220:	b29b      	uxth	r3, r3
 8006222:	3b01      	subs	r3, #1
 8006224:	2b06      	cmp	r3, #6
 8006226:	f200 8128 	bhi.w	800647a <USBD_GetDescriptor+0x276>
 800622a:	a201      	add	r2, pc, #4	@ (adr r2, 8006230 <USBD_GetDescriptor+0x2c>)
 800622c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006230:	0800624d 	.word	0x0800624d
 8006234:	08006265 	.word	0x08006265
 8006238:	080062a5 	.word	0x080062a5
 800623c:	0800647b 	.word	0x0800647b
 8006240:	0800647b 	.word	0x0800647b
 8006244:	0800641b 	.word	0x0800641b
 8006248:	08006447 	.word	0x08006447
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	687a      	ldr	r2, [r7, #4]
 8006256:	7c12      	ldrb	r2, [r2, #16]
 8006258:	f107 0108 	add.w	r1, r7, #8
 800625c:	4610      	mov	r0, r2
 800625e:	4798      	blx	r3
 8006260:	60f8      	str	r0, [r7, #12]
      break;
 8006262:	e112      	b.n	800648a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	7c1b      	ldrb	r3, [r3, #16]
 8006268:	2b00      	cmp	r3, #0
 800626a:	d10d      	bne.n	8006288 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006272:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006274:	f107 0208 	add.w	r2, r7, #8
 8006278:	4610      	mov	r0, r2
 800627a:	4798      	blx	r3
 800627c:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	3301      	adds	r3, #1
 8006282:	2202      	movs	r2, #2
 8006284:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8006286:	e100      	b.n	800648a <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800628e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006290:	f107 0208 	add.w	r2, r7, #8
 8006294:	4610      	mov	r0, r2
 8006296:	4798      	blx	r3
 8006298:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	3301      	adds	r3, #1
 800629e:	2202      	movs	r2, #2
 80062a0:	701a      	strb	r2, [r3, #0]
      break;
 80062a2:	e0f2      	b.n	800648a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80062a4:	683b      	ldr	r3, [r7, #0]
 80062a6:	885b      	ldrh	r3, [r3, #2]
 80062a8:	b2db      	uxtb	r3, r3
 80062aa:	2b05      	cmp	r3, #5
 80062ac:	f200 80ac 	bhi.w	8006408 <USBD_GetDescriptor+0x204>
 80062b0:	a201      	add	r2, pc, #4	@ (adr r2, 80062b8 <USBD_GetDescriptor+0xb4>)
 80062b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062b6:	bf00      	nop
 80062b8:	080062d1 	.word	0x080062d1
 80062bc:	08006305 	.word	0x08006305
 80062c0:	08006339 	.word	0x08006339
 80062c4:	0800636d 	.word	0x0800636d
 80062c8:	080063a1 	.word	0x080063a1
 80062cc:	080063d5 	.word	0x080063d5
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80062d6:	685b      	ldr	r3, [r3, #4]
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d00b      	beq.n	80062f4 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80062e2:	685b      	ldr	r3, [r3, #4]
 80062e4:	687a      	ldr	r2, [r7, #4]
 80062e6:	7c12      	ldrb	r2, [r2, #16]
 80062e8:	f107 0108 	add.w	r1, r7, #8
 80062ec:	4610      	mov	r0, r2
 80062ee:	4798      	blx	r3
 80062f0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80062f2:	e091      	b.n	8006418 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80062f4:	6839      	ldr	r1, [r7, #0]
 80062f6:	6878      	ldr	r0, [r7, #4]
 80062f8:	f000 facb 	bl	8006892 <USBD_CtlError>
            err++;
 80062fc:	7afb      	ldrb	r3, [r7, #11]
 80062fe:	3301      	adds	r3, #1
 8006300:	72fb      	strb	r3, [r7, #11]
          break;
 8006302:	e089      	b.n	8006418 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800630a:	689b      	ldr	r3, [r3, #8]
 800630c:	2b00      	cmp	r3, #0
 800630e:	d00b      	beq.n	8006328 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006316:	689b      	ldr	r3, [r3, #8]
 8006318:	687a      	ldr	r2, [r7, #4]
 800631a:	7c12      	ldrb	r2, [r2, #16]
 800631c:	f107 0108 	add.w	r1, r7, #8
 8006320:	4610      	mov	r0, r2
 8006322:	4798      	blx	r3
 8006324:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006326:	e077      	b.n	8006418 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006328:	6839      	ldr	r1, [r7, #0]
 800632a:	6878      	ldr	r0, [r7, #4]
 800632c:	f000 fab1 	bl	8006892 <USBD_CtlError>
            err++;
 8006330:	7afb      	ldrb	r3, [r7, #11]
 8006332:	3301      	adds	r3, #1
 8006334:	72fb      	strb	r3, [r7, #11]
          break;
 8006336:	e06f      	b.n	8006418 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800633e:	68db      	ldr	r3, [r3, #12]
 8006340:	2b00      	cmp	r3, #0
 8006342:	d00b      	beq.n	800635c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800634a:	68db      	ldr	r3, [r3, #12]
 800634c:	687a      	ldr	r2, [r7, #4]
 800634e:	7c12      	ldrb	r2, [r2, #16]
 8006350:	f107 0108 	add.w	r1, r7, #8
 8006354:	4610      	mov	r0, r2
 8006356:	4798      	blx	r3
 8006358:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800635a:	e05d      	b.n	8006418 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800635c:	6839      	ldr	r1, [r7, #0]
 800635e:	6878      	ldr	r0, [r7, #4]
 8006360:	f000 fa97 	bl	8006892 <USBD_CtlError>
            err++;
 8006364:	7afb      	ldrb	r3, [r7, #11]
 8006366:	3301      	adds	r3, #1
 8006368:	72fb      	strb	r3, [r7, #11]
          break;
 800636a:	e055      	b.n	8006418 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006372:	691b      	ldr	r3, [r3, #16]
 8006374:	2b00      	cmp	r3, #0
 8006376:	d00b      	beq.n	8006390 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800637e:	691b      	ldr	r3, [r3, #16]
 8006380:	687a      	ldr	r2, [r7, #4]
 8006382:	7c12      	ldrb	r2, [r2, #16]
 8006384:	f107 0108 	add.w	r1, r7, #8
 8006388:	4610      	mov	r0, r2
 800638a:	4798      	blx	r3
 800638c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800638e:	e043      	b.n	8006418 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006390:	6839      	ldr	r1, [r7, #0]
 8006392:	6878      	ldr	r0, [r7, #4]
 8006394:	f000 fa7d 	bl	8006892 <USBD_CtlError>
            err++;
 8006398:	7afb      	ldrb	r3, [r7, #11]
 800639a:	3301      	adds	r3, #1
 800639c:	72fb      	strb	r3, [r7, #11]
          break;
 800639e:	e03b      	b.n	8006418 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80063a6:	695b      	ldr	r3, [r3, #20]
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d00b      	beq.n	80063c4 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80063b2:	695b      	ldr	r3, [r3, #20]
 80063b4:	687a      	ldr	r2, [r7, #4]
 80063b6:	7c12      	ldrb	r2, [r2, #16]
 80063b8:	f107 0108 	add.w	r1, r7, #8
 80063bc:	4610      	mov	r0, r2
 80063be:	4798      	blx	r3
 80063c0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80063c2:	e029      	b.n	8006418 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80063c4:	6839      	ldr	r1, [r7, #0]
 80063c6:	6878      	ldr	r0, [r7, #4]
 80063c8:	f000 fa63 	bl	8006892 <USBD_CtlError>
            err++;
 80063cc:	7afb      	ldrb	r3, [r7, #11]
 80063ce:	3301      	adds	r3, #1
 80063d0:	72fb      	strb	r3, [r7, #11]
          break;
 80063d2:	e021      	b.n	8006418 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80063da:	699b      	ldr	r3, [r3, #24]
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d00b      	beq.n	80063f8 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80063e6:	699b      	ldr	r3, [r3, #24]
 80063e8:	687a      	ldr	r2, [r7, #4]
 80063ea:	7c12      	ldrb	r2, [r2, #16]
 80063ec:	f107 0108 	add.w	r1, r7, #8
 80063f0:	4610      	mov	r0, r2
 80063f2:	4798      	blx	r3
 80063f4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80063f6:	e00f      	b.n	8006418 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80063f8:	6839      	ldr	r1, [r7, #0]
 80063fa:	6878      	ldr	r0, [r7, #4]
 80063fc:	f000 fa49 	bl	8006892 <USBD_CtlError>
            err++;
 8006400:	7afb      	ldrb	r3, [r7, #11]
 8006402:	3301      	adds	r3, #1
 8006404:	72fb      	strb	r3, [r7, #11]
          break;
 8006406:	e007      	b.n	8006418 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8006408:	6839      	ldr	r1, [r7, #0]
 800640a:	6878      	ldr	r0, [r7, #4]
 800640c:	f000 fa41 	bl	8006892 <USBD_CtlError>
          err++;
 8006410:	7afb      	ldrb	r3, [r7, #11]
 8006412:	3301      	adds	r3, #1
 8006414:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8006416:	bf00      	nop
      }
      break;
 8006418:	e037      	b.n	800648a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	7c1b      	ldrb	r3, [r3, #16]
 800641e:	2b00      	cmp	r3, #0
 8006420:	d109      	bne.n	8006436 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006428:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800642a:	f107 0208 	add.w	r2, r7, #8
 800642e:	4610      	mov	r0, r2
 8006430:	4798      	blx	r3
 8006432:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006434:	e029      	b.n	800648a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8006436:	6839      	ldr	r1, [r7, #0]
 8006438:	6878      	ldr	r0, [r7, #4]
 800643a:	f000 fa2a 	bl	8006892 <USBD_CtlError>
        err++;
 800643e:	7afb      	ldrb	r3, [r7, #11]
 8006440:	3301      	adds	r3, #1
 8006442:	72fb      	strb	r3, [r7, #11]
      break;
 8006444:	e021      	b.n	800648a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	7c1b      	ldrb	r3, [r3, #16]
 800644a:	2b00      	cmp	r3, #0
 800644c:	d10d      	bne.n	800646a <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006454:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006456:	f107 0208 	add.w	r2, r7, #8
 800645a:	4610      	mov	r0, r2
 800645c:	4798      	blx	r3
 800645e:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	3301      	adds	r3, #1
 8006464:	2207      	movs	r2, #7
 8006466:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006468:	e00f      	b.n	800648a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800646a:	6839      	ldr	r1, [r7, #0]
 800646c:	6878      	ldr	r0, [r7, #4]
 800646e:	f000 fa10 	bl	8006892 <USBD_CtlError>
        err++;
 8006472:	7afb      	ldrb	r3, [r7, #11]
 8006474:	3301      	adds	r3, #1
 8006476:	72fb      	strb	r3, [r7, #11]
      break;
 8006478:	e007      	b.n	800648a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800647a:	6839      	ldr	r1, [r7, #0]
 800647c:	6878      	ldr	r0, [r7, #4]
 800647e:	f000 fa08 	bl	8006892 <USBD_CtlError>
      err++;
 8006482:	7afb      	ldrb	r3, [r7, #11]
 8006484:	3301      	adds	r3, #1
 8006486:	72fb      	strb	r3, [r7, #11]
      break;
 8006488:	bf00      	nop
  }

  if (err != 0U)
 800648a:	7afb      	ldrb	r3, [r7, #11]
 800648c:	2b00      	cmp	r3, #0
 800648e:	d11e      	bne.n	80064ce <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8006490:	683b      	ldr	r3, [r7, #0]
 8006492:	88db      	ldrh	r3, [r3, #6]
 8006494:	2b00      	cmp	r3, #0
 8006496:	d016      	beq.n	80064c6 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8006498:	893b      	ldrh	r3, [r7, #8]
 800649a:	2b00      	cmp	r3, #0
 800649c:	d00e      	beq.n	80064bc <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800649e:	683b      	ldr	r3, [r7, #0]
 80064a0:	88da      	ldrh	r2, [r3, #6]
 80064a2:	893b      	ldrh	r3, [r7, #8]
 80064a4:	4293      	cmp	r3, r2
 80064a6:	bf28      	it	cs
 80064a8:	4613      	movcs	r3, r2
 80064aa:	b29b      	uxth	r3, r3
 80064ac:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80064ae:	893b      	ldrh	r3, [r7, #8]
 80064b0:	461a      	mov	r2, r3
 80064b2:	68f9      	ldr	r1, [r7, #12]
 80064b4:	6878      	ldr	r0, [r7, #4]
 80064b6:	f000 fa69 	bl	800698c <USBD_CtlSendData>
 80064ba:	e009      	b.n	80064d0 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80064bc:	6839      	ldr	r1, [r7, #0]
 80064be:	6878      	ldr	r0, [r7, #4]
 80064c0:	f000 f9e7 	bl	8006892 <USBD_CtlError>
 80064c4:	e004      	b.n	80064d0 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80064c6:	6878      	ldr	r0, [r7, #4]
 80064c8:	f000 faba 	bl	8006a40 <USBD_CtlSendStatus>
 80064cc:	e000      	b.n	80064d0 <USBD_GetDescriptor+0x2cc>
    return;
 80064ce:	bf00      	nop
  }
}
 80064d0:	3710      	adds	r7, #16
 80064d2:	46bd      	mov	sp, r7
 80064d4:	bd80      	pop	{r7, pc}
 80064d6:	bf00      	nop

080064d8 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80064d8:	b580      	push	{r7, lr}
 80064da:	b084      	sub	sp, #16
 80064dc:	af00      	add	r7, sp, #0
 80064de:	6078      	str	r0, [r7, #4]
 80064e0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80064e2:	683b      	ldr	r3, [r7, #0]
 80064e4:	889b      	ldrh	r3, [r3, #4]
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d131      	bne.n	800654e <USBD_SetAddress+0x76>
 80064ea:	683b      	ldr	r3, [r7, #0]
 80064ec:	88db      	ldrh	r3, [r3, #6]
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d12d      	bne.n	800654e <USBD_SetAddress+0x76>
 80064f2:	683b      	ldr	r3, [r7, #0]
 80064f4:	885b      	ldrh	r3, [r3, #2]
 80064f6:	2b7f      	cmp	r3, #127	@ 0x7f
 80064f8:	d829      	bhi.n	800654e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80064fa:	683b      	ldr	r3, [r7, #0]
 80064fc:	885b      	ldrh	r3, [r3, #2]
 80064fe:	b2db      	uxtb	r3, r3
 8006500:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006504:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800650c:	b2db      	uxtb	r3, r3
 800650e:	2b03      	cmp	r3, #3
 8006510:	d104      	bne.n	800651c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8006512:	6839      	ldr	r1, [r7, #0]
 8006514:	6878      	ldr	r0, [r7, #4]
 8006516:	f000 f9bc 	bl	8006892 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800651a:	e01d      	b.n	8006558 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	7bfa      	ldrb	r2, [r7, #15]
 8006520:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8006524:	7bfb      	ldrb	r3, [r7, #15]
 8006526:	4619      	mov	r1, r3
 8006528:	6878      	ldr	r0, [r7, #4]
 800652a:	f000 feeb 	bl	8007304 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800652e:	6878      	ldr	r0, [r7, #4]
 8006530:	f000 fa86 	bl	8006a40 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8006534:	7bfb      	ldrb	r3, [r7, #15]
 8006536:	2b00      	cmp	r3, #0
 8006538:	d004      	beq.n	8006544 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	2202      	movs	r2, #2
 800653e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006542:	e009      	b.n	8006558 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	2201      	movs	r2, #1
 8006548:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800654c:	e004      	b.n	8006558 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800654e:	6839      	ldr	r1, [r7, #0]
 8006550:	6878      	ldr	r0, [r7, #4]
 8006552:	f000 f99e 	bl	8006892 <USBD_CtlError>
  }
}
 8006556:	bf00      	nop
 8006558:	bf00      	nop
 800655a:	3710      	adds	r7, #16
 800655c:	46bd      	mov	sp, r7
 800655e:	bd80      	pop	{r7, pc}

08006560 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006560:	b580      	push	{r7, lr}
 8006562:	b084      	sub	sp, #16
 8006564:	af00      	add	r7, sp, #0
 8006566:	6078      	str	r0, [r7, #4]
 8006568:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800656a:	2300      	movs	r3, #0
 800656c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800656e:	683b      	ldr	r3, [r7, #0]
 8006570:	885b      	ldrh	r3, [r3, #2]
 8006572:	b2da      	uxtb	r2, r3
 8006574:	4b4e      	ldr	r3, [pc, #312]	@ (80066b0 <USBD_SetConfig+0x150>)
 8006576:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8006578:	4b4d      	ldr	r3, [pc, #308]	@ (80066b0 <USBD_SetConfig+0x150>)
 800657a:	781b      	ldrb	r3, [r3, #0]
 800657c:	2b01      	cmp	r3, #1
 800657e:	d905      	bls.n	800658c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8006580:	6839      	ldr	r1, [r7, #0]
 8006582:	6878      	ldr	r0, [r7, #4]
 8006584:	f000 f985 	bl	8006892 <USBD_CtlError>
    return USBD_FAIL;
 8006588:	2303      	movs	r3, #3
 800658a:	e08c      	b.n	80066a6 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006592:	b2db      	uxtb	r3, r3
 8006594:	2b02      	cmp	r3, #2
 8006596:	d002      	beq.n	800659e <USBD_SetConfig+0x3e>
 8006598:	2b03      	cmp	r3, #3
 800659a:	d029      	beq.n	80065f0 <USBD_SetConfig+0x90>
 800659c:	e075      	b.n	800668a <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800659e:	4b44      	ldr	r3, [pc, #272]	@ (80066b0 <USBD_SetConfig+0x150>)
 80065a0:	781b      	ldrb	r3, [r3, #0]
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d020      	beq.n	80065e8 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 80065a6:	4b42      	ldr	r3, [pc, #264]	@ (80066b0 <USBD_SetConfig+0x150>)
 80065a8:	781b      	ldrb	r3, [r3, #0]
 80065aa:	461a      	mov	r2, r3
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80065b0:	4b3f      	ldr	r3, [pc, #252]	@ (80066b0 <USBD_SetConfig+0x150>)
 80065b2:	781b      	ldrb	r3, [r3, #0]
 80065b4:	4619      	mov	r1, r3
 80065b6:	6878      	ldr	r0, [r7, #4]
 80065b8:	f7fe ffe3 	bl	8005582 <USBD_SetClassConfig>
 80065bc:	4603      	mov	r3, r0
 80065be:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80065c0:	7bfb      	ldrb	r3, [r7, #15]
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d008      	beq.n	80065d8 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 80065c6:	6839      	ldr	r1, [r7, #0]
 80065c8:	6878      	ldr	r0, [r7, #4]
 80065ca:	f000 f962 	bl	8006892 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	2202      	movs	r2, #2
 80065d2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80065d6:	e065      	b.n	80066a4 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80065d8:	6878      	ldr	r0, [r7, #4]
 80065da:	f000 fa31 	bl	8006a40 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	2203      	movs	r2, #3
 80065e2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 80065e6:	e05d      	b.n	80066a4 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80065e8:	6878      	ldr	r0, [r7, #4]
 80065ea:	f000 fa29 	bl	8006a40 <USBD_CtlSendStatus>
      break;
 80065ee:	e059      	b.n	80066a4 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80065f0:	4b2f      	ldr	r3, [pc, #188]	@ (80066b0 <USBD_SetConfig+0x150>)
 80065f2:	781b      	ldrb	r3, [r3, #0]
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d112      	bne.n	800661e <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	2202      	movs	r2, #2
 80065fc:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8006600:	4b2b      	ldr	r3, [pc, #172]	@ (80066b0 <USBD_SetConfig+0x150>)
 8006602:	781b      	ldrb	r3, [r3, #0]
 8006604:	461a      	mov	r2, r3
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800660a:	4b29      	ldr	r3, [pc, #164]	@ (80066b0 <USBD_SetConfig+0x150>)
 800660c:	781b      	ldrb	r3, [r3, #0]
 800660e:	4619      	mov	r1, r3
 8006610:	6878      	ldr	r0, [r7, #4]
 8006612:	f7fe ffd2 	bl	80055ba <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8006616:	6878      	ldr	r0, [r7, #4]
 8006618:	f000 fa12 	bl	8006a40 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800661c:	e042      	b.n	80066a4 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800661e:	4b24      	ldr	r3, [pc, #144]	@ (80066b0 <USBD_SetConfig+0x150>)
 8006620:	781b      	ldrb	r3, [r3, #0]
 8006622:	461a      	mov	r2, r3
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	685b      	ldr	r3, [r3, #4]
 8006628:	429a      	cmp	r2, r3
 800662a:	d02a      	beq.n	8006682 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	685b      	ldr	r3, [r3, #4]
 8006630:	b2db      	uxtb	r3, r3
 8006632:	4619      	mov	r1, r3
 8006634:	6878      	ldr	r0, [r7, #4]
 8006636:	f7fe ffc0 	bl	80055ba <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800663a:	4b1d      	ldr	r3, [pc, #116]	@ (80066b0 <USBD_SetConfig+0x150>)
 800663c:	781b      	ldrb	r3, [r3, #0]
 800663e:	461a      	mov	r2, r3
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8006644:	4b1a      	ldr	r3, [pc, #104]	@ (80066b0 <USBD_SetConfig+0x150>)
 8006646:	781b      	ldrb	r3, [r3, #0]
 8006648:	4619      	mov	r1, r3
 800664a:	6878      	ldr	r0, [r7, #4]
 800664c:	f7fe ff99 	bl	8005582 <USBD_SetClassConfig>
 8006650:	4603      	mov	r3, r0
 8006652:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8006654:	7bfb      	ldrb	r3, [r7, #15]
 8006656:	2b00      	cmp	r3, #0
 8006658:	d00f      	beq.n	800667a <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800665a:	6839      	ldr	r1, [r7, #0]
 800665c:	6878      	ldr	r0, [r7, #4]
 800665e:	f000 f918 	bl	8006892 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	685b      	ldr	r3, [r3, #4]
 8006666:	b2db      	uxtb	r3, r3
 8006668:	4619      	mov	r1, r3
 800666a:	6878      	ldr	r0, [r7, #4]
 800666c:	f7fe ffa5 	bl	80055ba <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	2202      	movs	r2, #2
 8006674:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8006678:	e014      	b.n	80066a4 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800667a:	6878      	ldr	r0, [r7, #4]
 800667c:	f000 f9e0 	bl	8006a40 <USBD_CtlSendStatus>
      break;
 8006680:	e010      	b.n	80066a4 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8006682:	6878      	ldr	r0, [r7, #4]
 8006684:	f000 f9dc 	bl	8006a40 <USBD_CtlSendStatus>
      break;
 8006688:	e00c      	b.n	80066a4 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800668a:	6839      	ldr	r1, [r7, #0]
 800668c:	6878      	ldr	r0, [r7, #4]
 800668e:	f000 f900 	bl	8006892 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006692:	4b07      	ldr	r3, [pc, #28]	@ (80066b0 <USBD_SetConfig+0x150>)
 8006694:	781b      	ldrb	r3, [r3, #0]
 8006696:	4619      	mov	r1, r3
 8006698:	6878      	ldr	r0, [r7, #4]
 800669a:	f7fe ff8e 	bl	80055ba <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800669e:	2303      	movs	r3, #3
 80066a0:	73fb      	strb	r3, [r7, #15]
      break;
 80066a2:	bf00      	nop
  }

  return ret;
 80066a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80066a6:	4618      	mov	r0, r3
 80066a8:	3710      	adds	r7, #16
 80066aa:	46bd      	mov	sp, r7
 80066ac:	bd80      	pop	{r7, pc}
 80066ae:	bf00      	nop
 80066b0:	20000170 	.word	0x20000170

080066b4 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80066b4:	b580      	push	{r7, lr}
 80066b6:	b082      	sub	sp, #8
 80066b8:	af00      	add	r7, sp, #0
 80066ba:	6078      	str	r0, [r7, #4]
 80066bc:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80066be:	683b      	ldr	r3, [r7, #0]
 80066c0:	88db      	ldrh	r3, [r3, #6]
 80066c2:	2b01      	cmp	r3, #1
 80066c4:	d004      	beq.n	80066d0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80066c6:	6839      	ldr	r1, [r7, #0]
 80066c8:	6878      	ldr	r0, [r7, #4]
 80066ca:	f000 f8e2 	bl	8006892 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80066ce:	e023      	b.n	8006718 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80066d6:	b2db      	uxtb	r3, r3
 80066d8:	2b02      	cmp	r3, #2
 80066da:	dc02      	bgt.n	80066e2 <USBD_GetConfig+0x2e>
 80066dc:	2b00      	cmp	r3, #0
 80066de:	dc03      	bgt.n	80066e8 <USBD_GetConfig+0x34>
 80066e0:	e015      	b.n	800670e <USBD_GetConfig+0x5a>
 80066e2:	2b03      	cmp	r3, #3
 80066e4:	d00b      	beq.n	80066fe <USBD_GetConfig+0x4a>
 80066e6:	e012      	b.n	800670e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	2200      	movs	r2, #0
 80066ec:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	3308      	adds	r3, #8
 80066f2:	2201      	movs	r2, #1
 80066f4:	4619      	mov	r1, r3
 80066f6:	6878      	ldr	r0, [r7, #4]
 80066f8:	f000 f948 	bl	800698c <USBD_CtlSendData>
        break;
 80066fc:	e00c      	b.n	8006718 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	3304      	adds	r3, #4
 8006702:	2201      	movs	r2, #1
 8006704:	4619      	mov	r1, r3
 8006706:	6878      	ldr	r0, [r7, #4]
 8006708:	f000 f940 	bl	800698c <USBD_CtlSendData>
        break;
 800670c:	e004      	b.n	8006718 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800670e:	6839      	ldr	r1, [r7, #0]
 8006710:	6878      	ldr	r0, [r7, #4]
 8006712:	f000 f8be 	bl	8006892 <USBD_CtlError>
        break;
 8006716:	bf00      	nop
}
 8006718:	bf00      	nop
 800671a:	3708      	adds	r7, #8
 800671c:	46bd      	mov	sp, r7
 800671e:	bd80      	pop	{r7, pc}

08006720 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006720:	b580      	push	{r7, lr}
 8006722:	b082      	sub	sp, #8
 8006724:	af00      	add	r7, sp, #0
 8006726:	6078      	str	r0, [r7, #4]
 8006728:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006730:	b2db      	uxtb	r3, r3
 8006732:	3b01      	subs	r3, #1
 8006734:	2b02      	cmp	r3, #2
 8006736:	d81e      	bhi.n	8006776 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8006738:	683b      	ldr	r3, [r7, #0]
 800673a:	88db      	ldrh	r3, [r3, #6]
 800673c:	2b02      	cmp	r3, #2
 800673e:	d004      	beq.n	800674a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8006740:	6839      	ldr	r1, [r7, #0]
 8006742:	6878      	ldr	r0, [r7, #4]
 8006744:	f000 f8a5 	bl	8006892 <USBD_CtlError>
        break;
 8006748:	e01a      	b.n	8006780 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	2201      	movs	r2, #1
 800674e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8006756:	2b00      	cmp	r3, #0
 8006758:	d005      	beq.n	8006766 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	68db      	ldr	r3, [r3, #12]
 800675e:	f043 0202 	orr.w	r2, r3, #2
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	330c      	adds	r3, #12
 800676a:	2202      	movs	r2, #2
 800676c:	4619      	mov	r1, r3
 800676e:	6878      	ldr	r0, [r7, #4]
 8006770:	f000 f90c 	bl	800698c <USBD_CtlSendData>
      break;
 8006774:	e004      	b.n	8006780 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8006776:	6839      	ldr	r1, [r7, #0]
 8006778:	6878      	ldr	r0, [r7, #4]
 800677a:	f000 f88a 	bl	8006892 <USBD_CtlError>
      break;
 800677e:	bf00      	nop
  }
}
 8006780:	bf00      	nop
 8006782:	3708      	adds	r7, #8
 8006784:	46bd      	mov	sp, r7
 8006786:	bd80      	pop	{r7, pc}

08006788 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006788:	b580      	push	{r7, lr}
 800678a:	b082      	sub	sp, #8
 800678c:	af00      	add	r7, sp, #0
 800678e:	6078      	str	r0, [r7, #4]
 8006790:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006792:	683b      	ldr	r3, [r7, #0]
 8006794:	885b      	ldrh	r3, [r3, #2]
 8006796:	2b01      	cmp	r3, #1
 8006798:	d107      	bne.n	80067aa <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	2201      	movs	r2, #1
 800679e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80067a2:	6878      	ldr	r0, [r7, #4]
 80067a4:	f000 f94c 	bl	8006a40 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 80067a8:	e013      	b.n	80067d2 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 80067aa:	683b      	ldr	r3, [r7, #0]
 80067ac:	885b      	ldrh	r3, [r3, #2]
 80067ae:	2b02      	cmp	r3, #2
 80067b0:	d10b      	bne.n	80067ca <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 80067b2:	683b      	ldr	r3, [r7, #0]
 80067b4:	889b      	ldrh	r3, [r3, #4]
 80067b6:	0a1b      	lsrs	r3, r3, #8
 80067b8:	b29b      	uxth	r3, r3
 80067ba:	b2da      	uxtb	r2, r3
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 80067c2:	6878      	ldr	r0, [r7, #4]
 80067c4:	f000 f93c 	bl	8006a40 <USBD_CtlSendStatus>
}
 80067c8:	e003      	b.n	80067d2 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 80067ca:	6839      	ldr	r1, [r7, #0]
 80067cc:	6878      	ldr	r0, [r7, #4]
 80067ce:	f000 f860 	bl	8006892 <USBD_CtlError>
}
 80067d2:	bf00      	nop
 80067d4:	3708      	adds	r7, #8
 80067d6:	46bd      	mov	sp, r7
 80067d8:	bd80      	pop	{r7, pc}

080067da <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80067da:	b580      	push	{r7, lr}
 80067dc:	b082      	sub	sp, #8
 80067de:	af00      	add	r7, sp, #0
 80067e0:	6078      	str	r0, [r7, #4]
 80067e2:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80067ea:	b2db      	uxtb	r3, r3
 80067ec:	3b01      	subs	r3, #1
 80067ee:	2b02      	cmp	r3, #2
 80067f0:	d80b      	bhi.n	800680a <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80067f2:	683b      	ldr	r3, [r7, #0]
 80067f4:	885b      	ldrh	r3, [r3, #2]
 80067f6:	2b01      	cmp	r3, #1
 80067f8:	d10c      	bne.n	8006814 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	2200      	movs	r2, #0
 80067fe:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8006802:	6878      	ldr	r0, [r7, #4]
 8006804:	f000 f91c 	bl	8006a40 <USBD_CtlSendStatus>
      }
      break;
 8006808:	e004      	b.n	8006814 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800680a:	6839      	ldr	r1, [r7, #0]
 800680c:	6878      	ldr	r0, [r7, #4]
 800680e:	f000 f840 	bl	8006892 <USBD_CtlError>
      break;
 8006812:	e000      	b.n	8006816 <USBD_ClrFeature+0x3c>
      break;
 8006814:	bf00      	nop
  }
}
 8006816:	bf00      	nop
 8006818:	3708      	adds	r7, #8
 800681a:	46bd      	mov	sp, r7
 800681c:	bd80      	pop	{r7, pc}

0800681e <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800681e:	b580      	push	{r7, lr}
 8006820:	b084      	sub	sp, #16
 8006822:	af00      	add	r7, sp, #0
 8006824:	6078      	str	r0, [r7, #4]
 8006826:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8006828:	683b      	ldr	r3, [r7, #0]
 800682a:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	781a      	ldrb	r2, [r3, #0]
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	3301      	adds	r3, #1
 8006838:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	781a      	ldrb	r2, [r3, #0]
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	3301      	adds	r3, #1
 8006846:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8006848:	68f8      	ldr	r0, [r7, #12]
 800684a:	f7ff fa40 	bl	8005cce <SWAPBYTE>
 800684e:	4603      	mov	r3, r0
 8006850:	461a      	mov	r2, r3
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	3301      	adds	r3, #1
 800685a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	3301      	adds	r3, #1
 8006860:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8006862:	68f8      	ldr	r0, [r7, #12]
 8006864:	f7ff fa33 	bl	8005cce <SWAPBYTE>
 8006868:	4603      	mov	r3, r0
 800686a:	461a      	mov	r2, r3
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	3301      	adds	r3, #1
 8006874:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	3301      	adds	r3, #1
 800687a:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800687c:	68f8      	ldr	r0, [r7, #12]
 800687e:	f7ff fa26 	bl	8005cce <SWAPBYTE>
 8006882:	4603      	mov	r3, r0
 8006884:	461a      	mov	r2, r3
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	80da      	strh	r2, [r3, #6]
}
 800688a:	bf00      	nop
 800688c:	3710      	adds	r7, #16
 800688e:	46bd      	mov	sp, r7
 8006890:	bd80      	pop	{r7, pc}

08006892 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006892:	b580      	push	{r7, lr}
 8006894:	b082      	sub	sp, #8
 8006896:	af00      	add	r7, sp, #0
 8006898:	6078      	str	r0, [r7, #4]
 800689a:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800689c:	2180      	movs	r1, #128	@ 0x80
 800689e:	6878      	ldr	r0, [r7, #4]
 80068a0:	f000 fcc6 	bl	8007230 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80068a4:	2100      	movs	r1, #0
 80068a6:	6878      	ldr	r0, [r7, #4]
 80068a8:	f000 fcc2 	bl	8007230 <USBD_LL_StallEP>
}
 80068ac:	bf00      	nop
 80068ae:	3708      	adds	r7, #8
 80068b0:	46bd      	mov	sp, r7
 80068b2:	bd80      	pop	{r7, pc}

080068b4 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80068b4:	b580      	push	{r7, lr}
 80068b6:	b086      	sub	sp, #24
 80068b8:	af00      	add	r7, sp, #0
 80068ba:	60f8      	str	r0, [r7, #12]
 80068bc:	60b9      	str	r1, [r7, #8]
 80068be:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80068c0:	2300      	movs	r3, #0
 80068c2:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d042      	beq.n	8006950 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 80068ce:	6938      	ldr	r0, [r7, #16]
 80068d0:	f000 f842 	bl	8006958 <USBD_GetLen>
 80068d4:	4603      	mov	r3, r0
 80068d6:	3301      	adds	r3, #1
 80068d8:	005b      	lsls	r3, r3, #1
 80068da:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80068de:	d808      	bhi.n	80068f2 <USBD_GetString+0x3e>
 80068e0:	6938      	ldr	r0, [r7, #16]
 80068e2:	f000 f839 	bl	8006958 <USBD_GetLen>
 80068e6:	4603      	mov	r3, r0
 80068e8:	3301      	adds	r3, #1
 80068ea:	b29b      	uxth	r3, r3
 80068ec:	005b      	lsls	r3, r3, #1
 80068ee:	b29a      	uxth	r2, r3
 80068f0:	e001      	b.n	80068f6 <USBD_GetString+0x42>
 80068f2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80068fa:	7dfb      	ldrb	r3, [r7, #23]
 80068fc:	68ba      	ldr	r2, [r7, #8]
 80068fe:	4413      	add	r3, r2
 8006900:	687a      	ldr	r2, [r7, #4]
 8006902:	7812      	ldrb	r2, [r2, #0]
 8006904:	701a      	strb	r2, [r3, #0]
  idx++;
 8006906:	7dfb      	ldrb	r3, [r7, #23]
 8006908:	3301      	adds	r3, #1
 800690a:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800690c:	7dfb      	ldrb	r3, [r7, #23]
 800690e:	68ba      	ldr	r2, [r7, #8]
 8006910:	4413      	add	r3, r2
 8006912:	2203      	movs	r2, #3
 8006914:	701a      	strb	r2, [r3, #0]
  idx++;
 8006916:	7dfb      	ldrb	r3, [r7, #23]
 8006918:	3301      	adds	r3, #1
 800691a:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800691c:	e013      	b.n	8006946 <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 800691e:	7dfb      	ldrb	r3, [r7, #23]
 8006920:	68ba      	ldr	r2, [r7, #8]
 8006922:	4413      	add	r3, r2
 8006924:	693a      	ldr	r2, [r7, #16]
 8006926:	7812      	ldrb	r2, [r2, #0]
 8006928:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800692a:	693b      	ldr	r3, [r7, #16]
 800692c:	3301      	adds	r3, #1
 800692e:	613b      	str	r3, [r7, #16]
    idx++;
 8006930:	7dfb      	ldrb	r3, [r7, #23]
 8006932:	3301      	adds	r3, #1
 8006934:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8006936:	7dfb      	ldrb	r3, [r7, #23]
 8006938:	68ba      	ldr	r2, [r7, #8]
 800693a:	4413      	add	r3, r2
 800693c:	2200      	movs	r2, #0
 800693e:	701a      	strb	r2, [r3, #0]
    idx++;
 8006940:	7dfb      	ldrb	r3, [r7, #23]
 8006942:	3301      	adds	r3, #1
 8006944:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8006946:	693b      	ldr	r3, [r7, #16]
 8006948:	781b      	ldrb	r3, [r3, #0]
 800694a:	2b00      	cmp	r3, #0
 800694c:	d1e7      	bne.n	800691e <USBD_GetString+0x6a>
 800694e:	e000      	b.n	8006952 <USBD_GetString+0x9e>
    return;
 8006950:	bf00      	nop
  }
}
 8006952:	3718      	adds	r7, #24
 8006954:	46bd      	mov	sp, r7
 8006956:	bd80      	pop	{r7, pc}

08006958 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8006958:	b480      	push	{r7}
 800695a:	b085      	sub	sp, #20
 800695c:	af00      	add	r7, sp, #0
 800695e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8006960:	2300      	movs	r3, #0
 8006962:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8006968:	e005      	b.n	8006976 <USBD_GetLen+0x1e>
  {
    len++;
 800696a:	7bfb      	ldrb	r3, [r7, #15]
 800696c:	3301      	adds	r3, #1
 800696e:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8006970:	68bb      	ldr	r3, [r7, #8]
 8006972:	3301      	adds	r3, #1
 8006974:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8006976:	68bb      	ldr	r3, [r7, #8]
 8006978:	781b      	ldrb	r3, [r3, #0]
 800697a:	2b00      	cmp	r3, #0
 800697c:	d1f5      	bne.n	800696a <USBD_GetLen+0x12>
  }

  return len;
 800697e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006980:	4618      	mov	r0, r3
 8006982:	3714      	adds	r7, #20
 8006984:	46bd      	mov	sp, r7
 8006986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800698a:	4770      	bx	lr

0800698c <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800698c:	b580      	push	{r7, lr}
 800698e:	b084      	sub	sp, #16
 8006990:	af00      	add	r7, sp, #0
 8006992:	60f8      	str	r0, [r7, #12]
 8006994:	60b9      	str	r1, [r7, #8]
 8006996:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	2202      	movs	r2, #2
 800699c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	687a      	ldr	r2, [r7, #4]
 80069a4:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	687a      	ldr	r2, [r7, #4]
 80069aa:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	68ba      	ldr	r2, [r7, #8]
 80069b0:	2100      	movs	r1, #0
 80069b2:	68f8      	ldr	r0, [r7, #12]
 80069b4:	f000 fcc5 	bl	8007342 <USBD_LL_Transmit>

  return USBD_OK;
 80069b8:	2300      	movs	r3, #0
}
 80069ba:	4618      	mov	r0, r3
 80069bc:	3710      	adds	r7, #16
 80069be:	46bd      	mov	sp, r7
 80069c0:	bd80      	pop	{r7, pc}

080069c2 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80069c2:	b580      	push	{r7, lr}
 80069c4:	b084      	sub	sp, #16
 80069c6:	af00      	add	r7, sp, #0
 80069c8:	60f8      	str	r0, [r7, #12]
 80069ca:	60b9      	str	r1, [r7, #8]
 80069cc:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	68ba      	ldr	r2, [r7, #8]
 80069d2:	2100      	movs	r1, #0
 80069d4:	68f8      	ldr	r0, [r7, #12]
 80069d6:	f000 fcb4 	bl	8007342 <USBD_LL_Transmit>

  return USBD_OK;
 80069da:	2300      	movs	r3, #0
}
 80069dc:	4618      	mov	r0, r3
 80069de:	3710      	adds	r7, #16
 80069e0:	46bd      	mov	sp, r7
 80069e2:	bd80      	pop	{r7, pc}

080069e4 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80069e4:	b580      	push	{r7, lr}
 80069e6:	b084      	sub	sp, #16
 80069e8:	af00      	add	r7, sp, #0
 80069ea:	60f8      	str	r0, [r7, #12]
 80069ec:	60b9      	str	r1, [r7, #8]
 80069ee:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	2203      	movs	r2, #3
 80069f4:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	687a      	ldr	r2, [r7, #4]
 80069fc:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	687a      	ldr	r2, [r7, #4]
 8006a04:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	68ba      	ldr	r2, [r7, #8]
 8006a0c:	2100      	movs	r1, #0
 8006a0e:	68f8      	ldr	r0, [r7, #12]
 8006a10:	f000 fcb8 	bl	8007384 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006a14:	2300      	movs	r3, #0
}
 8006a16:	4618      	mov	r0, r3
 8006a18:	3710      	adds	r7, #16
 8006a1a:	46bd      	mov	sp, r7
 8006a1c:	bd80      	pop	{r7, pc}

08006a1e <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8006a1e:	b580      	push	{r7, lr}
 8006a20:	b084      	sub	sp, #16
 8006a22:	af00      	add	r7, sp, #0
 8006a24:	60f8      	str	r0, [r7, #12]
 8006a26:	60b9      	str	r1, [r7, #8]
 8006a28:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	68ba      	ldr	r2, [r7, #8]
 8006a2e:	2100      	movs	r1, #0
 8006a30:	68f8      	ldr	r0, [r7, #12]
 8006a32:	f000 fca7 	bl	8007384 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006a36:	2300      	movs	r3, #0
}
 8006a38:	4618      	mov	r0, r3
 8006a3a:	3710      	adds	r7, #16
 8006a3c:	46bd      	mov	sp, r7
 8006a3e:	bd80      	pop	{r7, pc}

08006a40 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8006a40:	b580      	push	{r7, lr}
 8006a42:	b082      	sub	sp, #8
 8006a44:	af00      	add	r7, sp, #0
 8006a46:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	2204      	movs	r2, #4
 8006a4c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8006a50:	2300      	movs	r3, #0
 8006a52:	2200      	movs	r2, #0
 8006a54:	2100      	movs	r1, #0
 8006a56:	6878      	ldr	r0, [r7, #4]
 8006a58:	f000 fc73 	bl	8007342 <USBD_LL_Transmit>

  return USBD_OK;
 8006a5c:	2300      	movs	r3, #0
}
 8006a5e:	4618      	mov	r0, r3
 8006a60:	3708      	adds	r7, #8
 8006a62:	46bd      	mov	sp, r7
 8006a64:	bd80      	pop	{r7, pc}

08006a66 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8006a66:	b580      	push	{r7, lr}
 8006a68:	b082      	sub	sp, #8
 8006a6a:	af00      	add	r7, sp, #0
 8006a6c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	2205      	movs	r2, #5
 8006a72:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006a76:	2300      	movs	r3, #0
 8006a78:	2200      	movs	r2, #0
 8006a7a:	2100      	movs	r1, #0
 8006a7c:	6878      	ldr	r0, [r7, #4]
 8006a7e:	f000 fc81 	bl	8007384 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006a82:	2300      	movs	r3, #0
}
 8006a84:	4618      	mov	r0, r3
 8006a86:	3708      	adds	r7, #8
 8006a88:	46bd      	mov	sp, r7
 8006a8a:	bd80      	pop	{r7, pc}

08006a8c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8006a8c:	b580      	push	{r7, lr}
 8006a8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8006a90:	2200      	movs	r2, #0
 8006a92:	4912      	ldr	r1, [pc, #72]	@ (8006adc <MX_USB_DEVICE_Init+0x50>)
 8006a94:	4812      	ldr	r0, [pc, #72]	@ (8006ae0 <MX_USB_DEVICE_Init+0x54>)
 8006a96:	f7fe fcf7 	bl	8005488 <USBD_Init>
 8006a9a:	4603      	mov	r3, r0
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d001      	beq.n	8006aa4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8006aa0:	f7fa f859 	bl	8000b56 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8006aa4:	490f      	ldr	r1, [pc, #60]	@ (8006ae4 <MX_USB_DEVICE_Init+0x58>)
 8006aa6:	480e      	ldr	r0, [pc, #56]	@ (8006ae0 <MX_USB_DEVICE_Init+0x54>)
 8006aa8:	f7fe fd1e 	bl	80054e8 <USBD_RegisterClass>
 8006aac:	4603      	mov	r3, r0
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d001      	beq.n	8006ab6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8006ab2:	f7fa f850 	bl	8000b56 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8006ab6:	490c      	ldr	r1, [pc, #48]	@ (8006ae8 <MX_USB_DEVICE_Init+0x5c>)
 8006ab8:	4809      	ldr	r0, [pc, #36]	@ (8006ae0 <MX_USB_DEVICE_Init+0x54>)
 8006aba:	f7fe fc55 	bl	8005368 <USBD_CDC_RegisterInterface>
 8006abe:	4603      	mov	r3, r0
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d001      	beq.n	8006ac8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8006ac4:	f7fa f847 	bl	8000b56 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8006ac8:	4805      	ldr	r0, [pc, #20]	@ (8006ae0 <MX_USB_DEVICE_Init+0x54>)
 8006aca:	f7fe fd43 	bl	8005554 <USBD_Start>
 8006ace:	4603      	mov	r3, r0
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d001      	beq.n	8006ad8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8006ad4:	f7fa f83f 	bl	8000b56 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8006ad8:	bf00      	nop
 8006ada:	bd80      	pop	{r7, pc}
 8006adc:	200000ac 	.word	0x200000ac
 8006ae0:	20000174 	.word	0x20000174
 8006ae4:	20000018 	.word	0x20000018
 8006ae8:	20000098 	.word	0x20000098

08006aec <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8006aec:	b580      	push	{r7, lr}
 8006aee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8006af0:	2200      	movs	r2, #0
 8006af2:	4905      	ldr	r1, [pc, #20]	@ (8006b08 <CDC_Init_FS+0x1c>)
 8006af4:	4805      	ldr	r0, [pc, #20]	@ (8006b0c <CDC_Init_FS+0x20>)
 8006af6:	f7fe fc51 	bl	800539c <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8006afa:	4905      	ldr	r1, [pc, #20]	@ (8006b10 <CDC_Init_FS+0x24>)
 8006afc:	4803      	ldr	r0, [pc, #12]	@ (8006b0c <CDC_Init_FS+0x20>)
 8006afe:	f7fe fc6f 	bl	80053e0 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8006b02:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8006b04:	4618      	mov	r0, r3
 8006b06:	bd80      	pop	{r7, pc}
 8006b08:	20000c50 	.word	0x20000c50
 8006b0c:	20000174 	.word	0x20000174
 8006b10:	20000450 	.word	0x20000450

08006b14 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8006b14:	b480      	push	{r7}
 8006b16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8006b18:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8006b1a:	4618      	mov	r0, r3
 8006b1c:	46bd      	mov	sp, r7
 8006b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b22:	4770      	bx	lr

08006b24 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8006b24:	b480      	push	{r7}
 8006b26:	b083      	sub	sp, #12
 8006b28:	af00      	add	r7, sp, #0
 8006b2a:	4603      	mov	r3, r0
 8006b2c:	6039      	str	r1, [r7, #0]
 8006b2e:	71fb      	strb	r3, [r7, #7]
 8006b30:	4613      	mov	r3, r2
 8006b32:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8006b34:	79fb      	ldrb	r3, [r7, #7]
 8006b36:	2b23      	cmp	r3, #35	@ 0x23
 8006b38:	d84a      	bhi.n	8006bd0 <CDC_Control_FS+0xac>
 8006b3a:	a201      	add	r2, pc, #4	@ (adr r2, 8006b40 <CDC_Control_FS+0x1c>)
 8006b3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b40:	08006bd1 	.word	0x08006bd1
 8006b44:	08006bd1 	.word	0x08006bd1
 8006b48:	08006bd1 	.word	0x08006bd1
 8006b4c:	08006bd1 	.word	0x08006bd1
 8006b50:	08006bd1 	.word	0x08006bd1
 8006b54:	08006bd1 	.word	0x08006bd1
 8006b58:	08006bd1 	.word	0x08006bd1
 8006b5c:	08006bd1 	.word	0x08006bd1
 8006b60:	08006bd1 	.word	0x08006bd1
 8006b64:	08006bd1 	.word	0x08006bd1
 8006b68:	08006bd1 	.word	0x08006bd1
 8006b6c:	08006bd1 	.word	0x08006bd1
 8006b70:	08006bd1 	.word	0x08006bd1
 8006b74:	08006bd1 	.word	0x08006bd1
 8006b78:	08006bd1 	.word	0x08006bd1
 8006b7c:	08006bd1 	.word	0x08006bd1
 8006b80:	08006bd1 	.word	0x08006bd1
 8006b84:	08006bd1 	.word	0x08006bd1
 8006b88:	08006bd1 	.word	0x08006bd1
 8006b8c:	08006bd1 	.word	0x08006bd1
 8006b90:	08006bd1 	.word	0x08006bd1
 8006b94:	08006bd1 	.word	0x08006bd1
 8006b98:	08006bd1 	.word	0x08006bd1
 8006b9c:	08006bd1 	.word	0x08006bd1
 8006ba0:	08006bd1 	.word	0x08006bd1
 8006ba4:	08006bd1 	.word	0x08006bd1
 8006ba8:	08006bd1 	.word	0x08006bd1
 8006bac:	08006bd1 	.word	0x08006bd1
 8006bb0:	08006bd1 	.word	0x08006bd1
 8006bb4:	08006bd1 	.word	0x08006bd1
 8006bb8:	08006bd1 	.word	0x08006bd1
 8006bbc:	08006bd1 	.word	0x08006bd1
 8006bc0:	08006bd1 	.word	0x08006bd1
 8006bc4:	08006bd1 	.word	0x08006bd1
 8006bc8:	08006bd1 	.word	0x08006bd1
 8006bcc:	08006bd1 	.word	0x08006bd1
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8006bd0:	bf00      	nop
  }

  return (USBD_OK);
 8006bd2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8006bd4:	4618      	mov	r0, r3
 8006bd6:	370c      	adds	r7, #12
 8006bd8:	46bd      	mov	sp, r7
 8006bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bde:	4770      	bx	lr

08006be0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8006be0:	b580      	push	{r7, lr}
 8006be2:	b082      	sub	sp, #8
 8006be4:	af00      	add	r7, sp, #0
 8006be6:	6078      	str	r0, [r7, #4]
 8006be8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8006bea:	6879      	ldr	r1, [r7, #4]
 8006bec:	4805      	ldr	r0, [pc, #20]	@ (8006c04 <CDC_Receive_FS+0x24>)
 8006bee:	f7fe fbf7 	bl	80053e0 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8006bf2:	4804      	ldr	r0, [pc, #16]	@ (8006c04 <CDC_Receive_FS+0x24>)
 8006bf4:	f7fe fc12 	bl	800541c <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8006bf8:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8006bfa:	4618      	mov	r0, r3
 8006bfc:	3708      	adds	r7, #8
 8006bfe:	46bd      	mov	sp, r7
 8006c00:	bd80      	pop	{r7, pc}
 8006c02:	bf00      	nop
 8006c04:	20000174 	.word	0x20000174

08006c08 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8006c08:	b480      	push	{r7}
 8006c0a:	b087      	sub	sp, #28
 8006c0c:	af00      	add	r7, sp, #0
 8006c0e:	60f8      	str	r0, [r7, #12]
 8006c10:	60b9      	str	r1, [r7, #8]
 8006c12:	4613      	mov	r3, r2
 8006c14:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8006c16:	2300      	movs	r3, #0
 8006c18:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8006c1a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006c1e:	4618      	mov	r0, r3
 8006c20:	371c      	adds	r7, #28
 8006c22:	46bd      	mov	sp, r7
 8006c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c28:	4770      	bx	lr
	...

08006c2c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006c2c:	b480      	push	{r7}
 8006c2e:	b083      	sub	sp, #12
 8006c30:	af00      	add	r7, sp, #0
 8006c32:	4603      	mov	r3, r0
 8006c34:	6039      	str	r1, [r7, #0]
 8006c36:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8006c38:	683b      	ldr	r3, [r7, #0]
 8006c3a:	2212      	movs	r2, #18
 8006c3c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8006c3e:	4b03      	ldr	r3, [pc, #12]	@ (8006c4c <USBD_FS_DeviceDescriptor+0x20>)
}
 8006c40:	4618      	mov	r0, r3
 8006c42:	370c      	adds	r7, #12
 8006c44:	46bd      	mov	sp, r7
 8006c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c4a:	4770      	bx	lr
 8006c4c:	200000c8 	.word	0x200000c8

08006c50 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006c50:	b480      	push	{r7}
 8006c52:	b083      	sub	sp, #12
 8006c54:	af00      	add	r7, sp, #0
 8006c56:	4603      	mov	r3, r0
 8006c58:	6039      	str	r1, [r7, #0]
 8006c5a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8006c5c:	683b      	ldr	r3, [r7, #0]
 8006c5e:	2204      	movs	r2, #4
 8006c60:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8006c62:	4b03      	ldr	r3, [pc, #12]	@ (8006c70 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8006c64:	4618      	mov	r0, r3
 8006c66:	370c      	adds	r7, #12
 8006c68:	46bd      	mov	sp, r7
 8006c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c6e:	4770      	bx	lr
 8006c70:	200000dc 	.word	0x200000dc

08006c74 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006c74:	b580      	push	{r7, lr}
 8006c76:	b082      	sub	sp, #8
 8006c78:	af00      	add	r7, sp, #0
 8006c7a:	4603      	mov	r3, r0
 8006c7c:	6039      	str	r1, [r7, #0]
 8006c7e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8006c80:	79fb      	ldrb	r3, [r7, #7]
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d105      	bne.n	8006c92 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8006c86:	683a      	ldr	r2, [r7, #0]
 8006c88:	4907      	ldr	r1, [pc, #28]	@ (8006ca8 <USBD_FS_ProductStrDescriptor+0x34>)
 8006c8a:	4808      	ldr	r0, [pc, #32]	@ (8006cac <USBD_FS_ProductStrDescriptor+0x38>)
 8006c8c:	f7ff fe12 	bl	80068b4 <USBD_GetString>
 8006c90:	e004      	b.n	8006c9c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8006c92:	683a      	ldr	r2, [r7, #0]
 8006c94:	4904      	ldr	r1, [pc, #16]	@ (8006ca8 <USBD_FS_ProductStrDescriptor+0x34>)
 8006c96:	4805      	ldr	r0, [pc, #20]	@ (8006cac <USBD_FS_ProductStrDescriptor+0x38>)
 8006c98:	f7ff fe0c 	bl	80068b4 <USBD_GetString>
  }
  return USBD_StrDesc;
 8006c9c:	4b02      	ldr	r3, [pc, #8]	@ (8006ca8 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8006c9e:	4618      	mov	r0, r3
 8006ca0:	3708      	adds	r7, #8
 8006ca2:	46bd      	mov	sp, r7
 8006ca4:	bd80      	pop	{r7, pc}
 8006ca6:	bf00      	nop
 8006ca8:	20001450 	.word	0x20001450
 8006cac:	080086a8 	.word	0x080086a8

08006cb0 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006cb0:	b580      	push	{r7, lr}
 8006cb2:	b082      	sub	sp, #8
 8006cb4:	af00      	add	r7, sp, #0
 8006cb6:	4603      	mov	r3, r0
 8006cb8:	6039      	str	r1, [r7, #0]
 8006cba:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8006cbc:	683a      	ldr	r2, [r7, #0]
 8006cbe:	4904      	ldr	r1, [pc, #16]	@ (8006cd0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8006cc0:	4804      	ldr	r0, [pc, #16]	@ (8006cd4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8006cc2:	f7ff fdf7 	bl	80068b4 <USBD_GetString>
  return USBD_StrDesc;
 8006cc6:	4b02      	ldr	r3, [pc, #8]	@ (8006cd0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8006cc8:	4618      	mov	r0, r3
 8006cca:	3708      	adds	r7, #8
 8006ccc:	46bd      	mov	sp, r7
 8006cce:	bd80      	pop	{r7, pc}
 8006cd0:	20001450 	.word	0x20001450
 8006cd4:	080086c0 	.word	0x080086c0

08006cd8 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006cd8:	b580      	push	{r7, lr}
 8006cda:	b082      	sub	sp, #8
 8006cdc:	af00      	add	r7, sp, #0
 8006cde:	4603      	mov	r3, r0
 8006ce0:	6039      	str	r1, [r7, #0]
 8006ce2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8006ce4:	683b      	ldr	r3, [r7, #0]
 8006ce6:	221a      	movs	r2, #26
 8006ce8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8006cea:	f000 f843 	bl	8006d74 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8006cee:	4b02      	ldr	r3, [pc, #8]	@ (8006cf8 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8006cf0:	4618      	mov	r0, r3
 8006cf2:	3708      	adds	r7, #8
 8006cf4:	46bd      	mov	sp, r7
 8006cf6:	bd80      	pop	{r7, pc}
 8006cf8:	200000e0 	.word	0x200000e0

08006cfc <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006cfc:	b580      	push	{r7, lr}
 8006cfe:	b082      	sub	sp, #8
 8006d00:	af00      	add	r7, sp, #0
 8006d02:	4603      	mov	r3, r0
 8006d04:	6039      	str	r1, [r7, #0]
 8006d06:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8006d08:	79fb      	ldrb	r3, [r7, #7]
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d105      	bne.n	8006d1a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8006d0e:	683a      	ldr	r2, [r7, #0]
 8006d10:	4907      	ldr	r1, [pc, #28]	@ (8006d30 <USBD_FS_ConfigStrDescriptor+0x34>)
 8006d12:	4808      	ldr	r0, [pc, #32]	@ (8006d34 <USBD_FS_ConfigStrDescriptor+0x38>)
 8006d14:	f7ff fdce 	bl	80068b4 <USBD_GetString>
 8006d18:	e004      	b.n	8006d24 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8006d1a:	683a      	ldr	r2, [r7, #0]
 8006d1c:	4904      	ldr	r1, [pc, #16]	@ (8006d30 <USBD_FS_ConfigStrDescriptor+0x34>)
 8006d1e:	4805      	ldr	r0, [pc, #20]	@ (8006d34 <USBD_FS_ConfigStrDescriptor+0x38>)
 8006d20:	f7ff fdc8 	bl	80068b4 <USBD_GetString>
  }
  return USBD_StrDesc;
 8006d24:	4b02      	ldr	r3, [pc, #8]	@ (8006d30 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8006d26:	4618      	mov	r0, r3
 8006d28:	3708      	adds	r7, #8
 8006d2a:	46bd      	mov	sp, r7
 8006d2c:	bd80      	pop	{r7, pc}
 8006d2e:	bf00      	nop
 8006d30:	20001450 	.word	0x20001450
 8006d34:	080086d4 	.word	0x080086d4

08006d38 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006d38:	b580      	push	{r7, lr}
 8006d3a:	b082      	sub	sp, #8
 8006d3c:	af00      	add	r7, sp, #0
 8006d3e:	4603      	mov	r3, r0
 8006d40:	6039      	str	r1, [r7, #0]
 8006d42:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8006d44:	79fb      	ldrb	r3, [r7, #7]
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d105      	bne.n	8006d56 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8006d4a:	683a      	ldr	r2, [r7, #0]
 8006d4c:	4907      	ldr	r1, [pc, #28]	@ (8006d6c <USBD_FS_InterfaceStrDescriptor+0x34>)
 8006d4e:	4808      	ldr	r0, [pc, #32]	@ (8006d70 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8006d50:	f7ff fdb0 	bl	80068b4 <USBD_GetString>
 8006d54:	e004      	b.n	8006d60 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8006d56:	683a      	ldr	r2, [r7, #0]
 8006d58:	4904      	ldr	r1, [pc, #16]	@ (8006d6c <USBD_FS_InterfaceStrDescriptor+0x34>)
 8006d5a:	4805      	ldr	r0, [pc, #20]	@ (8006d70 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8006d5c:	f7ff fdaa 	bl	80068b4 <USBD_GetString>
  }
  return USBD_StrDesc;
 8006d60:	4b02      	ldr	r3, [pc, #8]	@ (8006d6c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8006d62:	4618      	mov	r0, r3
 8006d64:	3708      	adds	r7, #8
 8006d66:	46bd      	mov	sp, r7
 8006d68:	bd80      	pop	{r7, pc}
 8006d6a:	bf00      	nop
 8006d6c:	20001450 	.word	0x20001450
 8006d70:	080086e0 	.word	0x080086e0

08006d74 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8006d74:	b580      	push	{r7, lr}
 8006d76:	b084      	sub	sp, #16
 8006d78:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8006d7a:	4b0f      	ldr	r3, [pc, #60]	@ (8006db8 <Get_SerialNum+0x44>)
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8006d80:	4b0e      	ldr	r3, [pc, #56]	@ (8006dbc <Get_SerialNum+0x48>)
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8006d86:	4b0e      	ldr	r3, [pc, #56]	@ (8006dc0 <Get_SerialNum+0x4c>)
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8006d8c:	68fa      	ldr	r2, [r7, #12]
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	4413      	add	r3, r2
 8006d92:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d009      	beq.n	8006dae <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8006d9a:	2208      	movs	r2, #8
 8006d9c:	4909      	ldr	r1, [pc, #36]	@ (8006dc4 <Get_SerialNum+0x50>)
 8006d9e:	68f8      	ldr	r0, [r7, #12]
 8006da0:	f000 f814 	bl	8006dcc <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8006da4:	2204      	movs	r2, #4
 8006da6:	4908      	ldr	r1, [pc, #32]	@ (8006dc8 <Get_SerialNum+0x54>)
 8006da8:	68b8      	ldr	r0, [r7, #8]
 8006daa:	f000 f80f 	bl	8006dcc <IntToUnicode>
  }
}
 8006dae:	bf00      	nop
 8006db0:	3710      	adds	r7, #16
 8006db2:	46bd      	mov	sp, r7
 8006db4:	bd80      	pop	{r7, pc}
 8006db6:	bf00      	nop
 8006db8:	1fff7a10 	.word	0x1fff7a10
 8006dbc:	1fff7a14 	.word	0x1fff7a14
 8006dc0:	1fff7a18 	.word	0x1fff7a18
 8006dc4:	200000e2 	.word	0x200000e2
 8006dc8:	200000f2 	.word	0x200000f2

08006dcc <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8006dcc:	b480      	push	{r7}
 8006dce:	b087      	sub	sp, #28
 8006dd0:	af00      	add	r7, sp, #0
 8006dd2:	60f8      	str	r0, [r7, #12]
 8006dd4:	60b9      	str	r1, [r7, #8]
 8006dd6:	4613      	mov	r3, r2
 8006dd8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8006dda:	2300      	movs	r3, #0
 8006ddc:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8006dde:	2300      	movs	r3, #0
 8006de0:	75fb      	strb	r3, [r7, #23]
 8006de2:	e027      	b.n	8006e34 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	0f1b      	lsrs	r3, r3, #28
 8006de8:	2b09      	cmp	r3, #9
 8006dea:	d80b      	bhi.n	8006e04 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	0f1b      	lsrs	r3, r3, #28
 8006df0:	b2da      	uxtb	r2, r3
 8006df2:	7dfb      	ldrb	r3, [r7, #23]
 8006df4:	005b      	lsls	r3, r3, #1
 8006df6:	4619      	mov	r1, r3
 8006df8:	68bb      	ldr	r3, [r7, #8]
 8006dfa:	440b      	add	r3, r1
 8006dfc:	3230      	adds	r2, #48	@ 0x30
 8006dfe:	b2d2      	uxtb	r2, r2
 8006e00:	701a      	strb	r2, [r3, #0]
 8006e02:	e00a      	b.n	8006e1a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	0f1b      	lsrs	r3, r3, #28
 8006e08:	b2da      	uxtb	r2, r3
 8006e0a:	7dfb      	ldrb	r3, [r7, #23]
 8006e0c:	005b      	lsls	r3, r3, #1
 8006e0e:	4619      	mov	r1, r3
 8006e10:	68bb      	ldr	r3, [r7, #8]
 8006e12:	440b      	add	r3, r1
 8006e14:	3237      	adds	r2, #55	@ 0x37
 8006e16:	b2d2      	uxtb	r2, r2
 8006e18:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	011b      	lsls	r3, r3, #4
 8006e1e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8006e20:	7dfb      	ldrb	r3, [r7, #23]
 8006e22:	005b      	lsls	r3, r3, #1
 8006e24:	3301      	adds	r3, #1
 8006e26:	68ba      	ldr	r2, [r7, #8]
 8006e28:	4413      	add	r3, r2
 8006e2a:	2200      	movs	r2, #0
 8006e2c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8006e2e:	7dfb      	ldrb	r3, [r7, #23]
 8006e30:	3301      	adds	r3, #1
 8006e32:	75fb      	strb	r3, [r7, #23]
 8006e34:	7dfa      	ldrb	r2, [r7, #23]
 8006e36:	79fb      	ldrb	r3, [r7, #7]
 8006e38:	429a      	cmp	r2, r3
 8006e3a:	d3d3      	bcc.n	8006de4 <IntToUnicode+0x18>
  }
}
 8006e3c:	bf00      	nop
 8006e3e:	bf00      	nop
 8006e40:	371c      	adds	r7, #28
 8006e42:	46bd      	mov	sp, r7
 8006e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e48:	4770      	bx	lr
	...

08006e4c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8006e4c:	b580      	push	{r7, lr}
 8006e4e:	b08a      	sub	sp, #40	@ 0x28
 8006e50:	af00      	add	r7, sp, #0
 8006e52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006e54:	f107 0314 	add.w	r3, r7, #20
 8006e58:	2200      	movs	r2, #0
 8006e5a:	601a      	str	r2, [r3, #0]
 8006e5c:	605a      	str	r2, [r3, #4]
 8006e5e:	609a      	str	r2, [r3, #8]
 8006e60:	60da      	str	r2, [r3, #12]
 8006e62:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006e6c:	d13a      	bne.n	8006ee4 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006e6e:	2300      	movs	r3, #0
 8006e70:	613b      	str	r3, [r7, #16]
 8006e72:	4b1e      	ldr	r3, [pc, #120]	@ (8006eec <HAL_PCD_MspInit+0xa0>)
 8006e74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006e76:	4a1d      	ldr	r2, [pc, #116]	@ (8006eec <HAL_PCD_MspInit+0xa0>)
 8006e78:	f043 0301 	orr.w	r3, r3, #1
 8006e7c:	6313      	str	r3, [r2, #48]	@ 0x30
 8006e7e:	4b1b      	ldr	r3, [pc, #108]	@ (8006eec <HAL_PCD_MspInit+0xa0>)
 8006e80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006e82:	f003 0301 	and.w	r3, r3, #1
 8006e86:	613b      	str	r3, [r7, #16]
 8006e88:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8006e8a:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8006e8e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006e90:	2302      	movs	r3, #2
 8006e92:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006e94:	2300      	movs	r3, #0
 8006e96:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006e98:	2303      	movs	r3, #3
 8006e9a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8006e9c:	230a      	movs	r3, #10
 8006e9e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006ea0:	f107 0314 	add.w	r3, r7, #20
 8006ea4:	4619      	mov	r1, r3
 8006ea6:	4812      	ldr	r0, [pc, #72]	@ (8006ef0 <HAL_PCD_MspInit+0xa4>)
 8006ea8:	f7fa f91e 	bl	80010e8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8006eac:	4b0f      	ldr	r3, [pc, #60]	@ (8006eec <HAL_PCD_MspInit+0xa0>)
 8006eae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006eb0:	4a0e      	ldr	r2, [pc, #56]	@ (8006eec <HAL_PCD_MspInit+0xa0>)
 8006eb2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006eb6:	6353      	str	r3, [r2, #52]	@ 0x34
 8006eb8:	2300      	movs	r3, #0
 8006eba:	60fb      	str	r3, [r7, #12]
 8006ebc:	4b0b      	ldr	r3, [pc, #44]	@ (8006eec <HAL_PCD_MspInit+0xa0>)
 8006ebe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006ec0:	4a0a      	ldr	r2, [pc, #40]	@ (8006eec <HAL_PCD_MspInit+0xa0>)
 8006ec2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8006ec6:	6453      	str	r3, [r2, #68]	@ 0x44
 8006ec8:	4b08      	ldr	r3, [pc, #32]	@ (8006eec <HAL_PCD_MspInit+0xa0>)
 8006eca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006ecc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006ed0:	60fb      	str	r3, [r7, #12]
 8006ed2:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8006ed4:	2200      	movs	r2, #0
 8006ed6:	2100      	movs	r1, #0
 8006ed8:	2043      	movs	r0, #67	@ 0x43
 8006eda:	f7fa f8ce 	bl	800107a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8006ede:	2043      	movs	r0, #67	@ 0x43
 8006ee0:	f7fa f8e7 	bl	80010b2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8006ee4:	bf00      	nop
 8006ee6:	3728      	adds	r7, #40	@ 0x28
 8006ee8:	46bd      	mov	sp, r7
 8006eea:	bd80      	pop	{r7, pc}
 8006eec:	40023800 	.word	0x40023800
 8006ef0:	40020000 	.word	0x40020000

08006ef4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006ef4:	b580      	push	{r7, lr}
 8006ef6:	b082      	sub	sp, #8
 8006ef8:	af00      	add	r7, sp, #0
 8006efa:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8006f08:	4619      	mov	r1, r3
 8006f0a:	4610      	mov	r0, r2
 8006f0c:	f7fe fb6f 	bl	80055ee <USBD_LL_SetupStage>
}
 8006f10:	bf00      	nop
 8006f12:	3708      	adds	r7, #8
 8006f14:	46bd      	mov	sp, r7
 8006f16:	bd80      	pop	{r7, pc}

08006f18 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006f18:	b580      	push	{r7, lr}
 8006f1a:	b082      	sub	sp, #8
 8006f1c:	af00      	add	r7, sp, #0
 8006f1e:	6078      	str	r0, [r7, #4]
 8006f20:	460b      	mov	r3, r1
 8006f22:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8006f2a:	78fa      	ldrb	r2, [r7, #3]
 8006f2c:	6879      	ldr	r1, [r7, #4]
 8006f2e:	4613      	mov	r3, r2
 8006f30:	00db      	lsls	r3, r3, #3
 8006f32:	4413      	add	r3, r2
 8006f34:	009b      	lsls	r3, r3, #2
 8006f36:	440b      	add	r3, r1
 8006f38:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8006f3c:	681a      	ldr	r2, [r3, #0]
 8006f3e:	78fb      	ldrb	r3, [r7, #3]
 8006f40:	4619      	mov	r1, r3
 8006f42:	f7fe fba9 	bl	8005698 <USBD_LL_DataOutStage>
}
 8006f46:	bf00      	nop
 8006f48:	3708      	adds	r7, #8
 8006f4a:	46bd      	mov	sp, r7
 8006f4c:	bd80      	pop	{r7, pc}

08006f4e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006f4e:	b580      	push	{r7, lr}
 8006f50:	b082      	sub	sp, #8
 8006f52:	af00      	add	r7, sp, #0
 8006f54:	6078      	str	r0, [r7, #4]
 8006f56:	460b      	mov	r3, r1
 8006f58:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8006f60:	78fa      	ldrb	r2, [r7, #3]
 8006f62:	6879      	ldr	r1, [r7, #4]
 8006f64:	4613      	mov	r3, r2
 8006f66:	00db      	lsls	r3, r3, #3
 8006f68:	4413      	add	r3, r2
 8006f6a:	009b      	lsls	r3, r3, #2
 8006f6c:	440b      	add	r3, r1
 8006f6e:	3320      	adds	r3, #32
 8006f70:	681a      	ldr	r2, [r3, #0]
 8006f72:	78fb      	ldrb	r3, [r7, #3]
 8006f74:	4619      	mov	r1, r3
 8006f76:	f7fe fc42 	bl	80057fe <USBD_LL_DataInStage>
}
 8006f7a:	bf00      	nop
 8006f7c:	3708      	adds	r7, #8
 8006f7e:	46bd      	mov	sp, r7
 8006f80:	bd80      	pop	{r7, pc}

08006f82 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006f82:	b580      	push	{r7, lr}
 8006f84:	b082      	sub	sp, #8
 8006f86:	af00      	add	r7, sp, #0
 8006f88:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8006f90:	4618      	mov	r0, r3
 8006f92:	f7fe fd7c 	bl	8005a8e <USBD_LL_SOF>
}
 8006f96:	bf00      	nop
 8006f98:	3708      	adds	r7, #8
 8006f9a:	46bd      	mov	sp, r7
 8006f9c:	bd80      	pop	{r7, pc}

08006f9e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006f9e:	b580      	push	{r7, lr}
 8006fa0:	b084      	sub	sp, #16
 8006fa2:	af00      	add	r7, sp, #0
 8006fa4:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8006fa6:	2301      	movs	r3, #1
 8006fa8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	79db      	ldrb	r3, [r3, #7]
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d102      	bne.n	8006fb8 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8006fb2:	2300      	movs	r3, #0
 8006fb4:	73fb      	strb	r3, [r7, #15]
 8006fb6:	e008      	b.n	8006fca <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	79db      	ldrb	r3, [r3, #7]
 8006fbc:	2b02      	cmp	r3, #2
 8006fbe:	d102      	bne.n	8006fc6 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8006fc0:	2301      	movs	r3, #1
 8006fc2:	73fb      	strb	r3, [r7, #15]
 8006fc4:	e001      	b.n	8006fca <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8006fc6:	f7f9 fdc6 	bl	8000b56 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8006fd0:	7bfa      	ldrb	r2, [r7, #15]
 8006fd2:	4611      	mov	r1, r2
 8006fd4:	4618      	mov	r0, r3
 8006fd6:	f7fe fd16 	bl	8005a06 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8006fe0:	4618      	mov	r0, r3
 8006fe2:	f7fe fcbe 	bl	8005962 <USBD_LL_Reset>
}
 8006fe6:	bf00      	nop
 8006fe8:	3710      	adds	r7, #16
 8006fea:	46bd      	mov	sp, r7
 8006fec:	bd80      	pop	{r7, pc}
	...

08006ff0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006ff0:	b580      	push	{r7, lr}
 8006ff2:	b082      	sub	sp, #8
 8006ff4:	af00      	add	r7, sp, #0
 8006ff6:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8006ffe:	4618      	mov	r0, r3
 8007000:	f7fe fd11 	bl	8005a26 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	687a      	ldr	r2, [r7, #4]
 8007010:	6812      	ldr	r2, [r2, #0]
 8007012:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8007016:	f043 0301 	orr.w	r3, r3, #1
 800701a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	7adb      	ldrb	r3, [r3, #11]
 8007020:	2b00      	cmp	r3, #0
 8007022:	d005      	beq.n	8007030 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007024:	4b04      	ldr	r3, [pc, #16]	@ (8007038 <HAL_PCD_SuspendCallback+0x48>)
 8007026:	691b      	ldr	r3, [r3, #16]
 8007028:	4a03      	ldr	r2, [pc, #12]	@ (8007038 <HAL_PCD_SuspendCallback+0x48>)
 800702a:	f043 0306 	orr.w	r3, r3, #6
 800702e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8007030:	bf00      	nop
 8007032:	3708      	adds	r7, #8
 8007034:	46bd      	mov	sp, r7
 8007036:	bd80      	pop	{r7, pc}
 8007038:	e000ed00 	.word	0xe000ed00

0800703c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800703c:	b580      	push	{r7, lr}
 800703e:	b082      	sub	sp, #8
 8007040:	af00      	add	r7, sp, #0
 8007042:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800704a:	4618      	mov	r0, r3
 800704c:	f7fe fd07 	bl	8005a5e <USBD_LL_Resume>
}
 8007050:	bf00      	nop
 8007052:	3708      	adds	r7, #8
 8007054:	46bd      	mov	sp, r7
 8007056:	bd80      	pop	{r7, pc}

08007058 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007058:	b580      	push	{r7, lr}
 800705a:	b082      	sub	sp, #8
 800705c:	af00      	add	r7, sp, #0
 800705e:	6078      	str	r0, [r7, #4]
 8007060:	460b      	mov	r3, r1
 8007062:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800706a:	78fa      	ldrb	r2, [r7, #3]
 800706c:	4611      	mov	r1, r2
 800706e:	4618      	mov	r0, r3
 8007070:	f7fe fd5f 	bl	8005b32 <USBD_LL_IsoOUTIncomplete>
}
 8007074:	bf00      	nop
 8007076:	3708      	adds	r7, #8
 8007078:	46bd      	mov	sp, r7
 800707a:	bd80      	pop	{r7, pc}

0800707c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800707c:	b580      	push	{r7, lr}
 800707e:	b082      	sub	sp, #8
 8007080:	af00      	add	r7, sp, #0
 8007082:	6078      	str	r0, [r7, #4]
 8007084:	460b      	mov	r3, r1
 8007086:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800708e:	78fa      	ldrb	r2, [r7, #3]
 8007090:	4611      	mov	r1, r2
 8007092:	4618      	mov	r0, r3
 8007094:	f7fe fd1b 	bl	8005ace <USBD_LL_IsoINIncomplete>
}
 8007098:	bf00      	nop
 800709a:	3708      	adds	r7, #8
 800709c:	46bd      	mov	sp, r7
 800709e:	bd80      	pop	{r7, pc}

080070a0 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80070a0:	b580      	push	{r7, lr}
 80070a2:	b082      	sub	sp, #8
 80070a4:	af00      	add	r7, sp, #0
 80070a6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80070ae:	4618      	mov	r0, r3
 80070b0:	f7fe fd71 	bl	8005b96 <USBD_LL_DevConnected>
}
 80070b4:	bf00      	nop
 80070b6:	3708      	adds	r7, #8
 80070b8:	46bd      	mov	sp, r7
 80070ba:	bd80      	pop	{r7, pc}

080070bc <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80070bc:	b580      	push	{r7, lr}
 80070be:	b082      	sub	sp, #8
 80070c0:	af00      	add	r7, sp, #0
 80070c2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80070ca:	4618      	mov	r0, r3
 80070cc:	f7fe fd6e 	bl	8005bac <USBD_LL_DevDisconnected>
}
 80070d0:	bf00      	nop
 80070d2:	3708      	adds	r7, #8
 80070d4:	46bd      	mov	sp, r7
 80070d6:	bd80      	pop	{r7, pc}

080070d8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80070d8:	b580      	push	{r7, lr}
 80070da:	b082      	sub	sp, #8
 80070dc:	af00      	add	r7, sp, #0
 80070de:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	781b      	ldrb	r3, [r3, #0]
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d13c      	bne.n	8007162 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80070e8:	4a20      	ldr	r2, [pc, #128]	@ (800716c <USBD_LL_Init+0x94>)
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	4a1e      	ldr	r2, [pc, #120]	@ (800716c <USBD_LL_Init+0x94>)
 80070f4:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80070f8:	4b1c      	ldr	r3, [pc, #112]	@ (800716c <USBD_LL_Init+0x94>)
 80070fa:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80070fe:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8007100:	4b1a      	ldr	r3, [pc, #104]	@ (800716c <USBD_LL_Init+0x94>)
 8007102:	2204      	movs	r2, #4
 8007104:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8007106:	4b19      	ldr	r3, [pc, #100]	@ (800716c <USBD_LL_Init+0x94>)
 8007108:	2202      	movs	r2, #2
 800710a:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800710c:	4b17      	ldr	r3, [pc, #92]	@ (800716c <USBD_LL_Init+0x94>)
 800710e:	2200      	movs	r2, #0
 8007110:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8007112:	4b16      	ldr	r3, [pc, #88]	@ (800716c <USBD_LL_Init+0x94>)
 8007114:	2202      	movs	r2, #2
 8007116:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8007118:	4b14      	ldr	r3, [pc, #80]	@ (800716c <USBD_LL_Init+0x94>)
 800711a:	2200      	movs	r2, #0
 800711c:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800711e:	4b13      	ldr	r3, [pc, #76]	@ (800716c <USBD_LL_Init+0x94>)
 8007120:	2200      	movs	r2, #0
 8007122:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8007124:	4b11      	ldr	r3, [pc, #68]	@ (800716c <USBD_LL_Init+0x94>)
 8007126:	2200      	movs	r2, #0
 8007128:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800712a:	4b10      	ldr	r3, [pc, #64]	@ (800716c <USBD_LL_Init+0x94>)
 800712c:	2200      	movs	r2, #0
 800712e:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8007130:	4b0e      	ldr	r3, [pc, #56]	@ (800716c <USBD_LL_Init+0x94>)
 8007132:	2200      	movs	r2, #0
 8007134:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8007136:	480d      	ldr	r0, [pc, #52]	@ (800716c <USBD_LL_Init+0x94>)
 8007138:	f7fa f972 	bl	8001420 <HAL_PCD_Init>
 800713c:	4603      	mov	r3, r0
 800713e:	2b00      	cmp	r3, #0
 8007140:	d001      	beq.n	8007146 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8007142:	f7f9 fd08 	bl	8000b56 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8007146:	2180      	movs	r1, #128	@ 0x80
 8007148:	4808      	ldr	r0, [pc, #32]	@ (800716c <USBD_LL_Init+0x94>)
 800714a:	f7fb fb9e 	bl	800288a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800714e:	2240      	movs	r2, #64	@ 0x40
 8007150:	2100      	movs	r1, #0
 8007152:	4806      	ldr	r0, [pc, #24]	@ (800716c <USBD_LL_Init+0x94>)
 8007154:	f7fb fb52 	bl	80027fc <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8007158:	2280      	movs	r2, #128	@ 0x80
 800715a:	2101      	movs	r1, #1
 800715c:	4803      	ldr	r0, [pc, #12]	@ (800716c <USBD_LL_Init+0x94>)
 800715e:	f7fb fb4d 	bl	80027fc <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8007162:	2300      	movs	r3, #0
}
 8007164:	4618      	mov	r0, r3
 8007166:	3708      	adds	r7, #8
 8007168:	46bd      	mov	sp, r7
 800716a:	bd80      	pop	{r7, pc}
 800716c:	20001650 	.word	0x20001650

08007170 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8007170:	b580      	push	{r7, lr}
 8007172:	b084      	sub	sp, #16
 8007174:	af00      	add	r7, sp, #0
 8007176:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007178:	2300      	movs	r3, #0
 800717a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800717c:	2300      	movs	r3, #0
 800717e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8007186:	4618      	mov	r0, r3
 8007188:	f7fa fa59 	bl	800163e <HAL_PCD_Start>
 800718c:	4603      	mov	r3, r0
 800718e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007190:	7bfb      	ldrb	r3, [r7, #15]
 8007192:	4618      	mov	r0, r3
 8007194:	f000 f942 	bl	800741c <USBD_Get_USB_Status>
 8007198:	4603      	mov	r3, r0
 800719a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800719c:	7bbb      	ldrb	r3, [r7, #14]
}
 800719e:	4618      	mov	r0, r3
 80071a0:	3710      	adds	r7, #16
 80071a2:	46bd      	mov	sp, r7
 80071a4:	bd80      	pop	{r7, pc}

080071a6 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80071a6:	b580      	push	{r7, lr}
 80071a8:	b084      	sub	sp, #16
 80071aa:	af00      	add	r7, sp, #0
 80071ac:	6078      	str	r0, [r7, #4]
 80071ae:	4608      	mov	r0, r1
 80071b0:	4611      	mov	r1, r2
 80071b2:	461a      	mov	r2, r3
 80071b4:	4603      	mov	r3, r0
 80071b6:	70fb      	strb	r3, [r7, #3]
 80071b8:	460b      	mov	r3, r1
 80071ba:	70bb      	strb	r3, [r7, #2]
 80071bc:	4613      	mov	r3, r2
 80071be:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80071c0:	2300      	movs	r3, #0
 80071c2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80071c4:	2300      	movs	r3, #0
 80071c6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 80071ce:	78bb      	ldrb	r3, [r7, #2]
 80071d0:	883a      	ldrh	r2, [r7, #0]
 80071d2:	78f9      	ldrb	r1, [r7, #3]
 80071d4:	f7fa ff2d 	bl	8002032 <HAL_PCD_EP_Open>
 80071d8:	4603      	mov	r3, r0
 80071da:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80071dc:	7bfb      	ldrb	r3, [r7, #15]
 80071de:	4618      	mov	r0, r3
 80071e0:	f000 f91c 	bl	800741c <USBD_Get_USB_Status>
 80071e4:	4603      	mov	r3, r0
 80071e6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80071e8:	7bbb      	ldrb	r3, [r7, #14]
}
 80071ea:	4618      	mov	r0, r3
 80071ec:	3710      	adds	r7, #16
 80071ee:	46bd      	mov	sp, r7
 80071f0:	bd80      	pop	{r7, pc}

080071f2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80071f2:	b580      	push	{r7, lr}
 80071f4:	b084      	sub	sp, #16
 80071f6:	af00      	add	r7, sp, #0
 80071f8:	6078      	str	r0, [r7, #4]
 80071fa:	460b      	mov	r3, r1
 80071fc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80071fe:	2300      	movs	r3, #0
 8007200:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007202:	2300      	movs	r3, #0
 8007204:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800720c:	78fa      	ldrb	r2, [r7, #3]
 800720e:	4611      	mov	r1, r2
 8007210:	4618      	mov	r0, r3
 8007212:	f7fa ff78 	bl	8002106 <HAL_PCD_EP_Close>
 8007216:	4603      	mov	r3, r0
 8007218:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800721a:	7bfb      	ldrb	r3, [r7, #15]
 800721c:	4618      	mov	r0, r3
 800721e:	f000 f8fd 	bl	800741c <USBD_Get_USB_Status>
 8007222:	4603      	mov	r3, r0
 8007224:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007226:	7bbb      	ldrb	r3, [r7, #14]
}
 8007228:	4618      	mov	r0, r3
 800722a:	3710      	adds	r7, #16
 800722c:	46bd      	mov	sp, r7
 800722e:	bd80      	pop	{r7, pc}

08007230 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007230:	b580      	push	{r7, lr}
 8007232:	b084      	sub	sp, #16
 8007234:	af00      	add	r7, sp, #0
 8007236:	6078      	str	r0, [r7, #4]
 8007238:	460b      	mov	r3, r1
 800723a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800723c:	2300      	movs	r3, #0
 800723e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007240:	2300      	movs	r3, #0
 8007242:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800724a:	78fa      	ldrb	r2, [r7, #3]
 800724c:	4611      	mov	r1, r2
 800724e:	4618      	mov	r0, r3
 8007250:	f7fb f830 	bl	80022b4 <HAL_PCD_EP_SetStall>
 8007254:	4603      	mov	r3, r0
 8007256:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007258:	7bfb      	ldrb	r3, [r7, #15]
 800725a:	4618      	mov	r0, r3
 800725c:	f000 f8de 	bl	800741c <USBD_Get_USB_Status>
 8007260:	4603      	mov	r3, r0
 8007262:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007264:	7bbb      	ldrb	r3, [r7, #14]
}
 8007266:	4618      	mov	r0, r3
 8007268:	3710      	adds	r7, #16
 800726a:	46bd      	mov	sp, r7
 800726c:	bd80      	pop	{r7, pc}

0800726e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800726e:	b580      	push	{r7, lr}
 8007270:	b084      	sub	sp, #16
 8007272:	af00      	add	r7, sp, #0
 8007274:	6078      	str	r0, [r7, #4]
 8007276:	460b      	mov	r3, r1
 8007278:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800727a:	2300      	movs	r3, #0
 800727c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800727e:	2300      	movs	r3, #0
 8007280:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8007288:	78fa      	ldrb	r2, [r7, #3]
 800728a:	4611      	mov	r1, r2
 800728c:	4618      	mov	r0, r3
 800728e:	f7fb f874 	bl	800237a <HAL_PCD_EP_ClrStall>
 8007292:	4603      	mov	r3, r0
 8007294:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007296:	7bfb      	ldrb	r3, [r7, #15]
 8007298:	4618      	mov	r0, r3
 800729a:	f000 f8bf 	bl	800741c <USBD_Get_USB_Status>
 800729e:	4603      	mov	r3, r0
 80072a0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80072a2:	7bbb      	ldrb	r3, [r7, #14]
}
 80072a4:	4618      	mov	r0, r3
 80072a6:	3710      	adds	r7, #16
 80072a8:	46bd      	mov	sp, r7
 80072aa:	bd80      	pop	{r7, pc}

080072ac <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80072ac:	b480      	push	{r7}
 80072ae:	b085      	sub	sp, #20
 80072b0:	af00      	add	r7, sp, #0
 80072b2:	6078      	str	r0, [r7, #4]
 80072b4:	460b      	mov	r3, r1
 80072b6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80072be:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80072c0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	da0b      	bge.n	80072e0 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80072c8:	78fb      	ldrb	r3, [r7, #3]
 80072ca:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80072ce:	68f9      	ldr	r1, [r7, #12]
 80072d0:	4613      	mov	r3, r2
 80072d2:	00db      	lsls	r3, r3, #3
 80072d4:	4413      	add	r3, r2
 80072d6:	009b      	lsls	r3, r3, #2
 80072d8:	440b      	add	r3, r1
 80072da:	3316      	adds	r3, #22
 80072dc:	781b      	ldrb	r3, [r3, #0]
 80072de:	e00b      	b.n	80072f8 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80072e0:	78fb      	ldrb	r3, [r7, #3]
 80072e2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80072e6:	68f9      	ldr	r1, [r7, #12]
 80072e8:	4613      	mov	r3, r2
 80072ea:	00db      	lsls	r3, r3, #3
 80072ec:	4413      	add	r3, r2
 80072ee:	009b      	lsls	r3, r3, #2
 80072f0:	440b      	add	r3, r1
 80072f2:	f203 2356 	addw	r3, r3, #598	@ 0x256
 80072f6:	781b      	ldrb	r3, [r3, #0]
  }
}
 80072f8:	4618      	mov	r0, r3
 80072fa:	3714      	adds	r7, #20
 80072fc:	46bd      	mov	sp, r7
 80072fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007302:	4770      	bx	lr

08007304 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8007304:	b580      	push	{r7, lr}
 8007306:	b084      	sub	sp, #16
 8007308:	af00      	add	r7, sp, #0
 800730a:	6078      	str	r0, [r7, #4]
 800730c:	460b      	mov	r3, r1
 800730e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007310:	2300      	movs	r3, #0
 8007312:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007314:	2300      	movs	r3, #0
 8007316:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800731e:	78fa      	ldrb	r2, [r7, #3]
 8007320:	4611      	mov	r1, r2
 8007322:	4618      	mov	r0, r3
 8007324:	f7fa fe61 	bl	8001fea <HAL_PCD_SetAddress>
 8007328:	4603      	mov	r3, r0
 800732a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800732c:	7bfb      	ldrb	r3, [r7, #15]
 800732e:	4618      	mov	r0, r3
 8007330:	f000 f874 	bl	800741c <USBD_Get_USB_Status>
 8007334:	4603      	mov	r3, r0
 8007336:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007338:	7bbb      	ldrb	r3, [r7, #14]
}
 800733a:	4618      	mov	r0, r3
 800733c:	3710      	adds	r7, #16
 800733e:	46bd      	mov	sp, r7
 8007340:	bd80      	pop	{r7, pc}

08007342 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007342:	b580      	push	{r7, lr}
 8007344:	b086      	sub	sp, #24
 8007346:	af00      	add	r7, sp, #0
 8007348:	60f8      	str	r0, [r7, #12]
 800734a:	607a      	str	r2, [r7, #4]
 800734c:	603b      	str	r3, [r7, #0]
 800734e:	460b      	mov	r3, r1
 8007350:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007352:	2300      	movs	r3, #0
 8007354:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007356:	2300      	movs	r3, #0
 8007358:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8007360:	7af9      	ldrb	r1, [r7, #11]
 8007362:	683b      	ldr	r3, [r7, #0]
 8007364:	687a      	ldr	r2, [r7, #4]
 8007366:	f7fa ff6b 	bl	8002240 <HAL_PCD_EP_Transmit>
 800736a:	4603      	mov	r3, r0
 800736c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800736e:	7dfb      	ldrb	r3, [r7, #23]
 8007370:	4618      	mov	r0, r3
 8007372:	f000 f853 	bl	800741c <USBD_Get_USB_Status>
 8007376:	4603      	mov	r3, r0
 8007378:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800737a:	7dbb      	ldrb	r3, [r7, #22]
}
 800737c:	4618      	mov	r0, r3
 800737e:	3718      	adds	r7, #24
 8007380:	46bd      	mov	sp, r7
 8007382:	bd80      	pop	{r7, pc}

08007384 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007384:	b580      	push	{r7, lr}
 8007386:	b086      	sub	sp, #24
 8007388:	af00      	add	r7, sp, #0
 800738a:	60f8      	str	r0, [r7, #12]
 800738c:	607a      	str	r2, [r7, #4]
 800738e:	603b      	str	r3, [r7, #0]
 8007390:	460b      	mov	r3, r1
 8007392:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007394:	2300      	movs	r3, #0
 8007396:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007398:	2300      	movs	r3, #0
 800739a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 80073a2:	7af9      	ldrb	r1, [r7, #11]
 80073a4:	683b      	ldr	r3, [r7, #0]
 80073a6:	687a      	ldr	r2, [r7, #4]
 80073a8:	f7fa fef7 	bl	800219a <HAL_PCD_EP_Receive>
 80073ac:	4603      	mov	r3, r0
 80073ae:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80073b0:	7dfb      	ldrb	r3, [r7, #23]
 80073b2:	4618      	mov	r0, r3
 80073b4:	f000 f832 	bl	800741c <USBD_Get_USB_Status>
 80073b8:	4603      	mov	r3, r0
 80073ba:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80073bc:	7dbb      	ldrb	r3, [r7, #22]
}
 80073be:	4618      	mov	r0, r3
 80073c0:	3718      	adds	r7, #24
 80073c2:	46bd      	mov	sp, r7
 80073c4:	bd80      	pop	{r7, pc}

080073c6 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80073c6:	b580      	push	{r7, lr}
 80073c8:	b082      	sub	sp, #8
 80073ca:	af00      	add	r7, sp, #0
 80073cc:	6078      	str	r0, [r7, #4]
 80073ce:	460b      	mov	r3, r1
 80073d0:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80073d8:	78fa      	ldrb	r2, [r7, #3]
 80073da:	4611      	mov	r1, r2
 80073dc:	4618      	mov	r0, r3
 80073de:	f7fa ff17 	bl	8002210 <HAL_PCD_EP_GetRxCount>
 80073e2:	4603      	mov	r3, r0
}
 80073e4:	4618      	mov	r0, r3
 80073e6:	3708      	adds	r7, #8
 80073e8:	46bd      	mov	sp, r7
 80073ea:	bd80      	pop	{r7, pc}

080073ec <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80073ec:	b480      	push	{r7}
 80073ee:	b083      	sub	sp, #12
 80073f0:	af00      	add	r7, sp, #0
 80073f2:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80073f4:	4b03      	ldr	r3, [pc, #12]	@ (8007404 <USBD_static_malloc+0x18>)
}
 80073f6:	4618      	mov	r0, r3
 80073f8:	370c      	adds	r7, #12
 80073fa:	46bd      	mov	sp, r7
 80073fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007400:	4770      	bx	lr
 8007402:	bf00      	nop
 8007404:	20001b34 	.word	0x20001b34

08007408 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8007408:	b480      	push	{r7}
 800740a:	b083      	sub	sp, #12
 800740c:	af00      	add	r7, sp, #0
 800740e:	6078      	str	r0, [r7, #4]

}
 8007410:	bf00      	nop
 8007412:	370c      	adds	r7, #12
 8007414:	46bd      	mov	sp, r7
 8007416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800741a:	4770      	bx	lr

0800741c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800741c:	b480      	push	{r7}
 800741e:	b085      	sub	sp, #20
 8007420:	af00      	add	r7, sp, #0
 8007422:	4603      	mov	r3, r0
 8007424:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007426:	2300      	movs	r3, #0
 8007428:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800742a:	79fb      	ldrb	r3, [r7, #7]
 800742c:	2b03      	cmp	r3, #3
 800742e:	d817      	bhi.n	8007460 <USBD_Get_USB_Status+0x44>
 8007430:	a201      	add	r2, pc, #4	@ (adr r2, 8007438 <USBD_Get_USB_Status+0x1c>)
 8007432:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007436:	bf00      	nop
 8007438:	08007449 	.word	0x08007449
 800743c:	0800744f 	.word	0x0800744f
 8007440:	08007455 	.word	0x08007455
 8007444:	0800745b 	.word	0x0800745b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8007448:	2300      	movs	r3, #0
 800744a:	73fb      	strb	r3, [r7, #15]
    break;
 800744c:	e00b      	b.n	8007466 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800744e:	2303      	movs	r3, #3
 8007450:	73fb      	strb	r3, [r7, #15]
    break;
 8007452:	e008      	b.n	8007466 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007454:	2301      	movs	r3, #1
 8007456:	73fb      	strb	r3, [r7, #15]
    break;
 8007458:	e005      	b.n	8007466 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800745a:	2303      	movs	r3, #3
 800745c:	73fb      	strb	r3, [r7, #15]
    break;
 800745e:	e002      	b.n	8007466 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8007460:	2303      	movs	r3, #3
 8007462:	73fb      	strb	r3, [r7, #15]
    break;
 8007464:	bf00      	nop
  }
  return usb_status;
 8007466:	7bfb      	ldrb	r3, [r7, #15]
}
 8007468:	4618      	mov	r0, r3
 800746a:	3714      	adds	r7, #20
 800746c:	46bd      	mov	sp, r7
 800746e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007472:	4770      	bx	lr

08007474 <__NVIC_EnableIRQ>:
{
 8007474:	b480      	push	{r7}
 8007476:	b083      	sub	sp, #12
 8007478:	af00      	add	r7, sp, #0
 800747a:	4603      	mov	r3, r0
 800747c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800747e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007482:	2b00      	cmp	r3, #0
 8007484:	db0b      	blt.n	800749e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007486:	79fb      	ldrb	r3, [r7, #7]
 8007488:	f003 021f 	and.w	r2, r3, #31
 800748c:	4907      	ldr	r1, [pc, #28]	@ (80074ac <__NVIC_EnableIRQ+0x38>)
 800748e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007492:	095b      	lsrs	r3, r3, #5
 8007494:	2001      	movs	r0, #1
 8007496:	fa00 f202 	lsl.w	r2, r0, r2
 800749a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800749e:	bf00      	nop
 80074a0:	370c      	adds	r7, #12
 80074a2:	46bd      	mov	sp, r7
 80074a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074a8:	4770      	bx	lr
 80074aa:	bf00      	nop
 80074ac:	e000e100 	.word	0xe000e100

080074b0 <__NVIC_SetPriority>:
{
 80074b0:	b480      	push	{r7}
 80074b2:	b083      	sub	sp, #12
 80074b4:	af00      	add	r7, sp, #0
 80074b6:	4603      	mov	r3, r0
 80074b8:	6039      	str	r1, [r7, #0]
 80074ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80074bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	db0a      	blt.n	80074da <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80074c4:	683b      	ldr	r3, [r7, #0]
 80074c6:	b2da      	uxtb	r2, r3
 80074c8:	490c      	ldr	r1, [pc, #48]	@ (80074fc <__NVIC_SetPriority+0x4c>)
 80074ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80074ce:	0112      	lsls	r2, r2, #4
 80074d0:	b2d2      	uxtb	r2, r2
 80074d2:	440b      	add	r3, r1
 80074d4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80074d8:	e00a      	b.n	80074f0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80074da:	683b      	ldr	r3, [r7, #0]
 80074dc:	b2da      	uxtb	r2, r3
 80074de:	4908      	ldr	r1, [pc, #32]	@ (8007500 <__NVIC_SetPriority+0x50>)
 80074e0:	79fb      	ldrb	r3, [r7, #7]
 80074e2:	f003 030f 	and.w	r3, r3, #15
 80074e6:	3b04      	subs	r3, #4
 80074e8:	0112      	lsls	r2, r2, #4
 80074ea:	b2d2      	uxtb	r2, r2
 80074ec:	440b      	add	r3, r1
 80074ee:	761a      	strb	r2, [r3, #24]
}
 80074f0:	bf00      	nop
 80074f2:	370c      	adds	r7, #12
 80074f4:	46bd      	mov	sp, r7
 80074f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074fa:	4770      	bx	lr
 80074fc:	e000e100 	.word	0xe000e100
 8007500:	e000ed00 	.word	0xe000ed00

08007504 <LL_AHB1_GRP1_EnableClock>:
{
 8007504:	b480      	push	{r7}
 8007506:	b085      	sub	sp, #20
 8007508:	af00      	add	r7, sp, #0
 800750a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 800750c:	4b08      	ldr	r3, [pc, #32]	@ (8007530 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800750e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007510:	4907      	ldr	r1, [pc, #28]	@ (8007530 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	4313      	orrs	r3, r2
 8007516:	630b      	str	r3, [r1, #48]	@ 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8007518:	4b05      	ldr	r3, [pc, #20]	@ (8007530 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800751a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	4013      	ands	r3, r2
 8007520:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8007522:	68fb      	ldr	r3, [r7, #12]
}
 8007524:	bf00      	nop
 8007526:	3714      	adds	r7, #20
 8007528:	46bd      	mov	sp, r7
 800752a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800752e:	4770      	bx	lr
 8007530:	40023800 	.word	0x40023800

08007534 <LL_SYSCFG_SetEXTISource>:
{
 8007534:	b480      	push	{r7}
 8007536:	b087      	sub	sp, #28
 8007538:	af00      	add	r7, sp, #0
 800753a:	6078      	str	r0, [r7, #4]
 800753c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SYSCFG->EXTICR[Line & 0xFF], (Line >> 16), Port << POSITION_VAL((Line >> 16)));
 800753e:	4a17      	ldr	r2, [pc, #92]	@ (800759c <LL_SYSCFG_SetEXTISource+0x68>)
 8007540:	683b      	ldr	r3, [r7, #0]
 8007542:	b2db      	uxtb	r3, r3
 8007544:	3302      	adds	r3, #2
 8007546:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800754a:	683b      	ldr	r3, [r7, #0]
 800754c:	0c1b      	lsrs	r3, r3, #16
 800754e:	43db      	mvns	r3, r3
 8007550:	ea02 0103 	and.w	r1, r2, r3
 8007554:	683b      	ldr	r3, [r7, #0]
 8007556:	0c1b      	lsrs	r3, r3, #16
 8007558:	613b      	str	r3, [r7, #16]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800755a:	693b      	ldr	r3, [r7, #16]
 800755c:	fa93 f3a3 	rbit	r3, r3
 8007560:	60fb      	str	r3, [r7, #12]
  return result;
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8007566:	697b      	ldr	r3, [r7, #20]
 8007568:	2b00      	cmp	r3, #0
 800756a:	d101      	bne.n	8007570 <LL_SYSCFG_SetEXTISource+0x3c>
    return 32U;
 800756c:	2320      	movs	r3, #32
 800756e:	e003      	b.n	8007578 <LL_SYSCFG_SetEXTISource+0x44>
  return __builtin_clz(value);
 8007570:	697b      	ldr	r3, [r7, #20]
 8007572:	fab3 f383 	clz	r3, r3
 8007576:	b2db      	uxtb	r3, r3
 8007578:	461a      	mov	r2, r3
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	fa03 f202 	lsl.w	r2, r3, r2
 8007580:	4806      	ldr	r0, [pc, #24]	@ (800759c <LL_SYSCFG_SetEXTISource+0x68>)
 8007582:	683b      	ldr	r3, [r7, #0]
 8007584:	b2db      	uxtb	r3, r3
 8007586:	430a      	orrs	r2, r1
 8007588:	3302      	adds	r3, #2
 800758a:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 800758e:	bf00      	nop
 8007590:	371c      	adds	r7, #28
 8007592:	46bd      	mov	sp, r7
 8007594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007598:	4770      	bx	lr
 800759a:	bf00      	nop
 800759c:	40013800 	.word	0x40013800

080075a0 <LL_EXTI_EnableIT_0_31>:
{
 80075a0:	b480      	push	{r7}
 80075a2:	b083      	sub	sp, #12
 80075a4:	af00      	add	r7, sp, #0
 80075a6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR, ExtiLine);
 80075a8:	4b05      	ldr	r3, [pc, #20]	@ (80075c0 <LL_EXTI_EnableIT_0_31+0x20>)
 80075aa:	681a      	ldr	r2, [r3, #0]
 80075ac:	4904      	ldr	r1, [pc, #16]	@ (80075c0 <LL_EXTI_EnableIT_0_31+0x20>)
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	4313      	orrs	r3, r2
 80075b2:	600b      	str	r3, [r1, #0]
}
 80075b4:	bf00      	nop
 80075b6:	370c      	adds	r7, #12
 80075b8:	46bd      	mov	sp, r7
 80075ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075be:	4770      	bx	lr
 80075c0:	40013c00 	.word	0x40013c00

080075c4 <LL_EXTI_DisableIT_0_31>:
{
 80075c4:	b480      	push	{r7}
 80075c6:	b083      	sub	sp, #12
 80075c8:	af00      	add	r7, sp, #0
 80075ca:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR, ExtiLine);
 80075cc:	4b06      	ldr	r3, [pc, #24]	@ (80075e8 <LL_EXTI_DisableIT_0_31+0x24>)
 80075ce:	681a      	ldr	r2, [r3, #0]
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	43db      	mvns	r3, r3
 80075d4:	4904      	ldr	r1, [pc, #16]	@ (80075e8 <LL_EXTI_DisableIT_0_31+0x24>)
 80075d6:	4013      	ands	r3, r2
 80075d8:	600b      	str	r3, [r1, #0]
}
 80075da:	bf00      	nop
 80075dc:	370c      	adds	r7, #12
 80075de:	46bd      	mov	sp, r7
 80075e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075e4:	4770      	bx	lr
 80075e6:	bf00      	nop
 80075e8:	40013c00 	.word	0x40013c00

080075ec <LL_EXTI_EnableRisingTrig_0_31>:
{
 80075ec:	b480      	push	{r7}
 80075ee:	b083      	sub	sp, #12
 80075f0:	af00      	add	r7, sp, #0
 80075f2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR, ExtiLine);
 80075f4:	4b05      	ldr	r3, [pc, #20]	@ (800760c <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 80075f6:	689a      	ldr	r2, [r3, #8]
 80075f8:	4904      	ldr	r1, [pc, #16]	@ (800760c <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	4313      	orrs	r3, r2
 80075fe:	608b      	str	r3, [r1, #8]
}
 8007600:	bf00      	nop
 8007602:	370c      	adds	r7, #12
 8007604:	46bd      	mov	sp, r7
 8007606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800760a:	4770      	bx	lr
 800760c:	40013c00 	.word	0x40013c00

08007610 <LL_EXTI_EnableFallingTrig_0_31>:
{
 8007610:	b480      	push	{r7}
 8007612:	b083      	sub	sp, #12
 8007614:	af00      	add	r7, sp, #0
 8007616:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR, ExtiLine);
 8007618:	4b05      	ldr	r3, [pc, #20]	@ (8007630 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 800761a:	68da      	ldr	r2, [r3, #12]
 800761c:	4904      	ldr	r1, [pc, #16]	@ (8007630 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	4313      	orrs	r3, r2
 8007622:	60cb      	str	r3, [r1, #12]
}
 8007624:	bf00      	nop
 8007626:	370c      	adds	r7, #12
 8007628:	46bd      	mov	sp, r7
 800762a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800762e:	4770      	bx	lr
 8007630:	40013c00 	.word	0x40013c00

08007634 <LL_GPIO_SetPinMode>:
{
 8007634:	b480      	push	{r7}
 8007636:	b08b      	sub	sp, #44	@ 0x2c
 8007638:	af00      	add	r7, sp, #0
 800763a:	60f8      	str	r0, [r7, #12]
 800763c:	60b9      	str	r1, [r7, #8]
 800763e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	681a      	ldr	r2, [r3, #0]
 8007644:	68bb      	ldr	r3, [r7, #8]
 8007646:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007648:	697b      	ldr	r3, [r7, #20]
 800764a:	fa93 f3a3 	rbit	r3, r3
 800764e:	613b      	str	r3, [r7, #16]
  return result;
 8007650:	693b      	ldr	r3, [r7, #16]
 8007652:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8007654:	69bb      	ldr	r3, [r7, #24]
 8007656:	2b00      	cmp	r3, #0
 8007658:	d101      	bne.n	800765e <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 800765a:	2320      	movs	r3, #32
 800765c:	e003      	b.n	8007666 <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 800765e:	69bb      	ldr	r3, [r7, #24]
 8007660:	fab3 f383 	clz	r3, r3
 8007664:	b2db      	uxtb	r3, r3
 8007666:	005b      	lsls	r3, r3, #1
 8007668:	2103      	movs	r1, #3
 800766a:	fa01 f303 	lsl.w	r3, r1, r3
 800766e:	43db      	mvns	r3, r3
 8007670:	401a      	ands	r2, r3
 8007672:	68bb      	ldr	r3, [r7, #8]
 8007674:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007676:	6a3b      	ldr	r3, [r7, #32]
 8007678:	fa93 f3a3 	rbit	r3, r3
 800767c:	61fb      	str	r3, [r7, #28]
  return result;
 800767e:	69fb      	ldr	r3, [r7, #28]
 8007680:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8007682:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007684:	2b00      	cmp	r3, #0
 8007686:	d101      	bne.n	800768c <LL_GPIO_SetPinMode+0x58>
    return 32U;
 8007688:	2320      	movs	r3, #32
 800768a:	e003      	b.n	8007694 <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 800768c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800768e:	fab3 f383 	clz	r3, r3
 8007692:	b2db      	uxtb	r3, r3
 8007694:	005b      	lsls	r3, r3, #1
 8007696:	6879      	ldr	r1, [r7, #4]
 8007698:	fa01 f303 	lsl.w	r3, r1, r3
 800769c:	431a      	orrs	r2, r3
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	601a      	str	r2, [r3, #0]
}
 80076a2:	bf00      	nop
 80076a4:	372c      	adds	r7, #44	@ 0x2c
 80076a6:	46bd      	mov	sp, r7
 80076a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ac:	4770      	bx	lr

080076ae <LL_GPIO_SetPinOutputType>:
{
 80076ae:	b480      	push	{r7}
 80076b0:	b085      	sub	sp, #20
 80076b2:	af00      	add	r7, sp, #0
 80076b4:	60f8      	str	r0, [r7, #12]
 80076b6:	60b9      	str	r1, [r7, #8]
 80076b8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	685a      	ldr	r2, [r3, #4]
 80076be:	68bb      	ldr	r3, [r7, #8]
 80076c0:	43db      	mvns	r3, r3
 80076c2:	401a      	ands	r2, r3
 80076c4:	68bb      	ldr	r3, [r7, #8]
 80076c6:	6879      	ldr	r1, [r7, #4]
 80076c8:	fb01 f303 	mul.w	r3, r1, r3
 80076cc:	431a      	orrs	r2, r3
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	605a      	str	r2, [r3, #4]
}
 80076d2:	bf00      	nop
 80076d4:	3714      	adds	r7, #20
 80076d6:	46bd      	mov	sp, r7
 80076d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076dc:	4770      	bx	lr

080076de <LL_GPIO_SetPinSpeed>:
{
 80076de:	b480      	push	{r7}
 80076e0:	b08b      	sub	sp, #44	@ 0x2c
 80076e2:	af00      	add	r7, sp, #0
 80076e4:	60f8      	str	r0, [r7, #12]
 80076e6:	60b9      	str	r1, [r7, #8]
 80076e8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	689a      	ldr	r2, [r3, #8]
 80076ee:	68bb      	ldr	r3, [r7, #8]
 80076f0:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80076f2:	697b      	ldr	r3, [r7, #20]
 80076f4:	fa93 f3a3 	rbit	r3, r3
 80076f8:	613b      	str	r3, [r7, #16]
  return result;
 80076fa:	693b      	ldr	r3, [r7, #16]
 80076fc:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80076fe:	69bb      	ldr	r3, [r7, #24]
 8007700:	2b00      	cmp	r3, #0
 8007702:	d101      	bne.n	8007708 <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 8007704:	2320      	movs	r3, #32
 8007706:	e003      	b.n	8007710 <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 8007708:	69bb      	ldr	r3, [r7, #24]
 800770a:	fab3 f383 	clz	r3, r3
 800770e:	b2db      	uxtb	r3, r3
 8007710:	005b      	lsls	r3, r3, #1
 8007712:	2103      	movs	r1, #3
 8007714:	fa01 f303 	lsl.w	r3, r1, r3
 8007718:	43db      	mvns	r3, r3
 800771a:	401a      	ands	r2, r3
 800771c:	68bb      	ldr	r3, [r7, #8]
 800771e:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007720:	6a3b      	ldr	r3, [r7, #32]
 8007722:	fa93 f3a3 	rbit	r3, r3
 8007726:	61fb      	str	r3, [r7, #28]
  return result;
 8007728:	69fb      	ldr	r3, [r7, #28]
 800772a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800772c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800772e:	2b00      	cmp	r3, #0
 8007730:	d101      	bne.n	8007736 <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 8007732:	2320      	movs	r3, #32
 8007734:	e003      	b.n	800773e <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 8007736:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007738:	fab3 f383 	clz	r3, r3
 800773c:	b2db      	uxtb	r3, r3
 800773e:	005b      	lsls	r3, r3, #1
 8007740:	6879      	ldr	r1, [r7, #4]
 8007742:	fa01 f303 	lsl.w	r3, r1, r3
 8007746:	431a      	orrs	r2, r3
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	609a      	str	r2, [r3, #8]
}
 800774c:	bf00      	nop
 800774e:	372c      	adds	r7, #44	@ 0x2c
 8007750:	46bd      	mov	sp, r7
 8007752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007756:	4770      	bx	lr

08007758 <LL_GPIO_SetPinPull>:
{
 8007758:	b480      	push	{r7}
 800775a:	b08b      	sub	sp, #44	@ 0x2c
 800775c:	af00      	add	r7, sp, #0
 800775e:	60f8      	str	r0, [r7, #12]
 8007760:	60b9      	str	r1, [r7, #8]
 8007762:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	68da      	ldr	r2, [r3, #12]
 8007768:	68bb      	ldr	r3, [r7, #8]
 800776a:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800776c:	697b      	ldr	r3, [r7, #20]
 800776e:	fa93 f3a3 	rbit	r3, r3
 8007772:	613b      	str	r3, [r7, #16]
  return result;
 8007774:	693b      	ldr	r3, [r7, #16]
 8007776:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8007778:	69bb      	ldr	r3, [r7, #24]
 800777a:	2b00      	cmp	r3, #0
 800777c:	d101      	bne.n	8007782 <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 800777e:	2320      	movs	r3, #32
 8007780:	e003      	b.n	800778a <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 8007782:	69bb      	ldr	r3, [r7, #24]
 8007784:	fab3 f383 	clz	r3, r3
 8007788:	b2db      	uxtb	r3, r3
 800778a:	005b      	lsls	r3, r3, #1
 800778c:	2103      	movs	r1, #3
 800778e:	fa01 f303 	lsl.w	r3, r1, r3
 8007792:	43db      	mvns	r3, r3
 8007794:	401a      	ands	r2, r3
 8007796:	68bb      	ldr	r3, [r7, #8]
 8007798:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800779a:	6a3b      	ldr	r3, [r7, #32]
 800779c:	fa93 f3a3 	rbit	r3, r3
 80077a0:	61fb      	str	r3, [r7, #28]
  return result;
 80077a2:	69fb      	ldr	r3, [r7, #28]
 80077a4:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 80077a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	d101      	bne.n	80077b0 <LL_GPIO_SetPinPull+0x58>
    return 32U;
 80077ac:	2320      	movs	r3, #32
 80077ae:	e003      	b.n	80077b8 <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 80077b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077b2:	fab3 f383 	clz	r3, r3
 80077b6:	b2db      	uxtb	r3, r3
 80077b8:	005b      	lsls	r3, r3, #1
 80077ba:	6879      	ldr	r1, [r7, #4]
 80077bc:	fa01 f303 	lsl.w	r3, r1, r3
 80077c0:	431a      	orrs	r2, r3
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	60da      	str	r2, [r3, #12]
}
 80077c6:	bf00      	nop
 80077c8:	372c      	adds	r7, #44	@ 0x2c
 80077ca:	46bd      	mov	sp, r7
 80077cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077d0:	4770      	bx	lr

080077d2 <LL_GPIO_IsInputPinSet>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_GPIO_IsInputPinSet(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80077d2:	b480      	push	{r7}
 80077d4:	b083      	sub	sp, #12
 80077d6:	af00      	add	r7, sp, #0
 80077d8:	6078      	str	r0, [r7, #4]
 80077da:	6039      	str	r1, [r7, #0]
  return (READ_BIT(GPIOx->IDR, PinMask) == (PinMask));
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	691a      	ldr	r2, [r3, #16]
 80077e0:	683b      	ldr	r3, [r7, #0]
 80077e2:	4013      	ands	r3, r2
 80077e4:	683a      	ldr	r2, [r7, #0]
 80077e6:	429a      	cmp	r2, r3
 80077e8:	bf0c      	ite	eq
 80077ea:	2301      	moveq	r3, #1
 80077ec:	2300      	movne	r3, #0
 80077ee:	b2db      	uxtb	r3, r3
}
 80077f0:	4618      	mov	r0, r3
 80077f2:	370c      	adds	r7, #12
 80077f4:	46bd      	mov	sp, r7
 80077f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077fa:	4770      	bx	lr

080077fc <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80077fc:	b480      	push	{r7}
 80077fe:	b083      	sub	sp, #12
 8007800:	af00      	add	r7, sp, #0
 8007802:	6078      	str	r0, [r7, #4]
 8007804:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	683a      	ldr	r2, [r7, #0]
 800780a:	619a      	str	r2, [r3, #24]
}
 800780c:	bf00      	nop
 800780e:	370c      	adds	r7, #12
 8007810:	46bd      	mov	sp, r7
 8007812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007816:	4770      	bx	lr

08007818 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8007818:	b480      	push	{r7}
 800781a:	b083      	sub	sp, #12
 800781c:	af00      	add	r7, sp, #0
 800781e:	6078      	str	r0, [r7, #4]
 8007820:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8007822:	683b      	ldr	r3, [r7, #0]
 8007824:	041a      	lsls	r2, r3, #16
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	619a      	str	r2, [r3, #24]
}
 800782a:	bf00      	nop
 800782c:	370c      	adds	r7, #12
 800782e:	46bd      	mov	sp, r7
 8007830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007834:	4770      	bx	lr
	...

08007838 <DWT_Clock_Enable>:

/**
 * The function `DWT_Clock_Enable` enables the DWT cycle counter if it is not already enabled.
 */
void DWT_Clock_Enable(void)
{
 8007838:	b480      	push	{r7}
 800783a:	af00      	add	r7, sp, #0
    if (!(DWT->CTRL & DWT_CTRL_CYCCNTENA_Msk))
 800783c:	4b0c      	ldr	r3, [pc, #48]	@ (8007870 <DWT_Clock_Enable+0x38>)
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	f003 0301 	and.w	r3, r3, #1
 8007844:	2b00      	cmp	r3, #0
 8007846:	d10e      	bne.n	8007866 <DWT_Clock_Enable+0x2e>
    {
        CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk; // Bật Trace
 8007848:	4b0a      	ldr	r3, [pc, #40]	@ (8007874 <DWT_Clock_Enable+0x3c>)
 800784a:	68db      	ldr	r3, [r3, #12]
 800784c:	4a09      	ldr	r2, [pc, #36]	@ (8007874 <DWT_Clock_Enable+0x3c>)
 800784e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007852:	60d3      	str	r3, [r2, #12]
        DWT->CYCCNT = 0;                                // Reset bộ đếm
 8007854:	4b06      	ldr	r3, [pc, #24]	@ (8007870 <DWT_Clock_Enable+0x38>)
 8007856:	2200      	movs	r2, #0
 8007858:	605a      	str	r2, [r3, #4]
        DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;            // Bật bộ đếm chu kỳ
 800785a:	4b05      	ldr	r3, [pc, #20]	@ (8007870 <DWT_Clock_Enable+0x38>)
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	4a04      	ldr	r2, [pc, #16]	@ (8007870 <DWT_Clock_Enable+0x38>)
 8007860:	f043 0301 	orr.w	r3, r3, #1
 8007864:	6013      	str	r3, [r2, #0]
    }
}
 8007866:	bf00      	nop
 8007868:	46bd      	mov	sp, r7
 800786a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800786e:	4770      	bx	lr
 8007870:	e0001000 	.word	0xe0001000
 8007874:	e000edf0 	.word	0xe000edf0

08007878 <I2C_Bitbang_Init>:

void I2C_Bitbang_Init(void)
{
 8007878:	b580      	push	{r7, lr}
 800787a:	af00      	add	r7, sp, #0
    LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 800787c:	2002      	movs	r0, #2
 800787e:	f7ff fe41 	bl	8007504 <LL_AHB1_GRP1_EnableClock>

    /*Configure SCL pin as input first
     * after detecting start condition, then change it to interrupt rising edge (input)
     */

    LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8007882:	2002      	movs	r0, #2
 8007884:	f7ff fe3e 	bl	8007504 <LL_AHB1_GRP1_EnableClock>

    LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTB, LL_SYSCFG_EXTI_LINE7);
 8007888:	4916      	ldr	r1, [pc, #88]	@ (80078e4 <I2C_Bitbang_Init+0x6c>)
 800788a:	2001      	movs	r0, #1
 800788c:	f7ff fe52 	bl	8007534 <LL_SYSCFG_SetEXTISource>
    LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTB, LL_SYSCFG_EXTI_LINE6);
 8007890:	4915      	ldr	r1, [pc, #84]	@ (80078e8 <I2C_Bitbang_Init+0x70>)
 8007892:	2001      	movs	r0, #1
 8007894:	f7ff fe4e 	bl	8007534 <LL_SYSCFG_SetEXTISource>

    LL_EXTI_EnableIT_0_31(LL_EXTI_LINE_7);
 8007898:	2080      	movs	r0, #128	@ 0x80
 800789a:	f7ff fe81 	bl	80075a0 <LL_EXTI_EnableIT_0_31>
    LL_EXTI_EnableFallingTrig_0_31(LL_EXTI_LINE_7);
 800789e:	2080      	movs	r0, #128	@ 0x80
 80078a0:	f7ff feb6 	bl	8007610 <LL_EXTI_EnableFallingTrig_0_31>

    /* Configure GPIO*/

    LL_GPIO_SetPinMode(I2C_GPIO_PORT, I2C_SDA_PIN, LL_GPIO_MODE_INPUT);
 80078a4:	2200      	movs	r2, #0
 80078a6:	2180      	movs	r1, #128	@ 0x80
 80078a8:	4810      	ldr	r0, [pc, #64]	@ (80078ec <I2C_Bitbang_Init+0x74>)
 80078aa:	f7ff fec3 	bl	8007634 <LL_GPIO_SetPinMode>
    LL_GPIO_SetPinPull(I2C_GPIO_PORT, I2C_SDA_PIN, LL_GPIO_PULL_NO);
 80078ae:	2200      	movs	r2, #0
 80078b0:	2180      	movs	r1, #128	@ 0x80
 80078b2:	480e      	ldr	r0, [pc, #56]	@ (80078ec <I2C_Bitbang_Init+0x74>)
 80078b4:	f7ff ff50 	bl	8007758 <LL_GPIO_SetPinPull>

    /*Configure GPIO*/
    LL_EXTI_EnableRisingTrig_0_31(LL_EXTI_LINE_6);
 80078b8:	2040      	movs	r0, #64	@ 0x40
 80078ba:	f7ff fe97 	bl	80075ec <LL_EXTI_EnableRisingTrig_0_31>
    LL_GPIO_SetPinMode(I2C_GPIO_PORT, I2C_SCL_PIN, LL_GPIO_MODE_INPUT);
 80078be:	2200      	movs	r2, #0
 80078c0:	2140      	movs	r1, #64	@ 0x40
 80078c2:	480a      	ldr	r0, [pc, #40]	@ (80078ec <I2C_Bitbang_Init+0x74>)
 80078c4:	f7ff feb6 	bl	8007634 <LL_GPIO_SetPinMode>
    LL_GPIO_SetPinPull(I2C_GPIO_PORT, I2C_SCL_PIN, LL_GPIO_PULL_NO);
 80078c8:	2200      	movs	r2, #0
 80078ca:	2140      	movs	r1, #64	@ 0x40
 80078cc:	4807      	ldr	r0, [pc, #28]	@ (80078ec <I2C_Bitbang_Init+0x74>)
 80078ce:	f7ff ff43 	bl	8007758 <LL_GPIO_SetPinPull>

    NVIC_SetPriority(EXTI9_5_IRQn, 0);
 80078d2:	2100      	movs	r1, #0
 80078d4:	2017      	movs	r0, #23
 80078d6:	f7ff fdeb 	bl	80074b0 <__NVIC_SetPriority>
    NVIC_EnableIRQ(EXTI9_5_IRQn);
 80078da:	2017      	movs	r0, #23
 80078dc:	f7ff fdca 	bl	8007474 <__NVIC_EnableIRQ>
}
 80078e0:	bf00      	nop
 80078e2:	bd80      	pop	{r7, pc}
 80078e4:	f0000001 	.word	0xf0000001
 80078e8:	0f000001 	.word	0x0f000001
 80078ec:	40020400 	.word	0x40020400

080078f0 <I2C_SDA_High>:

/**
 * The function sets the I2C SDA pin to a high logic level.
 */
__STATIC_INLINE void I2C_SDA_High(void)
{
 80078f0:	b580      	push	{r7, lr}
 80078f2:	af00      	add	r7, sp, #0
    LL_GPIO_SetOutputPin(I2C_GPIO_PORT, I2C_SDA_PIN);
 80078f4:	2180      	movs	r1, #128	@ 0x80
 80078f6:	4802      	ldr	r0, [pc, #8]	@ (8007900 <I2C_SDA_High+0x10>)
 80078f8:	f7ff ff80 	bl	80077fc <LL_GPIO_SetOutputPin>
}
 80078fc:	bf00      	nop
 80078fe:	bd80      	pop	{r7, pc}
 8007900:	40020400 	.word	0x40020400

08007904 <I2C_SDA_Low>:
/**
 * @brief
 *
 */
__STATIC_INLINE void I2C_SDA_Low(void)
{
 8007904:	b580      	push	{r7, lr}
 8007906:	af00      	add	r7, sp, #0
    LL_GPIO_ResetOutputPin(I2C_GPIO_PORT, I2C_SDA_PIN);
 8007908:	2180      	movs	r1, #128	@ 0x80
 800790a:	4802      	ldr	r0, [pc, #8]	@ (8007914 <I2C_SDA_Low+0x10>)
 800790c:	f7ff ff84 	bl	8007818 <LL_GPIO_ResetOutputPin>
}
 8007910:	bf00      	nop
 8007912:	bd80      	pop	{r7, pc}
 8007914:	40020400 	.word	0x40020400

08007918 <I2C_Read_SDA>:
 * @return The function `I2C_Read_SDA` is returning the state of the SDA pin, which is read using the
 * `LL_GPIO_IsInputPinSet` function. The state is a `uint32_t` value indicating whether the SDA pin is
 * high or low.
 */
__STATIC_INLINE unsigned char I2C_Read_SDA(void)
{
 8007918:	b580      	push	{r7, lr}
 800791a:	b082      	sub	sp, #8
 800791c:	af00      	add	r7, sp, #0
    unsigned char state = LL_GPIO_IsInputPinSet(I2C_GPIO_PORT, I2C_SDA_PIN);
 800791e:	2180      	movs	r1, #128	@ 0x80
 8007920:	4804      	ldr	r0, [pc, #16]	@ (8007934 <I2C_Read_SDA+0x1c>)
 8007922:	f7ff ff56 	bl	80077d2 <LL_GPIO_IsInputPinSet>
 8007926:	4603      	mov	r3, r0
 8007928:	71fb      	strb	r3, [r7, #7]
    return state;
 800792a:	79fb      	ldrb	r3, [r7, #7]
}
 800792c:	4618      	mov	r0, r3
 800792e:	3708      	adds	r7, #8
 8007930:	46bd      	mov	sp, r7
 8007932:	bd80      	pop	{r7, pc}
 8007934:	40020400 	.word	0x40020400

08007938 <I2C_Read_SCL>:
 *
 * @return The function `I2C_Read_SCL` is returning the current state of the I2C SCL (clock) pin. It
 * sets the pin mode to input, reads the state of the pin, and then returns that state.
 */
__STATIC_INLINE unsigned char I2C_Read_SCL(void)
{
 8007938:	b580      	push	{r7, lr}
 800793a:	b082      	sub	sp, #8
 800793c:	af00      	add	r7, sp, #0
    unsigned char state = LL_GPIO_IsInputPinSet(I2C_GPIO_PORT, I2C_SCL_PIN);
 800793e:	2140      	movs	r1, #64	@ 0x40
 8007940:	4804      	ldr	r0, [pc, #16]	@ (8007954 <I2C_Read_SCL+0x1c>)
 8007942:	f7ff ff46 	bl	80077d2 <LL_GPIO_IsInputPinSet>
 8007946:	4603      	mov	r3, r0
 8007948:	71fb      	strb	r3, [r7, #7]
    return state;
 800794a:	79fb      	ldrb	r3, [r7, #7]
}
 800794c:	4618      	mov	r0, r3
 800794e:	3708      	adds	r7, #8
 8007950:	46bd      	mov	sp, r7
 8007952:	bd80      	pop	{r7, pc}
 8007954:	40020400 	.word	0x40020400

08007958 <I2C_Read_Bit>:
    }
    DWT_Delay_us(2); // Đợi ổn định
}

__STATIC_INLINE unsigned char I2C_Read_Bit(void)
{
 8007958:	b580      	push	{r7, lr}
 800795a:	b082      	sub	sp, #8
 800795c:	af00      	add	r7, sp, #0
    unsigned char bit = LL_GPIO_IsInputPinSet(I2C_GPIO_PORT, I2C_SDA_PIN);
 800795e:	2180      	movs	r1, #128	@ 0x80
 8007960:	4804      	ldr	r0, [pc, #16]	@ (8007974 <I2C_Read_Bit+0x1c>)
 8007962:	f7ff ff36 	bl	80077d2 <LL_GPIO_IsInputPinSet>
 8007966:	4603      	mov	r3, r0
 8007968:	71fb      	strb	r3, [r7, #7]
    return bit;
 800796a:	79fb      	ldrb	r3, [r7, #7]
}
 800796c:	4618      	mov	r0, r3
 800796e:	3708      	adds	r7, #8
 8007970:	46bd      	mov	sp, r7
 8007972:	bd80      	pop	{r7, pc}
 8007974:	40020400 	.word	0x40020400

08007978 <i2c_set_sda_opendrain>:
    }
    return buffer;
}

__STATIC_INLINE void i2c_set_sda_opendrain()
{
 8007978:	b580      	push	{r7, lr}
 800797a:	af00      	add	r7, sp, #0
    LL_GPIO_SetPinMode(I2C_GPIO_PORT, I2C_SDA_PIN, LL_GPIO_MODE_OUTPUT);
 800797c:	2201      	movs	r2, #1
 800797e:	2180      	movs	r1, #128	@ 0x80
 8007980:	4809      	ldr	r0, [pc, #36]	@ (80079a8 <i2c_set_sda_opendrain+0x30>)
 8007982:	f7ff fe57 	bl	8007634 <LL_GPIO_SetPinMode>
    LL_GPIO_SetPinOutputType(I2C_GPIO_PORT, I2C_SDA_PIN, LL_GPIO_OUTPUT_OPENDRAIN);
 8007986:	2201      	movs	r2, #1
 8007988:	2180      	movs	r1, #128	@ 0x80
 800798a:	4807      	ldr	r0, [pc, #28]	@ (80079a8 <i2c_set_sda_opendrain+0x30>)
 800798c:	f7ff fe8f 	bl	80076ae <LL_GPIO_SetPinOutputType>
    LL_GPIO_SetPinSpeed(I2C_GPIO_PORT, I2C_SDA_PIN, LL_GPIO_SPEED_FREQ_HIGH);
 8007990:	2202      	movs	r2, #2
 8007992:	2180      	movs	r1, #128	@ 0x80
 8007994:	4804      	ldr	r0, [pc, #16]	@ (80079a8 <i2c_set_sda_opendrain+0x30>)
 8007996:	f7ff fea2 	bl	80076de <LL_GPIO_SetPinSpeed>
    LL_GPIO_SetPinPull(I2C_GPIO_PORT, I2C_SDA_PIN, LL_GPIO_PULL_UP);
 800799a:	2201      	movs	r2, #1
 800799c:	2180      	movs	r1, #128	@ 0x80
 800799e:	4802      	ldr	r0, [pc, #8]	@ (80079a8 <i2c_set_sda_opendrain+0x30>)
 80079a0:	f7ff feda 	bl	8007758 <LL_GPIO_SetPinPull>
}
 80079a4:	bf00      	nop
 80079a6:	bd80      	pop	{r7, pc}
 80079a8:	40020400 	.word	0x40020400

080079ac <i2c_set_sda_input>:
    LL_GPIO_SetPinOutputType(I2C_GPIO_PORT, I2C_SCL_PIN, LL_GPIO_OUTPUT_OPENDRAIN);
    LL_GPIO_SetPinSpeed(I2C_GPIO_PORT, I2C_SCL_PIN, LL_GPIO_SPEED_FREQ_HIGH);
}

__STATIC_INLINE void i2c_set_sda_input()
{
 80079ac:	b580      	push	{r7, lr}
 80079ae:	af00      	add	r7, sp, #0
    LL_GPIO_SetPinMode(I2C_GPIO_PORT, I2C_SDA_PIN, LL_GPIO_MODE_INPUT);
 80079b0:	2200      	movs	r2, #0
 80079b2:	2180      	movs	r1, #128	@ 0x80
 80079b4:	4802      	ldr	r0, [pc, #8]	@ (80079c0 <i2c_set_sda_input+0x14>)
 80079b6:	f7ff fe3d 	bl	8007634 <LL_GPIO_SetPinMode>
}
 80079ba:	bf00      	nop
 80079bc:	bd80      	pop	{r7, pc}
 80079be:	bf00      	nop
 80079c0:	40020400 	.word	0x40020400

080079c4 <i2c_enable_sda_falling>:

__STATIC_INLINE void i2c_enable_sda_falling()
{
 80079c4:	b580      	push	{r7, lr}
 80079c6:	af00      	add	r7, sp, #0
    LL_EXTI_EnableFallingTrig_0_31(LL_EXTI_LINE_7);
 80079c8:	2080      	movs	r0, #128	@ 0x80
 80079ca:	f7ff fe21 	bl	8007610 <LL_EXTI_EnableFallingTrig_0_31>
    LL_EXTI_EnableIT_0_31(LL_EXTI_LINE_7);
 80079ce:	2080      	movs	r0, #128	@ 0x80
 80079d0:	f7ff fde6 	bl	80075a0 <LL_EXTI_EnableIT_0_31>
}
 80079d4:	bf00      	nop
 80079d6:	bd80      	pop	{r7, pc}

080079d8 <i2c_enable_scl_rising>:

__STATIC_INLINE void i2c_enable_scl_rising()
{
 80079d8:	b580      	push	{r7, lr}
 80079da:	af00      	add	r7, sp, #0
    LL_EXTI_EnableIT_0_31(LL_EXTI_LINE_6);
 80079dc:	2040      	movs	r0, #64	@ 0x40
 80079de:	f7ff fddf 	bl	80075a0 <LL_EXTI_EnableIT_0_31>
}
 80079e2:	bf00      	nop
 80079e4:	bd80      	pop	{r7, pc}
	...

080079e8 <i2c_disable_scl_rising>:

__STATIC_INLINE void i2c_disable_scl_rising()
{
 80079e8:	b580      	push	{r7, lr}
 80079ea:	af00      	add	r7, sp, #0
    LL_EXTI_DisableIT_0_31(LL_EXTI_LINE_6);
 80079ec:	2040      	movs	r0, #64	@ 0x40
 80079ee:	f7ff fde9 	bl	80075c4 <LL_EXTI_DisableIT_0_31>
    LL_GPIO_SetPinPull(I2C_GPIO_PORT, I2C_SCL_PIN, LL_GPIO_PULL_NO);
 80079f2:	2200      	movs	r2, #0
 80079f4:	2140      	movs	r1, #64	@ 0x40
 80079f6:	4802      	ldr	r0, [pc, #8]	@ (8007a00 <i2c_disable_scl_rising+0x18>)
 80079f8:	f7ff feae 	bl	8007758 <LL_GPIO_SetPinPull>
}
 80079fc:	bf00      	nop
 80079fe:	bd80      	pop	{r7, pc}
 8007a00:	40020400 	.word	0x40020400

08007a04 <i2c_disable_sda_falling>:

__STATIC_INLINE void i2c_disable_sda_falling()
{
 8007a04:	b580      	push	{r7, lr}
 8007a06:	af00      	add	r7, sp, #0
    LL_EXTI_DisableIT_0_31(LL_EXTI_LINE_7);
 8007a08:	2080      	movs	r0, #128	@ 0x80
 8007a0a:	f7ff fddb 	bl	80075c4 <LL_EXTI_DisableIT_0_31>
}
 8007a0e:	bf00      	nop
 8007a10:	bd80      	pop	{r7, pc}
	...

08007a14 <check_start_condition>:
bool start_condtion = false;
bool check_if_stop = false;
unsigned char bit;
bool wrong_addr=false;
void check_start_condition()
{
 8007a14:	b580      	push	{r7, lr}
 8007a16:	af00      	add	r7, sp, #0
    if (I2C_Read_SCL() && !I2C_Read_SDA())
 8007a18:	f7ff ff8e 	bl	8007938 <I2C_Read_SCL>
 8007a1c:	4603      	mov	r3, r0
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d00e      	beq.n	8007a40 <check_start_condition+0x2c>
 8007a22:	f7ff ff79 	bl	8007918 <I2C_Read_SDA>
 8007a26:	4603      	mov	r3, r0
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	d109      	bne.n	8007a40 <check_start_condition+0x2c>
    {
        start_condtion = true;
 8007a2c:	4b05      	ldr	r3, [pc, #20]	@ (8007a44 <check_start_condition+0x30>)
 8007a2e:	2201      	movs	r2, #1
 8007a30:	701a      	strb	r2, [r3, #0]
        i2c_state = I2C_ADDRESS_RECEIVING;
 8007a32:	4b05      	ldr	r3, [pc, #20]	@ (8007a48 <check_start_condition+0x34>)
 8007a34:	2201      	movs	r2, #1
 8007a36:	701a      	strb	r2, [r3, #0]
        i2c_disable_sda_falling();
 8007a38:	f7ff ffe4 	bl	8007a04 <i2c_disable_sda_falling>
        i2c_enable_scl_rising();
 8007a3c:	f7ff ffcc 	bl	80079d8 <i2c_enable_scl_rising>
    }
}
 8007a40:	bf00      	nop
 8007a42:	bd80      	pop	{r7, pc}
 8007a44:	20001d63 	.word	0x20001d63
 8007a48:	20001d54 	.word	0x20001d54

08007a4c <I2C_Event_Take>:

void I2C_Event_Take()
{
 8007a4c:	b580      	push	{r7, lr}
 8007a4e:	b082      	sub	sp, #8
 8007a50:	af00      	add	r7, sp, #0

    if (start_condtion)
 8007a52:	4b66      	ldr	r3, [pc, #408]	@ (8007bec <I2C_Event_Take+0x1a0>)
 8007a54:	781b      	ldrb	r3, [r3, #0]
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	f000 80c4 	beq.w	8007be4 <I2C_Event_Take+0x198>
    {
        switch (i2c_state)
 8007a5c:	4b64      	ldr	r3, [pc, #400]	@ (8007bf0 <I2C_Event_Take+0x1a4>)
 8007a5e:	781b      	ldrb	r3, [r3, #0]
 8007a60:	2b03      	cmp	r3, #3
 8007a62:	f200 80ba 	bhi.w	8007bda <I2C_Event_Take+0x18e>
 8007a66:	a201      	add	r2, pc, #4	@ (adr r2, 8007a6c <I2C_Event_Take+0x20>)
 8007a68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a6c:	08007bdb 	.word	0x08007bdb
 8007a70:	08007a7d 	.word	0x08007a7d
 8007a74:	08007adb 	.word	0x08007adb
 8007a78:	08007afd 	.word	0x08007afd
        {
        case I2C_ADDRESS_RECEIVING:
            bit = I2C_Read_Bit();
 8007a7c:	f7ff ff6c 	bl	8007958 <I2C_Read_Bit>
 8007a80:	4603      	mov	r3, r0
 8007a82:	461a      	mov	r2, r3
 8007a84:	4b5b      	ldr	r3, [pc, #364]	@ (8007bf4 <I2C_Event_Take+0x1a8>)
 8007a86:	701a      	strb	r2, [r3, #0]
            Slave_Address = (Slave_Address << 1) | bit;
 8007a88:	4b5b      	ldr	r3, [pc, #364]	@ (8007bf8 <I2C_Event_Take+0x1ac>)
 8007a8a:	781b      	ldrb	r3, [r3, #0]
 8007a8c:	005b      	lsls	r3, r3, #1
 8007a8e:	b25a      	sxtb	r2, r3
 8007a90:	4b58      	ldr	r3, [pc, #352]	@ (8007bf4 <I2C_Event_Take+0x1a8>)
 8007a92:	781b      	ldrb	r3, [r3, #0]
 8007a94:	b25b      	sxtb	r3, r3
 8007a96:	4313      	orrs	r3, r2
 8007a98:	b25b      	sxtb	r3, r3
 8007a9a:	b2da      	uxtb	r2, r3
 8007a9c:	4b56      	ldr	r3, [pc, #344]	@ (8007bf8 <I2C_Event_Take+0x1ac>)
 8007a9e:	701a      	strb	r2, [r3, #0]
            if (++count_bit == 8)
 8007aa0:	4b56      	ldr	r3, [pc, #344]	@ (8007bfc <I2C_Event_Take+0x1b0>)
 8007aa2:	781b      	ldrb	r3, [r3, #0]
 8007aa4:	3301      	adds	r3, #1
 8007aa6:	b2da      	uxtb	r2, r3
 8007aa8:	4b54      	ldr	r3, [pc, #336]	@ (8007bfc <I2C_Event_Take+0x1b0>)
 8007aaa:	701a      	strb	r2, [r3, #0]
 8007aac:	4b53      	ldr	r3, [pc, #332]	@ (8007bfc <I2C_Event_Take+0x1b0>)
 8007aae:	781b      	ldrb	r3, [r3, #0]
 8007ab0:	2b08      	cmp	r3, #8
 8007ab2:	f040 8094 	bne.w	8007bde <I2C_Event_Take+0x192>
            {
            	i2c_set_sda_opendrain();
 8007ab6:	f7ff ff5f 	bl	8007978 <i2c_set_sda_opendrain>
                if (Slave_Address >> 1 == 0x55)
 8007aba:	4b4f      	ldr	r3, [pc, #316]	@ (8007bf8 <I2C_Event_Take+0x1ac>)
 8007abc:	781b      	ldrb	r3, [r3, #0]
 8007abe:	085b      	lsrs	r3, r3, #1
 8007ac0:	b2db      	uxtb	r3, r3
 8007ac2:	2b55      	cmp	r3, #85	@ 0x55
 8007ac4:	d106      	bne.n	8007ad4 <I2C_Event_Take+0x88>
                {
                    i2c_state = I2C_SET_SDA_INPUT_ONLY;
 8007ac6:	4b4a      	ldr	r3, [pc, #296]	@ (8007bf0 <I2C_Event_Take+0x1a4>)
 8007ac8:	2202      	movs	r2, #2
 8007aca:	701a      	strb	r2, [r3, #0]
                {
//                	DWT_Delay_us(3);
                	I2C_SDA_High();
                    goto here;
                }
                i2c_state = I2C_SET_SDA_INPUT_ONLY;
 8007acc:	4b48      	ldr	r3, [pc, #288]	@ (8007bf0 <I2C_Event_Take+0x1a4>)
 8007ace:	2202      	movs	r2, #2
 8007ad0:	701a      	strb	r2, [r3, #0]
            }
            break;
 8007ad2:	e084      	b.n	8007bde <I2C_Event_Take+0x192>
                	I2C_SDA_High();
 8007ad4:	f7ff ff0c 	bl	80078f0 <I2C_SDA_High>
                    goto here;
 8007ad8:	e058      	b.n	8007b8c <I2C_Event_Take+0x140>
        case I2C_SET_SDA_INPUT_ONLY:
            I2C_SDA_Low();//Send ACK
 8007ada:	f7ff ff13 	bl	8007904 <I2C_SDA_Low>
            count_bit = 0;
 8007ade:	4b47      	ldr	r3, [pc, #284]	@ (8007bfc <I2C_Event_Take+0x1b0>)
 8007ae0:	2200      	movs	r2, #0
 8007ae2:	701a      	strb	r2, [r3, #0]
            i2c_state = I2C_DATA_RECEIVING;
 8007ae4:	4b42      	ldr	r3, [pc, #264]	@ (8007bf0 <I2C_Event_Take+0x1a4>)
 8007ae6:	2203      	movs	r2, #3
 8007ae8:	701a      	strb	r2, [r3, #0]
            while (I2C_Read_SCL());//Wait SCL low to change state SDA
 8007aea:	bf00      	nop
 8007aec:	f7ff ff24 	bl	8007938 <I2C_Read_SCL>
 8007af0:	4603      	mov	r3, r0
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d1fa      	bne.n	8007aec <I2C_Event_Take+0xa0>
            i2c_set_sda_input();
 8007af6:	f7ff ff59 	bl	80079ac <i2c_set_sda_input>
            break;
 8007afa:	e073      	b.n	8007be4 <I2C_Event_Take+0x198>
        case I2C_DATA_RECEIVING:
            if (check_if_stop && !I2C_Read_SDA())
 8007afc:	4b40      	ldr	r3, [pc, #256]	@ (8007c00 <I2C_Event_Take+0x1b4>)
 8007afe:	781b      	ldrb	r3, [r3, #0]
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	d004      	beq.n	8007b0e <I2C_Event_Take+0xc2>
 8007b04:	f7ff ff08 	bl	8007918 <I2C_Read_SDA>
 8007b08:	4603      	mov	r3, r0
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d03d      	beq.n	8007b8a <I2C_Event_Take+0x13e>
            {
                goto here;
            }
            else
            {
                check_if_stop = false;
 8007b0e:	4b3c      	ldr	r3, [pc, #240]	@ (8007c00 <I2C_Event_Take+0x1b4>)
 8007b10:	2200      	movs	r2, #0
 8007b12:	701a      	strb	r2, [r3, #0]
            }
            bit = I2C_Read_Bit();
 8007b14:	f7ff ff20 	bl	8007958 <I2C_Read_Bit>
 8007b18:	4603      	mov	r3, r0
 8007b1a:	461a      	mov	r2, r3
 8007b1c:	4b35      	ldr	r3, [pc, #212]	@ (8007bf4 <I2C_Event_Take+0x1a8>)
 8007b1e:	701a      	strb	r2, [r3, #0]
            Slave_rxdata[index_rxdata] = (Slave_rxdata[index_rxdata] << 1) | bit;
 8007b20:	4b38      	ldr	r3, [pc, #224]	@ (8007c04 <I2C_Event_Take+0x1b8>)
 8007b22:	781b      	ldrb	r3, [r3, #0]
 8007b24:	461a      	mov	r2, r3
 8007b26:	4b38      	ldr	r3, [pc, #224]	@ (8007c08 <I2C_Event_Take+0x1bc>)
 8007b28:	5c9b      	ldrb	r3, [r3, r2]
 8007b2a:	005b      	lsls	r3, r3, #1
 8007b2c:	b25a      	sxtb	r2, r3
 8007b2e:	4b31      	ldr	r3, [pc, #196]	@ (8007bf4 <I2C_Event_Take+0x1a8>)
 8007b30:	781b      	ldrb	r3, [r3, #0]
 8007b32:	b25b      	sxtb	r3, r3
 8007b34:	4313      	orrs	r3, r2
 8007b36:	b259      	sxtb	r1, r3
 8007b38:	4b32      	ldr	r3, [pc, #200]	@ (8007c04 <I2C_Event_Take+0x1b8>)
 8007b3a:	781b      	ldrb	r3, [r3, #0]
 8007b3c:	461a      	mov	r2, r3
 8007b3e:	b2c9      	uxtb	r1, r1
 8007b40:	4b31      	ldr	r3, [pc, #196]	@ (8007c08 <I2C_Event_Take+0x1bc>)
 8007b42:	5499      	strb	r1, [r3, r2]
            if (++count_bit % 8 == 0)
 8007b44:	4b2d      	ldr	r3, [pc, #180]	@ (8007bfc <I2C_Event_Take+0x1b0>)
 8007b46:	781b      	ldrb	r3, [r3, #0]
 8007b48:	3301      	adds	r3, #1
 8007b4a:	b2da      	uxtb	r2, r3
 8007b4c:	4b2b      	ldr	r3, [pc, #172]	@ (8007bfc <I2C_Event_Take+0x1b0>)
 8007b4e:	701a      	strb	r2, [r3, #0]
 8007b50:	4b2a      	ldr	r3, [pc, #168]	@ (8007bfc <I2C_Event_Take+0x1b0>)
 8007b52:	781b      	ldrb	r3, [r3, #0]
 8007b54:	f003 0307 	and.w	r3, r3, #7
 8007b58:	b2db      	uxtb	r3, r3
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	d141      	bne.n	8007be2 <I2C_Event_Take+0x196>
            {
                i2c_set_sda_opendrain();
 8007b5e:	f7ff ff0b 	bl	8007978 <i2c_set_sda_opendrain>
                I2C_SDA_Low();//Send ACK
 8007b62:	f7ff fecf 	bl	8007904 <I2C_SDA_Low>
                ++index_rxdata;
 8007b66:	4b27      	ldr	r3, [pc, #156]	@ (8007c04 <I2C_Event_Take+0x1b8>)
 8007b68:	781b      	ldrb	r3, [r3, #0]
 8007b6a:	3301      	adds	r3, #1
 8007b6c:	b2da      	uxtb	r2, r3
 8007b6e:	4b25      	ldr	r3, [pc, #148]	@ (8007c04 <I2C_Event_Take+0x1b8>)
 8007b70:	701a      	strb	r2, [r3, #0]
                check_if_stop = true;
 8007b72:	4b23      	ldr	r3, [pc, #140]	@ (8007c00 <I2C_Event_Take+0x1b4>)
 8007b74:	2201      	movs	r2, #1
 8007b76:	701a      	strb	r2, [r3, #0]
                while (I2C_Read_SCL());
 8007b78:	bf00      	nop
 8007b7a:	f7ff fedd 	bl	8007938 <I2C_Read_SCL>
 8007b7e:	4603      	mov	r3, r0
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d1fa      	bne.n	8007b7a <I2C_Event_Take+0x12e>
                i2c_set_sda_input();
 8007b84:	f7ff ff12 	bl	80079ac <i2c_set_sda_input>
            }
            break;
 8007b88:	e02b      	b.n	8007be2 <I2C_Event_Take+0x196>
                goto here;
 8007b8a:	bf00      	nop
        }
    }
    if (0)
    {
    here:
        count_bit = 0;
 8007b8c:	4b1b      	ldr	r3, [pc, #108]	@ (8007bfc <I2C_Event_Take+0x1b0>)
 8007b8e:	2200      	movs	r2, #0
 8007b90:	701a      	strb	r2, [r3, #0]
        start_condtion = false;
 8007b92:	4b16      	ldr	r3, [pc, #88]	@ (8007bec <I2C_Event_Take+0x1a0>)
 8007b94:	2200      	movs	r2, #0
 8007b96:	701a      	strb	r2, [r3, #0]
        check_if_stop = false;
 8007b98:	4b19      	ldr	r3, [pc, #100]	@ (8007c00 <I2C_Event_Take+0x1b4>)
 8007b9a:	2200      	movs	r2, #0
 8007b9c:	701a      	strb	r2, [r3, #0]
        i2c_state = I2C_IDLE;
 8007b9e:	4b14      	ldr	r3, [pc, #80]	@ (8007bf0 <I2C_Event_Take+0x1a4>)
 8007ba0:	2200      	movs	r2, #0
 8007ba2:	701a      	strb	r2, [r3, #0]
        index_rxdata = 0;
 8007ba4:	4b17      	ldr	r3, [pc, #92]	@ (8007c04 <I2C_Event_Take+0x1b8>)
 8007ba6:	2200      	movs	r2, #0
 8007ba8:	701a      	strb	r2, [r3, #0]
        for (int i = 0; i < index_rxdata; i++)
 8007baa:	2300      	movs	r3, #0
 8007bac:	607b      	str	r3, [r7, #4]
 8007bae:	e007      	b.n	8007bc0 <I2C_Event_Take+0x174>
        {
            Slave_rxdata[i] = 0;
 8007bb0:	4a15      	ldr	r2, [pc, #84]	@ (8007c08 <I2C_Event_Take+0x1bc>)
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	4413      	add	r3, r2
 8007bb6:	2200      	movs	r2, #0
 8007bb8:	701a      	strb	r2, [r3, #0]
        for (int i = 0; i < index_rxdata; i++)
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	3301      	adds	r3, #1
 8007bbe:	607b      	str	r3, [r7, #4]
 8007bc0:	4b10      	ldr	r3, [pc, #64]	@ (8007c04 <I2C_Event_Take+0x1b8>)
 8007bc2:	781b      	ldrb	r3, [r3, #0]
 8007bc4:	461a      	mov	r2, r3
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	4293      	cmp	r3, r2
 8007bca:	dbf1      	blt.n	8007bb0 <I2C_Event_Take+0x164>
        }
        i2c_set_sda_input();
 8007bcc:	f7ff feee 	bl	80079ac <i2c_set_sda_input>
        i2c_disable_scl_rising();
 8007bd0:	f7ff ff0a 	bl	80079e8 <i2c_disable_scl_rising>
        i2c_enable_sda_falling();
 8007bd4:	f7ff fef6 	bl	80079c4 <i2c_enable_sda_falling>
    }
}
 8007bd8:	e004      	b.n	8007be4 <I2C_Event_Take+0x198>
            break;
 8007bda:	bf00      	nop
 8007bdc:	e002      	b.n	8007be4 <I2C_Event_Take+0x198>
            break;
 8007bde:	bf00      	nop
 8007be0:	e000      	b.n	8007be4 <I2C_Event_Take+0x198>
            break;
 8007be2:	bf00      	nop
}
 8007be4:	bf00      	nop
 8007be6:	3708      	adds	r7, #8
 8007be8:	46bd      	mov	sp, r7
 8007bea:	bd80      	pop	{r7, pc}
 8007bec:	20001d63 	.word	0x20001d63
 8007bf0:	20001d54 	.word	0x20001d54
 8007bf4:	20001d65 	.word	0x20001d65
 8007bf8:	20001d56 	.word	0x20001d56
 8007bfc:	20001d55 	.word	0x20001d55
 8007c00:	20001d64 	.word	0x20001d64
 8007c04:	20001d62 	.word	0x20001d62
 8007c08:	20001d58 	.word	0x20001d58

08007c0c <LL_USART_IsActiveFlag_TC>:
  * @rmtoll SR           TC            LL_USART_IsActiveFlag_TC
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TC(const USART_TypeDef *USARTx)
{
 8007c0c:	b480      	push	{r7}
 8007c0e:	b083      	sub	sp, #12
 8007c10:	af00      	add	r7, sp, #0
 8007c12:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_TC) == (USART_SR_TC));
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007c1c:	2b40      	cmp	r3, #64	@ 0x40
 8007c1e:	bf0c      	ite	eq
 8007c20:	2301      	moveq	r3, #1
 8007c22:	2300      	movne	r3, #0
 8007c24:	b2db      	uxtb	r3, r3
}
 8007c26:	4618      	mov	r0, r3
 8007c28:	370c      	adds	r7, #12
 8007c2a:	46bd      	mov	sp, r7
 8007c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c30:	4770      	bx	lr

08007c32 <LL_USART_IsActiveFlag_TXE>:
  * @rmtoll SR           TXE           LL_USART_IsActiveFlag_TXE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TXE(const USART_TypeDef *USARTx)
{
 8007c32:	b480      	push	{r7}
 8007c34:	b083      	sub	sp, #12
 8007c36:	af00      	add	r7, sp, #0
 8007c38:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_TXE) == (USART_SR_TXE));
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007c42:	2b80      	cmp	r3, #128	@ 0x80
 8007c44:	bf0c      	ite	eq
 8007c46:	2301      	moveq	r3, #1
 8007c48:	2300      	movne	r3, #0
 8007c4a:	b2db      	uxtb	r3, r3
}
 8007c4c:	4618      	mov	r0, r3
 8007c4e:	370c      	adds	r7, #12
 8007c50:	46bd      	mov	sp, r7
 8007c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c56:	4770      	bx	lr

08007c58 <LL_USART_TransmitData8>:
  * @param  USARTx USART Instance
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
 8007c58:	b480      	push	{r7}
 8007c5a:	b083      	sub	sp, #12
 8007c5c:	af00      	add	r7, sp, #0
 8007c5e:	6078      	str	r0, [r7, #4]
 8007c60:	460b      	mov	r3, r1
 8007c62:	70fb      	strb	r3, [r7, #3]
  USARTx->DR = Value;
 8007c64:	78fa      	ldrb	r2, [r7, #3]
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	605a      	str	r2, [r3, #4]
}
 8007c6a:	bf00      	nop
 8007c6c:	370c      	adds	r7, #12
 8007c6e:	46bd      	mov	sp, r7
 8007c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c74:	4770      	bx	lr
	...

08007c78 <uart_print>:
 *      Author: dell
 */

#include <uart.h>
static inline void uart_print(const char *str)
{
 8007c78:	b580      	push	{r7, lr}
 8007c7a:	b084      	sub	sp, #16
 8007c7c:	af00      	add	r7, sp, #0
 8007c7e:	6078      	str	r0, [r7, #4]
  uint32_t length = strlen(str);
 8007c80:	6878      	ldr	r0, [r7, #4]
 8007c82:	f7f8 faa5 	bl	80001d0 <strlen>
 8007c86:	60b8      	str	r0, [r7, #8]
  for (uint32_t i = 0; i < length; i++)
 8007c88:	2300      	movs	r3, #0
 8007c8a:	60fb      	str	r3, [r7, #12]
 8007c8c:	e011      	b.n	8007cb2 <uart_print+0x3a>
  {
    while (!LL_USART_IsActiveFlag_TXE(USART1))
 8007c8e:	bf00      	nop
 8007c90:	4810      	ldr	r0, [pc, #64]	@ (8007cd4 <uart_print+0x5c>)
 8007c92:	f7ff ffce 	bl	8007c32 <LL_USART_IsActiveFlag_TXE>
 8007c96:	4603      	mov	r3, r0
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	d0f9      	beq.n	8007c90 <uart_print+0x18>
      ;
    LL_USART_TransmitData8(USART1, (uint8_t)str[i]);
 8007c9c:	687a      	ldr	r2, [r7, #4]
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	4413      	add	r3, r2
 8007ca2:	781b      	ldrb	r3, [r3, #0]
 8007ca4:	4619      	mov	r1, r3
 8007ca6:	480b      	ldr	r0, [pc, #44]	@ (8007cd4 <uart_print+0x5c>)
 8007ca8:	f7ff ffd6 	bl	8007c58 <LL_USART_TransmitData8>
  for (uint32_t i = 0; i < length; i++)
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	3301      	adds	r3, #1
 8007cb0:	60fb      	str	r3, [r7, #12]
 8007cb2:	68fa      	ldr	r2, [r7, #12]
 8007cb4:	68bb      	ldr	r3, [r7, #8]
 8007cb6:	429a      	cmp	r2, r3
 8007cb8:	d3e9      	bcc.n	8007c8e <uart_print+0x16>
  }
  while (!LL_USART_IsActiveFlag_TC(USART1))
 8007cba:	bf00      	nop
 8007cbc:	4805      	ldr	r0, [pc, #20]	@ (8007cd4 <uart_print+0x5c>)
 8007cbe:	f7ff ffa5 	bl	8007c0c <LL_USART_IsActiveFlag_TC>
 8007cc2:	4603      	mov	r3, r0
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	d0f9      	beq.n	8007cbc <uart_print+0x44>
    ;
}
 8007cc8:	bf00      	nop
 8007cca:	bf00      	nop
 8007ccc:	3710      	adds	r7, #16
 8007cce:	46bd      	mov	sp, r7
 8007cd0:	bd80      	pop	{r7, pc}
 8007cd2:	bf00      	nop
 8007cd4:	40011000 	.word	0x40011000

08007cd8 <uart_printf>:

void uart_printf(const char *format, ...)
{
 8007cd8:	b40f      	push	{r0, r1, r2, r3}
 8007cda:	b580      	push	{r7, lr}
 8007cdc:	b0a2      	sub	sp, #136	@ 0x88
 8007cde:	af00      	add	r7, sp, #0
  char buffer[128];
  va_list args;
  va_start(args, format);
 8007ce0:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8007ce4:	607b      	str	r3, [r7, #4]
  vsnprintf(buffer, sizeof(buffer), format, args);
 8007ce6:	f107 0008 	add.w	r0, r7, #8
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 8007cf0:	2180      	movs	r1, #128	@ 0x80
 8007cf2:	f000 f837 	bl	8007d64 <vsniprintf>
  va_end(args);
  uart_print(buffer);
 8007cf6:	f107 0308 	add.w	r3, r7, #8
 8007cfa:	4618      	mov	r0, r3
 8007cfc:	f7ff ffbc 	bl	8007c78 <uart_print>
}
 8007d00:	bf00      	nop
 8007d02:	3788      	adds	r7, #136	@ 0x88
 8007d04:	46bd      	mov	sp, r7
 8007d06:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007d0a:	b004      	add	sp, #16
 8007d0c:	4770      	bx	lr

08007d0e <_vsniprintf_r>:
 8007d0e:	b530      	push	{r4, r5, lr}
 8007d10:	4614      	mov	r4, r2
 8007d12:	2c00      	cmp	r4, #0
 8007d14:	b09b      	sub	sp, #108	@ 0x6c
 8007d16:	4605      	mov	r5, r0
 8007d18:	461a      	mov	r2, r3
 8007d1a:	da05      	bge.n	8007d28 <_vsniprintf_r+0x1a>
 8007d1c:	238b      	movs	r3, #139	@ 0x8b
 8007d1e:	6003      	str	r3, [r0, #0]
 8007d20:	f04f 30ff 	mov.w	r0, #4294967295
 8007d24:	b01b      	add	sp, #108	@ 0x6c
 8007d26:	bd30      	pop	{r4, r5, pc}
 8007d28:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8007d2c:	f8ad 300c 	strh.w	r3, [sp, #12]
 8007d30:	bf14      	ite	ne
 8007d32:	f104 33ff 	addne.w	r3, r4, #4294967295
 8007d36:	4623      	moveq	r3, r4
 8007d38:	9302      	str	r3, [sp, #8]
 8007d3a:	9305      	str	r3, [sp, #20]
 8007d3c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8007d40:	9100      	str	r1, [sp, #0]
 8007d42:	9104      	str	r1, [sp, #16]
 8007d44:	f8ad 300e 	strh.w	r3, [sp, #14]
 8007d48:	4669      	mov	r1, sp
 8007d4a:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8007d4c:	f000 f9a0 	bl	8008090 <_svfiprintf_r>
 8007d50:	1c43      	adds	r3, r0, #1
 8007d52:	bfbc      	itt	lt
 8007d54:	238b      	movlt	r3, #139	@ 0x8b
 8007d56:	602b      	strlt	r3, [r5, #0]
 8007d58:	2c00      	cmp	r4, #0
 8007d5a:	d0e3      	beq.n	8007d24 <_vsniprintf_r+0x16>
 8007d5c:	9b00      	ldr	r3, [sp, #0]
 8007d5e:	2200      	movs	r2, #0
 8007d60:	701a      	strb	r2, [r3, #0]
 8007d62:	e7df      	b.n	8007d24 <_vsniprintf_r+0x16>

08007d64 <vsniprintf>:
 8007d64:	b507      	push	{r0, r1, r2, lr}
 8007d66:	9300      	str	r3, [sp, #0]
 8007d68:	4613      	mov	r3, r2
 8007d6a:	460a      	mov	r2, r1
 8007d6c:	4601      	mov	r1, r0
 8007d6e:	4803      	ldr	r0, [pc, #12]	@ (8007d7c <vsniprintf+0x18>)
 8007d70:	6800      	ldr	r0, [r0, #0]
 8007d72:	f7ff ffcc 	bl	8007d0e <_vsniprintf_r>
 8007d76:	b003      	add	sp, #12
 8007d78:	f85d fb04 	ldr.w	pc, [sp], #4
 8007d7c:	200000fc 	.word	0x200000fc

08007d80 <memset>:
 8007d80:	4402      	add	r2, r0
 8007d82:	4603      	mov	r3, r0
 8007d84:	4293      	cmp	r3, r2
 8007d86:	d100      	bne.n	8007d8a <memset+0xa>
 8007d88:	4770      	bx	lr
 8007d8a:	f803 1b01 	strb.w	r1, [r3], #1
 8007d8e:	e7f9      	b.n	8007d84 <memset+0x4>

08007d90 <__errno>:
 8007d90:	4b01      	ldr	r3, [pc, #4]	@ (8007d98 <__errno+0x8>)
 8007d92:	6818      	ldr	r0, [r3, #0]
 8007d94:	4770      	bx	lr
 8007d96:	bf00      	nop
 8007d98:	200000fc 	.word	0x200000fc

08007d9c <__libc_init_array>:
 8007d9c:	b570      	push	{r4, r5, r6, lr}
 8007d9e:	4d0d      	ldr	r5, [pc, #52]	@ (8007dd4 <__libc_init_array+0x38>)
 8007da0:	4c0d      	ldr	r4, [pc, #52]	@ (8007dd8 <__libc_init_array+0x3c>)
 8007da2:	1b64      	subs	r4, r4, r5
 8007da4:	10a4      	asrs	r4, r4, #2
 8007da6:	2600      	movs	r6, #0
 8007da8:	42a6      	cmp	r6, r4
 8007daa:	d109      	bne.n	8007dc0 <__libc_init_array+0x24>
 8007dac:	4d0b      	ldr	r5, [pc, #44]	@ (8007ddc <__libc_init_array+0x40>)
 8007dae:	4c0c      	ldr	r4, [pc, #48]	@ (8007de0 <__libc_init_array+0x44>)
 8007db0:	f000 fc66 	bl	8008680 <_init>
 8007db4:	1b64      	subs	r4, r4, r5
 8007db6:	10a4      	asrs	r4, r4, #2
 8007db8:	2600      	movs	r6, #0
 8007dba:	42a6      	cmp	r6, r4
 8007dbc:	d105      	bne.n	8007dca <__libc_init_array+0x2e>
 8007dbe:	bd70      	pop	{r4, r5, r6, pc}
 8007dc0:	f855 3b04 	ldr.w	r3, [r5], #4
 8007dc4:	4798      	blx	r3
 8007dc6:	3601      	adds	r6, #1
 8007dc8:	e7ee      	b.n	8007da8 <__libc_init_array+0xc>
 8007dca:	f855 3b04 	ldr.w	r3, [r5], #4
 8007dce:	4798      	blx	r3
 8007dd0:	3601      	adds	r6, #1
 8007dd2:	e7f2      	b.n	8007dba <__libc_init_array+0x1e>
 8007dd4:	08008744 	.word	0x08008744
 8007dd8:	08008744 	.word	0x08008744
 8007ddc:	08008744 	.word	0x08008744
 8007de0:	08008748 	.word	0x08008748

08007de4 <__retarget_lock_acquire_recursive>:
 8007de4:	4770      	bx	lr

08007de6 <__retarget_lock_release_recursive>:
 8007de6:	4770      	bx	lr

08007de8 <_free_r>:
 8007de8:	b538      	push	{r3, r4, r5, lr}
 8007dea:	4605      	mov	r5, r0
 8007dec:	2900      	cmp	r1, #0
 8007dee:	d041      	beq.n	8007e74 <_free_r+0x8c>
 8007df0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007df4:	1f0c      	subs	r4, r1, #4
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	bfb8      	it	lt
 8007dfa:	18e4      	addlt	r4, r4, r3
 8007dfc:	f000 f8e0 	bl	8007fc0 <__malloc_lock>
 8007e00:	4a1d      	ldr	r2, [pc, #116]	@ (8007e78 <_free_r+0x90>)
 8007e02:	6813      	ldr	r3, [r2, #0]
 8007e04:	b933      	cbnz	r3, 8007e14 <_free_r+0x2c>
 8007e06:	6063      	str	r3, [r4, #4]
 8007e08:	6014      	str	r4, [r2, #0]
 8007e0a:	4628      	mov	r0, r5
 8007e0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007e10:	f000 b8dc 	b.w	8007fcc <__malloc_unlock>
 8007e14:	42a3      	cmp	r3, r4
 8007e16:	d908      	bls.n	8007e2a <_free_r+0x42>
 8007e18:	6820      	ldr	r0, [r4, #0]
 8007e1a:	1821      	adds	r1, r4, r0
 8007e1c:	428b      	cmp	r3, r1
 8007e1e:	bf01      	itttt	eq
 8007e20:	6819      	ldreq	r1, [r3, #0]
 8007e22:	685b      	ldreq	r3, [r3, #4]
 8007e24:	1809      	addeq	r1, r1, r0
 8007e26:	6021      	streq	r1, [r4, #0]
 8007e28:	e7ed      	b.n	8007e06 <_free_r+0x1e>
 8007e2a:	461a      	mov	r2, r3
 8007e2c:	685b      	ldr	r3, [r3, #4]
 8007e2e:	b10b      	cbz	r3, 8007e34 <_free_r+0x4c>
 8007e30:	42a3      	cmp	r3, r4
 8007e32:	d9fa      	bls.n	8007e2a <_free_r+0x42>
 8007e34:	6811      	ldr	r1, [r2, #0]
 8007e36:	1850      	adds	r0, r2, r1
 8007e38:	42a0      	cmp	r0, r4
 8007e3a:	d10b      	bne.n	8007e54 <_free_r+0x6c>
 8007e3c:	6820      	ldr	r0, [r4, #0]
 8007e3e:	4401      	add	r1, r0
 8007e40:	1850      	adds	r0, r2, r1
 8007e42:	4283      	cmp	r3, r0
 8007e44:	6011      	str	r1, [r2, #0]
 8007e46:	d1e0      	bne.n	8007e0a <_free_r+0x22>
 8007e48:	6818      	ldr	r0, [r3, #0]
 8007e4a:	685b      	ldr	r3, [r3, #4]
 8007e4c:	6053      	str	r3, [r2, #4]
 8007e4e:	4408      	add	r0, r1
 8007e50:	6010      	str	r0, [r2, #0]
 8007e52:	e7da      	b.n	8007e0a <_free_r+0x22>
 8007e54:	d902      	bls.n	8007e5c <_free_r+0x74>
 8007e56:	230c      	movs	r3, #12
 8007e58:	602b      	str	r3, [r5, #0]
 8007e5a:	e7d6      	b.n	8007e0a <_free_r+0x22>
 8007e5c:	6820      	ldr	r0, [r4, #0]
 8007e5e:	1821      	adds	r1, r4, r0
 8007e60:	428b      	cmp	r3, r1
 8007e62:	bf04      	itt	eq
 8007e64:	6819      	ldreq	r1, [r3, #0]
 8007e66:	685b      	ldreq	r3, [r3, #4]
 8007e68:	6063      	str	r3, [r4, #4]
 8007e6a:	bf04      	itt	eq
 8007e6c:	1809      	addeq	r1, r1, r0
 8007e6e:	6021      	streq	r1, [r4, #0]
 8007e70:	6054      	str	r4, [r2, #4]
 8007e72:	e7ca      	b.n	8007e0a <_free_r+0x22>
 8007e74:	bd38      	pop	{r3, r4, r5, pc}
 8007e76:	bf00      	nop
 8007e78:	20001eac 	.word	0x20001eac

08007e7c <sbrk_aligned>:
 8007e7c:	b570      	push	{r4, r5, r6, lr}
 8007e7e:	4e0f      	ldr	r6, [pc, #60]	@ (8007ebc <sbrk_aligned+0x40>)
 8007e80:	460c      	mov	r4, r1
 8007e82:	6831      	ldr	r1, [r6, #0]
 8007e84:	4605      	mov	r5, r0
 8007e86:	b911      	cbnz	r1, 8007e8e <sbrk_aligned+0x12>
 8007e88:	f000 fba6 	bl	80085d8 <_sbrk_r>
 8007e8c:	6030      	str	r0, [r6, #0]
 8007e8e:	4621      	mov	r1, r4
 8007e90:	4628      	mov	r0, r5
 8007e92:	f000 fba1 	bl	80085d8 <_sbrk_r>
 8007e96:	1c43      	adds	r3, r0, #1
 8007e98:	d103      	bne.n	8007ea2 <sbrk_aligned+0x26>
 8007e9a:	f04f 34ff 	mov.w	r4, #4294967295
 8007e9e:	4620      	mov	r0, r4
 8007ea0:	bd70      	pop	{r4, r5, r6, pc}
 8007ea2:	1cc4      	adds	r4, r0, #3
 8007ea4:	f024 0403 	bic.w	r4, r4, #3
 8007ea8:	42a0      	cmp	r0, r4
 8007eaa:	d0f8      	beq.n	8007e9e <sbrk_aligned+0x22>
 8007eac:	1a21      	subs	r1, r4, r0
 8007eae:	4628      	mov	r0, r5
 8007eb0:	f000 fb92 	bl	80085d8 <_sbrk_r>
 8007eb4:	3001      	adds	r0, #1
 8007eb6:	d1f2      	bne.n	8007e9e <sbrk_aligned+0x22>
 8007eb8:	e7ef      	b.n	8007e9a <sbrk_aligned+0x1e>
 8007eba:	bf00      	nop
 8007ebc:	20001ea8 	.word	0x20001ea8

08007ec0 <_malloc_r>:
 8007ec0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007ec4:	1ccd      	adds	r5, r1, #3
 8007ec6:	f025 0503 	bic.w	r5, r5, #3
 8007eca:	3508      	adds	r5, #8
 8007ecc:	2d0c      	cmp	r5, #12
 8007ece:	bf38      	it	cc
 8007ed0:	250c      	movcc	r5, #12
 8007ed2:	2d00      	cmp	r5, #0
 8007ed4:	4606      	mov	r6, r0
 8007ed6:	db01      	blt.n	8007edc <_malloc_r+0x1c>
 8007ed8:	42a9      	cmp	r1, r5
 8007eda:	d904      	bls.n	8007ee6 <_malloc_r+0x26>
 8007edc:	230c      	movs	r3, #12
 8007ede:	6033      	str	r3, [r6, #0]
 8007ee0:	2000      	movs	r0, #0
 8007ee2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007ee6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007fbc <_malloc_r+0xfc>
 8007eea:	f000 f869 	bl	8007fc0 <__malloc_lock>
 8007eee:	f8d8 3000 	ldr.w	r3, [r8]
 8007ef2:	461c      	mov	r4, r3
 8007ef4:	bb44      	cbnz	r4, 8007f48 <_malloc_r+0x88>
 8007ef6:	4629      	mov	r1, r5
 8007ef8:	4630      	mov	r0, r6
 8007efa:	f7ff ffbf 	bl	8007e7c <sbrk_aligned>
 8007efe:	1c43      	adds	r3, r0, #1
 8007f00:	4604      	mov	r4, r0
 8007f02:	d158      	bne.n	8007fb6 <_malloc_r+0xf6>
 8007f04:	f8d8 4000 	ldr.w	r4, [r8]
 8007f08:	4627      	mov	r7, r4
 8007f0a:	2f00      	cmp	r7, #0
 8007f0c:	d143      	bne.n	8007f96 <_malloc_r+0xd6>
 8007f0e:	2c00      	cmp	r4, #0
 8007f10:	d04b      	beq.n	8007faa <_malloc_r+0xea>
 8007f12:	6823      	ldr	r3, [r4, #0]
 8007f14:	4639      	mov	r1, r7
 8007f16:	4630      	mov	r0, r6
 8007f18:	eb04 0903 	add.w	r9, r4, r3
 8007f1c:	f000 fb5c 	bl	80085d8 <_sbrk_r>
 8007f20:	4581      	cmp	r9, r0
 8007f22:	d142      	bne.n	8007faa <_malloc_r+0xea>
 8007f24:	6821      	ldr	r1, [r4, #0]
 8007f26:	1a6d      	subs	r5, r5, r1
 8007f28:	4629      	mov	r1, r5
 8007f2a:	4630      	mov	r0, r6
 8007f2c:	f7ff ffa6 	bl	8007e7c <sbrk_aligned>
 8007f30:	3001      	adds	r0, #1
 8007f32:	d03a      	beq.n	8007faa <_malloc_r+0xea>
 8007f34:	6823      	ldr	r3, [r4, #0]
 8007f36:	442b      	add	r3, r5
 8007f38:	6023      	str	r3, [r4, #0]
 8007f3a:	f8d8 3000 	ldr.w	r3, [r8]
 8007f3e:	685a      	ldr	r2, [r3, #4]
 8007f40:	bb62      	cbnz	r2, 8007f9c <_malloc_r+0xdc>
 8007f42:	f8c8 7000 	str.w	r7, [r8]
 8007f46:	e00f      	b.n	8007f68 <_malloc_r+0xa8>
 8007f48:	6822      	ldr	r2, [r4, #0]
 8007f4a:	1b52      	subs	r2, r2, r5
 8007f4c:	d420      	bmi.n	8007f90 <_malloc_r+0xd0>
 8007f4e:	2a0b      	cmp	r2, #11
 8007f50:	d917      	bls.n	8007f82 <_malloc_r+0xc2>
 8007f52:	1961      	adds	r1, r4, r5
 8007f54:	42a3      	cmp	r3, r4
 8007f56:	6025      	str	r5, [r4, #0]
 8007f58:	bf18      	it	ne
 8007f5a:	6059      	strne	r1, [r3, #4]
 8007f5c:	6863      	ldr	r3, [r4, #4]
 8007f5e:	bf08      	it	eq
 8007f60:	f8c8 1000 	streq.w	r1, [r8]
 8007f64:	5162      	str	r2, [r4, r5]
 8007f66:	604b      	str	r3, [r1, #4]
 8007f68:	4630      	mov	r0, r6
 8007f6a:	f000 f82f 	bl	8007fcc <__malloc_unlock>
 8007f6e:	f104 000b 	add.w	r0, r4, #11
 8007f72:	1d23      	adds	r3, r4, #4
 8007f74:	f020 0007 	bic.w	r0, r0, #7
 8007f78:	1ac2      	subs	r2, r0, r3
 8007f7a:	bf1c      	itt	ne
 8007f7c:	1a1b      	subne	r3, r3, r0
 8007f7e:	50a3      	strne	r3, [r4, r2]
 8007f80:	e7af      	b.n	8007ee2 <_malloc_r+0x22>
 8007f82:	6862      	ldr	r2, [r4, #4]
 8007f84:	42a3      	cmp	r3, r4
 8007f86:	bf0c      	ite	eq
 8007f88:	f8c8 2000 	streq.w	r2, [r8]
 8007f8c:	605a      	strne	r2, [r3, #4]
 8007f8e:	e7eb      	b.n	8007f68 <_malloc_r+0xa8>
 8007f90:	4623      	mov	r3, r4
 8007f92:	6864      	ldr	r4, [r4, #4]
 8007f94:	e7ae      	b.n	8007ef4 <_malloc_r+0x34>
 8007f96:	463c      	mov	r4, r7
 8007f98:	687f      	ldr	r7, [r7, #4]
 8007f9a:	e7b6      	b.n	8007f0a <_malloc_r+0x4a>
 8007f9c:	461a      	mov	r2, r3
 8007f9e:	685b      	ldr	r3, [r3, #4]
 8007fa0:	42a3      	cmp	r3, r4
 8007fa2:	d1fb      	bne.n	8007f9c <_malloc_r+0xdc>
 8007fa4:	2300      	movs	r3, #0
 8007fa6:	6053      	str	r3, [r2, #4]
 8007fa8:	e7de      	b.n	8007f68 <_malloc_r+0xa8>
 8007faa:	230c      	movs	r3, #12
 8007fac:	6033      	str	r3, [r6, #0]
 8007fae:	4630      	mov	r0, r6
 8007fb0:	f000 f80c 	bl	8007fcc <__malloc_unlock>
 8007fb4:	e794      	b.n	8007ee0 <_malloc_r+0x20>
 8007fb6:	6005      	str	r5, [r0, #0]
 8007fb8:	e7d6      	b.n	8007f68 <_malloc_r+0xa8>
 8007fba:	bf00      	nop
 8007fbc:	20001eac 	.word	0x20001eac

08007fc0 <__malloc_lock>:
 8007fc0:	4801      	ldr	r0, [pc, #4]	@ (8007fc8 <__malloc_lock+0x8>)
 8007fc2:	f7ff bf0f 	b.w	8007de4 <__retarget_lock_acquire_recursive>
 8007fc6:	bf00      	nop
 8007fc8:	20001ea4 	.word	0x20001ea4

08007fcc <__malloc_unlock>:
 8007fcc:	4801      	ldr	r0, [pc, #4]	@ (8007fd4 <__malloc_unlock+0x8>)
 8007fce:	f7ff bf0a 	b.w	8007de6 <__retarget_lock_release_recursive>
 8007fd2:	bf00      	nop
 8007fd4:	20001ea4 	.word	0x20001ea4

08007fd8 <__ssputs_r>:
 8007fd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007fdc:	688e      	ldr	r6, [r1, #8]
 8007fde:	461f      	mov	r7, r3
 8007fe0:	42be      	cmp	r6, r7
 8007fe2:	680b      	ldr	r3, [r1, #0]
 8007fe4:	4682      	mov	sl, r0
 8007fe6:	460c      	mov	r4, r1
 8007fe8:	4690      	mov	r8, r2
 8007fea:	d82d      	bhi.n	8008048 <__ssputs_r+0x70>
 8007fec:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007ff0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8007ff4:	d026      	beq.n	8008044 <__ssputs_r+0x6c>
 8007ff6:	6965      	ldr	r5, [r4, #20]
 8007ff8:	6909      	ldr	r1, [r1, #16]
 8007ffa:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007ffe:	eba3 0901 	sub.w	r9, r3, r1
 8008002:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008006:	1c7b      	adds	r3, r7, #1
 8008008:	444b      	add	r3, r9
 800800a:	106d      	asrs	r5, r5, #1
 800800c:	429d      	cmp	r5, r3
 800800e:	bf38      	it	cc
 8008010:	461d      	movcc	r5, r3
 8008012:	0553      	lsls	r3, r2, #21
 8008014:	d527      	bpl.n	8008066 <__ssputs_r+0x8e>
 8008016:	4629      	mov	r1, r5
 8008018:	f7ff ff52 	bl	8007ec0 <_malloc_r>
 800801c:	4606      	mov	r6, r0
 800801e:	b360      	cbz	r0, 800807a <__ssputs_r+0xa2>
 8008020:	6921      	ldr	r1, [r4, #16]
 8008022:	464a      	mov	r2, r9
 8008024:	f000 fae8 	bl	80085f8 <memcpy>
 8008028:	89a3      	ldrh	r3, [r4, #12]
 800802a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800802e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008032:	81a3      	strh	r3, [r4, #12]
 8008034:	6126      	str	r6, [r4, #16]
 8008036:	6165      	str	r5, [r4, #20]
 8008038:	444e      	add	r6, r9
 800803a:	eba5 0509 	sub.w	r5, r5, r9
 800803e:	6026      	str	r6, [r4, #0]
 8008040:	60a5      	str	r5, [r4, #8]
 8008042:	463e      	mov	r6, r7
 8008044:	42be      	cmp	r6, r7
 8008046:	d900      	bls.n	800804a <__ssputs_r+0x72>
 8008048:	463e      	mov	r6, r7
 800804a:	6820      	ldr	r0, [r4, #0]
 800804c:	4632      	mov	r2, r6
 800804e:	4641      	mov	r1, r8
 8008050:	f000 faa8 	bl	80085a4 <memmove>
 8008054:	68a3      	ldr	r3, [r4, #8]
 8008056:	1b9b      	subs	r3, r3, r6
 8008058:	60a3      	str	r3, [r4, #8]
 800805a:	6823      	ldr	r3, [r4, #0]
 800805c:	4433      	add	r3, r6
 800805e:	6023      	str	r3, [r4, #0]
 8008060:	2000      	movs	r0, #0
 8008062:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008066:	462a      	mov	r2, r5
 8008068:	f000 fad4 	bl	8008614 <_realloc_r>
 800806c:	4606      	mov	r6, r0
 800806e:	2800      	cmp	r0, #0
 8008070:	d1e0      	bne.n	8008034 <__ssputs_r+0x5c>
 8008072:	6921      	ldr	r1, [r4, #16]
 8008074:	4650      	mov	r0, sl
 8008076:	f7ff feb7 	bl	8007de8 <_free_r>
 800807a:	230c      	movs	r3, #12
 800807c:	f8ca 3000 	str.w	r3, [sl]
 8008080:	89a3      	ldrh	r3, [r4, #12]
 8008082:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008086:	81a3      	strh	r3, [r4, #12]
 8008088:	f04f 30ff 	mov.w	r0, #4294967295
 800808c:	e7e9      	b.n	8008062 <__ssputs_r+0x8a>
	...

08008090 <_svfiprintf_r>:
 8008090:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008094:	4698      	mov	r8, r3
 8008096:	898b      	ldrh	r3, [r1, #12]
 8008098:	061b      	lsls	r3, r3, #24
 800809a:	b09d      	sub	sp, #116	@ 0x74
 800809c:	4607      	mov	r7, r0
 800809e:	460d      	mov	r5, r1
 80080a0:	4614      	mov	r4, r2
 80080a2:	d510      	bpl.n	80080c6 <_svfiprintf_r+0x36>
 80080a4:	690b      	ldr	r3, [r1, #16]
 80080a6:	b973      	cbnz	r3, 80080c6 <_svfiprintf_r+0x36>
 80080a8:	2140      	movs	r1, #64	@ 0x40
 80080aa:	f7ff ff09 	bl	8007ec0 <_malloc_r>
 80080ae:	6028      	str	r0, [r5, #0]
 80080b0:	6128      	str	r0, [r5, #16]
 80080b2:	b930      	cbnz	r0, 80080c2 <_svfiprintf_r+0x32>
 80080b4:	230c      	movs	r3, #12
 80080b6:	603b      	str	r3, [r7, #0]
 80080b8:	f04f 30ff 	mov.w	r0, #4294967295
 80080bc:	b01d      	add	sp, #116	@ 0x74
 80080be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80080c2:	2340      	movs	r3, #64	@ 0x40
 80080c4:	616b      	str	r3, [r5, #20]
 80080c6:	2300      	movs	r3, #0
 80080c8:	9309      	str	r3, [sp, #36]	@ 0x24
 80080ca:	2320      	movs	r3, #32
 80080cc:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80080d0:	f8cd 800c 	str.w	r8, [sp, #12]
 80080d4:	2330      	movs	r3, #48	@ 0x30
 80080d6:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8008274 <_svfiprintf_r+0x1e4>
 80080da:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80080de:	f04f 0901 	mov.w	r9, #1
 80080e2:	4623      	mov	r3, r4
 80080e4:	469a      	mov	sl, r3
 80080e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80080ea:	b10a      	cbz	r2, 80080f0 <_svfiprintf_r+0x60>
 80080ec:	2a25      	cmp	r2, #37	@ 0x25
 80080ee:	d1f9      	bne.n	80080e4 <_svfiprintf_r+0x54>
 80080f0:	ebba 0b04 	subs.w	fp, sl, r4
 80080f4:	d00b      	beq.n	800810e <_svfiprintf_r+0x7e>
 80080f6:	465b      	mov	r3, fp
 80080f8:	4622      	mov	r2, r4
 80080fa:	4629      	mov	r1, r5
 80080fc:	4638      	mov	r0, r7
 80080fe:	f7ff ff6b 	bl	8007fd8 <__ssputs_r>
 8008102:	3001      	adds	r0, #1
 8008104:	f000 80a7 	beq.w	8008256 <_svfiprintf_r+0x1c6>
 8008108:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800810a:	445a      	add	r2, fp
 800810c:	9209      	str	r2, [sp, #36]	@ 0x24
 800810e:	f89a 3000 	ldrb.w	r3, [sl]
 8008112:	2b00      	cmp	r3, #0
 8008114:	f000 809f 	beq.w	8008256 <_svfiprintf_r+0x1c6>
 8008118:	2300      	movs	r3, #0
 800811a:	f04f 32ff 	mov.w	r2, #4294967295
 800811e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008122:	f10a 0a01 	add.w	sl, sl, #1
 8008126:	9304      	str	r3, [sp, #16]
 8008128:	9307      	str	r3, [sp, #28]
 800812a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800812e:	931a      	str	r3, [sp, #104]	@ 0x68
 8008130:	4654      	mov	r4, sl
 8008132:	2205      	movs	r2, #5
 8008134:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008138:	484e      	ldr	r0, [pc, #312]	@ (8008274 <_svfiprintf_r+0x1e4>)
 800813a:	f7f8 f851 	bl	80001e0 <memchr>
 800813e:	9a04      	ldr	r2, [sp, #16]
 8008140:	b9d8      	cbnz	r0, 800817a <_svfiprintf_r+0xea>
 8008142:	06d0      	lsls	r0, r2, #27
 8008144:	bf44      	itt	mi
 8008146:	2320      	movmi	r3, #32
 8008148:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800814c:	0711      	lsls	r1, r2, #28
 800814e:	bf44      	itt	mi
 8008150:	232b      	movmi	r3, #43	@ 0x2b
 8008152:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008156:	f89a 3000 	ldrb.w	r3, [sl]
 800815a:	2b2a      	cmp	r3, #42	@ 0x2a
 800815c:	d015      	beq.n	800818a <_svfiprintf_r+0xfa>
 800815e:	9a07      	ldr	r2, [sp, #28]
 8008160:	4654      	mov	r4, sl
 8008162:	2000      	movs	r0, #0
 8008164:	f04f 0c0a 	mov.w	ip, #10
 8008168:	4621      	mov	r1, r4
 800816a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800816e:	3b30      	subs	r3, #48	@ 0x30
 8008170:	2b09      	cmp	r3, #9
 8008172:	d94b      	bls.n	800820c <_svfiprintf_r+0x17c>
 8008174:	b1b0      	cbz	r0, 80081a4 <_svfiprintf_r+0x114>
 8008176:	9207      	str	r2, [sp, #28]
 8008178:	e014      	b.n	80081a4 <_svfiprintf_r+0x114>
 800817a:	eba0 0308 	sub.w	r3, r0, r8
 800817e:	fa09 f303 	lsl.w	r3, r9, r3
 8008182:	4313      	orrs	r3, r2
 8008184:	9304      	str	r3, [sp, #16]
 8008186:	46a2      	mov	sl, r4
 8008188:	e7d2      	b.n	8008130 <_svfiprintf_r+0xa0>
 800818a:	9b03      	ldr	r3, [sp, #12]
 800818c:	1d19      	adds	r1, r3, #4
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	9103      	str	r1, [sp, #12]
 8008192:	2b00      	cmp	r3, #0
 8008194:	bfbb      	ittet	lt
 8008196:	425b      	neglt	r3, r3
 8008198:	f042 0202 	orrlt.w	r2, r2, #2
 800819c:	9307      	strge	r3, [sp, #28]
 800819e:	9307      	strlt	r3, [sp, #28]
 80081a0:	bfb8      	it	lt
 80081a2:	9204      	strlt	r2, [sp, #16]
 80081a4:	7823      	ldrb	r3, [r4, #0]
 80081a6:	2b2e      	cmp	r3, #46	@ 0x2e
 80081a8:	d10a      	bne.n	80081c0 <_svfiprintf_r+0x130>
 80081aa:	7863      	ldrb	r3, [r4, #1]
 80081ac:	2b2a      	cmp	r3, #42	@ 0x2a
 80081ae:	d132      	bne.n	8008216 <_svfiprintf_r+0x186>
 80081b0:	9b03      	ldr	r3, [sp, #12]
 80081b2:	1d1a      	adds	r2, r3, #4
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	9203      	str	r2, [sp, #12]
 80081b8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80081bc:	3402      	adds	r4, #2
 80081be:	9305      	str	r3, [sp, #20]
 80081c0:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8008284 <_svfiprintf_r+0x1f4>
 80081c4:	7821      	ldrb	r1, [r4, #0]
 80081c6:	2203      	movs	r2, #3
 80081c8:	4650      	mov	r0, sl
 80081ca:	f7f8 f809 	bl	80001e0 <memchr>
 80081ce:	b138      	cbz	r0, 80081e0 <_svfiprintf_r+0x150>
 80081d0:	9b04      	ldr	r3, [sp, #16]
 80081d2:	eba0 000a 	sub.w	r0, r0, sl
 80081d6:	2240      	movs	r2, #64	@ 0x40
 80081d8:	4082      	lsls	r2, r0
 80081da:	4313      	orrs	r3, r2
 80081dc:	3401      	adds	r4, #1
 80081de:	9304      	str	r3, [sp, #16]
 80081e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80081e4:	4824      	ldr	r0, [pc, #144]	@ (8008278 <_svfiprintf_r+0x1e8>)
 80081e6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80081ea:	2206      	movs	r2, #6
 80081ec:	f7f7 fff8 	bl	80001e0 <memchr>
 80081f0:	2800      	cmp	r0, #0
 80081f2:	d036      	beq.n	8008262 <_svfiprintf_r+0x1d2>
 80081f4:	4b21      	ldr	r3, [pc, #132]	@ (800827c <_svfiprintf_r+0x1ec>)
 80081f6:	bb1b      	cbnz	r3, 8008240 <_svfiprintf_r+0x1b0>
 80081f8:	9b03      	ldr	r3, [sp, #12]
 80081fa:	3307      	adds	r3, #7
 80081fc:	f023 0307 	bic.w	r3, r3, #7
 8008200:	3308      	adds	r3, #8
 8008202:	9303      	str	r3, [sp, #12]
 8008204:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008206:	4433      	add	r3, r6
 8008208:	9309      	str	r3, [sp, #36]	@ 0x24
 800820a:	e76a      	b.n	80080e2 <_svfiprintf_r+0x52>
 800820c:	fb0c 3202 	mla	r2, ip, r2, r3
 8008210:	460c      	mov	r4, r1
 8008212:	2001      	movs	r0, #1
 8008214:	e7a8      	b.n	8008168 <_svfiprintf_r+0xd8>
 8008216:	2300      	movs	r3, #0
 8008218:	3401      	adds	r4, #1
 800821a:	9305      	str	r3, [sp, #20]
 800821c:	4619      	mov	r1, r3
 800821e:	f04f 0c0a 	mov.w	ip, #10
 8008222:	4620      	mov	r0, r4
 8008224:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008228:	3a30      	subs	r2, #48	@ 0x30
 800822a:	2a09      	cmp	r2, #9
 800822c:	d903      	bls.n	8008236 <_svfiprintf_r+0x1a6>
 800822e:	2b00      	cmp	r3, #0
 8008230:	d0c6      	beq.n	80081c0 <_svfiprintf_r+0x130>
 8008232:	9105      	str	r1, [sp, #20]
 8008234:	e7c4      	b.n	80081c0 <_svfiprintf_r+0x130>
 8008236:	fb0c 2101 	mla	r1, ip, r1, r2
 800823a:	4604      	mov	r4, r0
 800823c:	2301      	movs	r3, #1
 800823e:	e7f0      	b.n	8008222 <_svfiprintf_r+0x192>
 8008240:	ab03      	add	r3, sp, #12
 8008242:	9300      	str	r3, [sp, #0]
 8008244:	462a      	mov	r2, r5
 8008246:	4b0e      	ldr	r3, [pc, #56]	@ (8008280 <_svfiprintf_r+0x1f0>)
 8008248:	a904      	add	r1, sp, #16
 800824a:	4638      	mov	r0, r7
 800824c:	f3af 8000 	nop.w
 8008250:	1c42      	adds	r2, r0, #1
 8008252:	4606      	mov	r6, r0
 8008254:	d1d6      	bne.n	8008204 <_svfiprintf_r+0x174>
 8008256:	89ab      	ldrh	r3, [r5, #12]
 8008258:	065b      	lsls	r3, r3, #25
 800825a:	f53f af2d 	bmi.w	80080b8 <_svfiprintf_r+0x28>
 800825e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008260:	e72c      	b.n	80080bc <_svfiprintf_r+0x2c>
 8008262:	ab03      	add	r3, sp, #12
 8008264:	9300      	str	r3, [sp, #0]
 8008266:	462a      	mov	r2, r5
 8008268:	4b05      	ldr	r3, [pc, #20]	@ (8008280 <_svfiprintf_r+0x1f0>)
 800826a:	a904      	add	r1, sp, #16
 800826c:	4638      	mov	r0, r7
 800826e:	f000 f879 	bl	8008364 <_printf_i>
 8008272:	e7ed      	b.n	8008250 <_svfiprintf_r+0x1c0>
 8008274:	08008708 	.word	0x08008708
 8008278:	08008712 	.word	0x08008712
 800827c:	00000000 	.word	0x00000000
 8008280:	08007fd9 	.word	0x08007fd9
 8008284:	0800870e 	.word	0x0800870e

08008288 <_printf_common>:
 8008288:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800828c:	4616      	mov	r6, r2
 800828e:	4698      	mov	r8, r3
 8008290:	688a      	ldr	r2, [r1, #8]
 8008292:	690b      	ldr	r3, [r1, #16]
 8008294:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008298:	4293      	cmp	r3, r2
 800829a:	bfb8      	it	lt
 800829c:	4613      	movlt	r3, r2
 800829e:	6033      	str	r3, [r6, #0]
 80082a0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80082a4:	4607      	mov	r7, r0
 80082a6:	460c      	mov	r4, r1
 80082a8:	b10a      	cbz	r2, 80082ae <_printf_common+0x26>
 80082aa:	3301      	adds	r3, #1
 80082ac:	6033      	str	r3, [r6, #0]
 80082ae:	6823      	ldr	r3, [r4, #0]
 80082b0:	0699      	lsls	r1, r3, #26
 80082b2:	bf42      	ittt	mi
 80082b4:	6833      	ldrmi	r3, [r6, #0]
 80082b6:	3302      	addmi	r3, #2
 80082b8:	6033      	strmi	r3, [r6, #0]
 80082ba:	6825      	ldr	r5, [r4, #0]
 80082bc:	f015 0506 	ands.w	r5, r5, #6
 80082c0:	d106      	bne.n	80082d0 <_printf_common+0x48>
 80082c2:	f104 0a19 	add.w	sl, r4, #25
 80082c6:	68e3      	ldr	r3, [r4, #12]
 80082c8:	6832      	ldr	r2, [r6, #0]
 80082ca:	1a9b      	subs	r3, r3, r2
 80082cc:	42ab      	cmp	r3, r5
 80082ce:	dc26      	bgt.n	800831e <_printf_common+0x96>
 80082d0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80082d4:	6822      	ldr	r2, [r4, #0]
 80082d6:	3b00      	subs	r3, #0
 80082d8:	bf18      	it	ne
 80082da:	2301      	movne	r3, #1
 80082dc:	0692      	lsls	r2, r2, #26
 80082de:	d42b      	bmi.n	8008338 <_printf_common+0xb0>
 80082e0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80082e4:	4641      	mov	r1, r8
 80082e6:	4638      	mov	r0, r7
 80082e8:	47c8      	blx	r9
 80082ea:	3001      	adds	r0, #1
 80082ec:	d01e      	beq.n	800832c <_printf_common+0xa4>
 80082ee:	6823      	ldr	r3, [r4, #0]
 80082f0:	6922      	ldr	r2, [r4, #16]
 80082f2:	f003 0306 	and.w	r3, r3, #6
 80082f6:	2b04      	cmp	r3, #4
 80082f8:	bf02      	ittt	eq
 80082fa:	68e5      	ldreq	r5, [r4, #12]
 80082fc:	6833      	ldreq	r3, [r6, #0]
 80082fe:	1aed      	subeq	r5, r5, r3
 8008300:	68a3      	ldr	r3, [r4, #8]
 8008302:	bf0c      	ite	eq
 8008304:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008308:	2500      	movne	r5, #0
 800830a:	4293      	cmp	r3, r2
 800830c:	bfc4      	itt	gt
 800830e:	1a9b      	subgt	r3, r3, r2
 8008310:	18ed      	addgt	r5, r5, r3
 8008312:	2600      	movs	r6, #0
 8008314:	341a      	adds	r4, #26
 8008316:	42b5      	cmp	r5, r6
 8008318:	d11a      	bne.n	8008350 <_printf_common+0xc8>
 800831a:	2000      	movs	r0, #0
 800831c:	e008      	b.n	8008330 <_printf_common+0xa8>
 800831e:	2301      	movs	r3, #1
 8008320:	4652      	mov	r2, sl
 8008322:	4641      	mov	r1, r8
 8008324:	4638      	mov	r0, r7
 8008326:	47c8      	blx	r9
 8008328:	3001      	adds	r0, #1
 800832a:	d103      	bne.n	8008334 <_printf_common+0xac>
 800832c:	f04f 30ff 	mov.w	r0, #4294967295
 8008330:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008334:	3501      	adds	r5, #1
 8008336:	e7c6      	b.n	80082c6 <_printf_common+0x3e>
 8008338:	18e1      	adds	r1, r4, r3
 800833a:	1c5a      	adds	r2, r3, #1
 800833c:	2030      	movs	r0, #48	@ 0x30
 800833e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8008342:	4422      	add	r2, r4
 8008344:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008348:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800834c:	3302      	adds	r3, #2
 800834e:	e7c7      	b.n	80082e0 <_printf_common+0x58>
 8008350:	2301      	movs	r3, #1
 8008352:	4622      	mov	r2, r4
 8008354:	4641      	mov	r1, r8
 8008356:	4638      	mov	r0, r7
 8008358:	47c8      	blx	r9
 800835a:	3001      	adds	r0, #1
 800835c:	d0e6      	beq.n	800832c <_printf_common+0xa4>
 800835e:	3601      	adds	r6, #1
 8008360:	e7d9      	b.n	8008316 <_printf_common+0x8e>
	...

08008364 <_printf_i>:
 8008364:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008368:	7e0f      	ldrb	r7, [r1, #24]
 800836a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800836c:	2f78      	cmp	r7, #120	@ 0x78
 800836e:	4691      	mov	r9, r2
 8008370:	4680      	mov	r8, r0
 8008372:	460c      	mov	r4, r1
 8008374:	469a      	mov	sl, r3
 8008376:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800837a:	d807      	bhi.n	800838c <_printf_i+0x28>
 800837c:	2f62      	cmp	r7, #98	@ 0x62
 800837e:	d80a      	bhi.n	8008396 <_printf_i+0x32>
 8008380:	2f00      	cmp	r7, #0
 8008382:	f000 80d2 	beq.w	800852a <_printf_i+0x1c6>
 8008386:	2f58      	cmp	r7, #88	@ 0x58
 8008388:	f000 80b9 	beq.w	80084fe <_printf_i+0x19a>
 800838c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008390:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008394:	e03a      	b.n	800840c <_printf_i+0xa8>
 8008396:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800839a:	2b15      	cmp	r3, #21
 800839c:	d8f6      	bhi.n	800838c <_printf_i+0x28>
 800839e:	a101      	add	r1, pc, #4	@ (adr r1, 80083a4 <_printf_i+0x40>)
 80083a0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80083a4:	080083fd 	.word	0x080083fd
 80083a8:	08008411 	.word	0x08008411
 80083ac:	0800838d 	.word	0x0800838d
 80083b0:	0800838d 	.word	0x0800838d
 80083b4:	0800838d 	.word	0x0800838d
 80083b8:	0800838d 	.word	0x0800838d
 80083bc:	08008411 	.word	0x08008411
 80083c0:	0800838d 	.word	0x0800838d
 80083c4:	0800838d 	.word	0x0800838d
 80083c8:	0800838d 	.word	0x0800838d
 80083cc:	0800838d 	.word	0x0800838d
 80083d0:	08008511 	.word	0x08008511
 80083d4:	0800843b 	.word	0x0800843b
 80083d8:	080084cb 	.word	0x080084cb
 80083dc:	0800838d 	.word	0x0800838d
 80083e0:	0800838d 	.word	0x0800838d
 80083e4:	08008533 	.word	0x08008533
 80083e8:	0800838d 	.word	0x0800838d
 80083ec:	0800843b 	.word	0x0800843b
 80083f0:	0800838d 	.word	0x0800838d
 80083f4:	0800838d 	.word	0x0800838d
 80083f8:	080084d3 	.word	0x080084d3
 80083fc:	6833      	ldr	r3, [r6, #0]
 80083fe:	1d1a      	adds	r2, r3, #4
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	6032      	str	r2, [r6, #0]
 8008404:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008408:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800840c:	2301      	movs	r3, #1
 800840e:	e09d      	b.n	800854c <_printf_i+0x1e8>
 8008410:	6833      	ldr	r3, [r6, #0]
 8008412:	6820      	ldr	r0, [r4, #0]
 8008414:	1d19      	adds	r1, r3, #4
 8008416:	6031      	str	r1, [r6, #0]
 8008418:	0606      	lsls	r6, r0, #24
 800841a:	d501      	bpl.n	8008420 <_printf_i+0xbc>
 800841c:	681d      	ldr	r5, [r3, #0]
 800841e:	e003      	b.n	8008428 <_printf_i+0xc4>
 8008420:	0645      	lsls	r5, r0, #25
 8008422:	d5fb      	bpl.n	800841c <_printf_i+0xb8>
 8008424:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008428:	2d00      	cmp	r5, #0
 800842a:	da03      	bge.n	8008434 <_printf_i+0xd0>
 800842c:	232d      	movs	r3, #45	@ 0x2d
 800842e:	426d      	negs	r5, r5
 8008430:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008434:	4859      	ldr	r0, [pc, #356]	@ (800859c <_printf_i+0x238>)
 8008436:	230a      	movs	r3, #10
 8008438:	e011      	b.n	800845e <_printf_i+0xfa>
 800843a:	6821      	ldr	r1, [r4, #0]
 800843c:	6833      	ldr	r3, [r6, #0]
 800843e:	0608      	lsls	r0, r1, #24
 8008440:	f853 5b04 	ldr.w	r5, [r3], #4
 8008444:	d402      	bmi.n	800844c <_printf_i+0xe8>
 8008446:	0649      	lsls	r1, r1, #25
 8008448:	bf48      	it	mi
 800844a:	b2ad      	uxthmi	r5, r5
 800844c:	2f6f      	cmp	r7, #111	@ 0x6f
 800844e:	4853      	ldr	r0, [pc, #332]	@ (800859c <_printf_i+0x238>)
 8008450:	6033      	str	r3, [r6, #0]
 8008452:	bf14      	ite	ne
 8008454:	230a      	movne	r3, #10
 8008456:	2308      	moveq	r3, #8
 8008458:	2100      	movs	r1, #0
 800845a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800845e:	6866      	ldr	r6, [r4, #4]
 8008460:	60a6      	str	r6, [r4, #8]
 8008462:	2e00      	cmp	r6, #0
 8008464:	bfa2      	ittt	ge
 8008466:	6821      	ldrge	r1, [r4, #0]
 8008468:	f021 0104 	bicge.w	r1, r1, #4
 800846c:	6021      	strge	r1, [r4, #0]
 800846e:	b90d      	cbnz	r5, 8008474 <_printf_i+0x110>
 8008470:	2e00      	cmp	r6, #0
 8008472:	d04b      	beq.n	800850c <_printf_i+0x1a8>
 8008474:	4616      	mov	r6, r2
 8008476:	fbb5 f1f3 	udiv	r1, r5, r3
 800847a:	fb03 5711 	mls	r7, r3, r1, r5
 800847e:	5dc7      	ldrb	r7, [r0, r7]
 8008480:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008484:	462f      	mov	r7, r5
 8008486:	42bb      	cmp	r3, r7
 8008488:	460d      	mov	r5, r1
 800848a:	d9f4      	bls.n	8008476 <_printf_i+0x112>
 800848c:	2b08      	cmp	r3, #8
 800848e:	d10b      	bne.n	80084a8 <_printf_i+0x144>
 8008490:	6823      	ldr	r3, [r4, #0]
 8008492:	07df      	lsls	r7, r3, #31
 8008494:	d508      	bpl.n	80084a8 <_printf_i+0x144>
 8008496:	6923      	ldr	r3, [r4, #16]
 8008498:	6861      	ldr	r1, [r4, #4]
 800849a:	4299      	cmp	r1, r3
 800849c:	bfde      	ittt	le
 800849e:	2330      	movle	r3, #48	@ 0x30
 80084a0:	f806 3c01 	strble.w	r3, [r6, #-1]
 80084a4:	f106 36ff 	addle.w	r6, r6, #4294967295
 80084a8:	1b92      	subs	r2, r2, r6
 80084aa:	6122      	str	r2, [r4, #16]
 80084ac:	f8cd a000 	str.w	sl, [sp]
 80084b0:	464b      	mov	r3, r9
 80084b2:	aa03      	add	r2, sp, #12
 80084b4:	4621      	mov	r1, r4
 80084b6:	4640      	mov	r0, r8
 80084b8:	f7ff fee6 	bl	8008288 <_printf_common>
 80084bc:	3001      	adds	r0, #1
 80084be:	d14a      	bne.n	8008556 <_printf_i+0x1f2>
 80084c0:	f04f 30ff 	mov.w	r0, #4294967295
 80084c4:	b004      	add	sp, #16
 80084c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80084ca:	6823      	ldr	r3, [r4, #0]
 80084cc:	f043 0320 	orr.w	r3, r3, #32
 80084d0:	6023      	str	r3, [r4, #0]
 80084d2:	4833      	ldr	r0, [pc, #204]	@ (80085a0 <_printf_i+0x23c>)
 80084d4:	2778      	movs	r7, #120	@ 0x78
 80084d6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80084da:	6823      	ldr	r3, [r4, #0]
 80084dc:	6831      	ldr	r1, [r6, #0]
 80084de:	061f      	lsls	r7, r3, #24
 80084e0:	f851 5b04 	ldr.w	r5, [r1], #4
 80084e4:	d402      	bmi.n	80084ec <_printf_i+0x188>
 80084e6:	065f      	lsls	r7, r3, #25
 80084e8:	bf48      	it	mi
 80084ea:	b2ad      	uxthmi	r5, r5
 80084ec:	6031      	str	r1, [r6, #0]
 80084ee:	07d9      	lsls	r1, r3, #31
 80084f0:	bf44      	itt	mi
 80084f2:	f043 0320 	orrmi.w	r3, r3, #32
 80084f6:	6023      	strmi	r3, [r4, #0]
 80084f8:	b11d      	cbz	r5, 8008502 <_printf_i+0x19e>
 80084fa:	2310      	movs	r3, #16
 80084fc:	e7ac      	b.n	8008458 <_printf_i+0xf4>
 80084fe:	4827      	ldr	r0, [pc, #156]	@ (800859c <_printf_i+0x238>)
 8008500:	e7e9      	b.n	80084d6 <_printf_i+0x172>
 8008502:	6823      	ldr	r3, [r4, #0]
 8008504:	f023 0320 	bic.w	r3, r3, #32
 8008508:	6023      	str	r3, [r4, #0]
 800850a:	e7f6      	b.n	80084fa <_printf_i+0x196>
 800850c:	4616      	mov	r6, r2
 800850e:	e7bd      	b.n	800848c <_printf_i+0x128>
 8008510:	6833      	ldr	r3, [r6, #0]
 8008512:	6825      	ldr	r5, [r4, #0]
 8008514:	6961      	ldr	r1, [r4, #20]
 8008516:	1d18      	adds	r0, r3, #4
 8008518:	6030      	str	r0, [r6, #0]
 800851a:	062e      	lsls	r6, r5, #24
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	d501      	bpl.n	8008524 <_printf_i+0x1c0>
 8008520:	6019      	str	r1, [r3, #0]
 8008522:	e002      	b.n	800852a <_printf_i+0x1c6>
 8008524:	0668      	lsls	r0, r5, #25
 8008526:	d5fb      	bpl.n	8008520 <_printf_i+0x1bc>
 8008528:	8019      	strh	r1, [r3, #0]
 800852a:	2300      	movs	r3, #0
 800852c:	6123      	str	r3, [r4, #16]
 800852e:	4616      	mov	r6, r2
 8008530:	e7bc      	b.n	80084ac <_printf_i+0x148>
 8008532:	6833      	ldr	r3, [r6, #0]
 8008534:	1d1a      	adds	r2, r3, #4
 8008536:	6032      	str	r2, [r6, #0]
 8008538:	681e      	ldr	r6, [r3, #0]
 800853a:	6862      	ldr	r2, [r4, #4]
 800853c:	2100      	movs	r1, #0
 800853e:	4630      	mov	r0, r6
 8008540:	f7f7 fe4e 	bl	80001e0 <memchr>
 8008544:	b108      	cbz	r0, 800854a <_printf_i+0x1e6>
 8008546:	1b80      	subs	r0, r0, r6
 8008548:	6060      	str	r0, [r4, #4]
 800854a:	6863      	ldr	r3, [r4, #4]
 800854c:	6123      	str	r3, [r4, #16]
 800854e:	2300      	movs	r3, #0
 8008550:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008554:	e7aa      	b.n	80084ac <_printf_i+0x148>
 8008556:	6923      	ldr	r3, [r4, #16]
 8008558:	4632      	mov	r2, r6
 800855a:	4649      	mov	r1, r9
 800855c:	4640      	mov	r0, r8
 800855e:	47d0      	blx	sl
 8008560:	3001      	adds	r0, #1
 8008562:	d0ad      	beq.n	80084c0 <_printf_i+0x15c>
 8008564:	6823      	ldr	r3, [r4, #0]
 8008566:	079b      	lsls	r3, r3, #30
 8008568:	d413      	bmi.n	8008592 <_printf_i+0x22e>
 800856a:	68e0      	ldr	r0, [r4, #12]
 800856c:	9b03      	ldr	r3, [sp, #12]
 800856e:	4298      	cmp	r0, r3
 8008570:	bfb8      	it	lt
 8008572:	4618      	movlt	r0, r3
 8008574:	e7a6      	b.n	80084c4 <_printf_i+0x160>
 8008576:	2301      	movs	r3, #1
 8008578:	4632      	mov	r2, r6
 800857a:	4649      	mov	r1, r9
 800857c:	4640      	mov	r0, r8
 800857e:	47d0      	blx	sl
 8008580:	3001      	adds	r0, #1
 8008582:	d09d      	beq.n	80084c0 <_printf_i+0x15c>
 8008584:	3501      	adds	r5, #1
 8008586:	68e3      	ldr	r3, [r4, #12]
 8008588:	9903      	ldr	r1, [sp, #12]
 800858a:	1a5b      	subs	r3, r3, r1
 800858c:	42ab      	cmp	r3, r5
 800858e:	dcf2      	bgt.n	8008576 <_printf_i+0x212>
 8008590:	e7eb      	b.n	800856a <_printf_i+0x206>
 8008592:	2500      	movs	r5, #0
 8008594:	f104 0619 	add.w	r6, r4, #25
 8008598:	e7f5      	b.n	8008586 <_printf_i+0x222>
 800859a:	bf00      	nop
 800859c:	08008719 	.word	0x08008719
 80085a0:	0800872a 	.word	0x0800872a

080085a4 <memmove>:
 80085a4:	4288      	cmp	r0, r1
 80085a6:	b510      	push	{r4, lr}
 80085a8:	eb01 0402 	add.w	r4, r1, r2
 80085ac:	d902      	bls.n	80085b4 <memmove+0x10>
 80085ae:	4284      	cmp	r4, r0
 80085b0:	4623      	mov	r3, r4
 80085b2:	d807      	bhi.n	80085c4 <memmove+0x20>
 80085b4:	1e43      	subs	r3, r0, #1
 80085b6:	42a1      	cmp	r1, r4
 80085b8:	d008      	beq.n	80085cc <memmove+0x28>
 80085ba:	f811 2b01 	ldrb.w	r2, [r1], #1
 80085be:	f803 2f01 	strb.w	r2, [r3, #1]!
 80085c2:	e7f8      	b.n	80085b6 <memmove+0x12>
 80085c4:	4402      	add	r2, r0
 80085c6:	4601      	mov	r1, r0
 80085c8:	428a      	cmp	r2, r1
 80085ca:	d100      	bne.n	80085ce <memmove+0x2a>
 80085cc:	bd10      	pop	{r4, pc}
 80085ce:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80085d2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80085d6:	e7f7      	b.n	80085c8 <memmove+0x24>

080085d8 <_sbrk_r>:
 80085d8:	b538      	push	{r3, r4, r5, lr}
 80085da:	4d06      	ldr	r5, [pc, #24]	@ (80085f4 <_sbrk_r+0x1c>)
 80085dc:	2300      	movs	r3, #0
 80085de:	4604      	mov	r4, r0
 80085e0:	4608      	mov	r0, r1
 80085e2:	602b      	str	r3, [r5, #0]
 80085e4:	f7f8 fb66 	bl	8000cb4 <_sbrk>
 80085e8:	1c43      	adds	r3, r0, #1
 80085ea:	d102      	bne.n	80085f2 <_sbrk_r+0x1a>
 80085ec:	682b      	ldr	r3, [r5, #0]
 80085ee:	b103      	cbz	r3, 80085f2 <_sbrk_r+0x1a>
 80085f0:	6023      	str	r3, [r4, #0]
 80085f2:	bd38      	pop	{r3, r4, r5, pc}
 80085f4:	20001ea0 	.word	0x20001ea0

080085f8 <memcpy>:
 80085f8:	440a      	add	r2, r1
 80085fa:	4291      	cmp	r1, r2
 80085fc:	f100 33ff 	add.w	r3, r0, #4294967295
 8008600:	d100      	bne.n	8008604 <memcpy+0xc>
 8008602:	4770      	bx	lr
 8008604:	b510      	push	{r4, lr}
 8008606:	f811 4b01 	ldrb.w	r4, [r1], #1
 800860a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800860e:	4291      	cmp	r1, r2
 8008610:	d1f9      	bne.n	8008606 <memcpy+0xe>
 8008612:	bd10      	pop	{r4, pc}

08008614 <_realloc_r>:
 8008614:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008618:	4680      	mov	r8, r0
 800861a:	4615      	mov	r5, r2
 800861c:	460c      	mov	r4, r1
 800861e:	b921      	cbnz	r1, 800862a <_realloc_r+0x16>
 8008620:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008624:	4611      	mov	r1, r2
 8008626:	f7ff bc4b 	b.w	8007ec0 <_malloc_r>
 800862a:	b92a      	cbnz	r2, 8008638 <_realloc_r+0x24>
 800862c:	f7ff fbdc 	bl	8007de8 <_free_r>
 8008630:	2400      	movs	r4, #0
 8008632:	4620      	mov	r0, r4
 8008634:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008638:	f000 f81a 	bl	8008670 <_malloc_usable_size_r>
 800863c:	4285      	cmp	r5, r0
 800863e:	4606      	mov	r6, r0
 8008640:	d802      	bhi.n	8008648 <_realloc_r+0x34>
 8008642:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8008646:	d8f4      	bhi.n	8008632 <_realloc_r+0x1e>
 8008648:	4629      	mov	r1, r5
 800864a:	4640      	mov	r0, r8
 800864c:	f7ff fc38 	bl	8007ec0 <_malloc_r>
 8008650:	4607      	mov	r7, r0
 8008652:	2800      	cmp	r0, #0
 8008654:	d0ec      	beq.n	8008630 <_realloc_r+0x1c>
 8008656:	42b5      	cmp	r5, r6
 8008658:	462a      	mov	r2, r5
 800865a:	4621      	mov	r1, r4
 800865c:	bf28      	it	cs
 800865e:	4632      	movcs	r2, r6
 8008660:	f7ff ffca 	bl	80085f8 <memcpy>
 8008664:	4621      	mov	r1, r4
 8008666:	4640      	mov	r0, r8
 8008668:	f7ff fbbe 	bl	8007de8 <_free_r>
 800866c:	463c      	mov	r4, r7
 800866e:	e7e0      	b.n	8008632 <_realloc_r+0x1e>

08008670 <_malloc_usable_size_r>:
 8008670:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008674:	1f18      	subs	r0, r3, #4
 8008676:	2b00      	cmp	r3, #0
 8008678:	bfbc      	itt	lt
 800867a:	580b      	ldrlt	r3, [r1, r0]
 800867c:	18c0      	addlt	r0, r0, r3
 800867e:	4770      	bx	lr

08008680 <_init>:
 8008680:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008682:	bf00      	nop
 8008684:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008686:	bc08      	pop	{r3}
 8008688:	469e      	mov	lr, r3
 800868a:	4770      	bx	lr

0800868c <_fini>:
 800868c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800868e:	bf00      	nop
 8008690:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008692:	bc08      	pop	{r3}
 8008694:	469e      	mov	lr, r3
 8008696:	4770      	bx	lr
